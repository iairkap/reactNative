%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.4
%%For: 
%%CreationDate: 9/20/2021
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.4.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.4.1 x498 R agm 4.7767 ct 6.0%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7632 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDACFFA9FFA9
%FFA9FFFFFFA9FD07FFA9FFFFFFA9FD05FFA9FFA9FFA9FD05FFA8FFA8A8FF
%FFFFA8A8FD07FFA8FD4AFFA985A9AF85A985FF85AFA9FF85FFAFAFA98585
%AFFFA9FFFFA9AFA9A985FFA9A985FFFFFF59FF845252A8A8525259A8A852
%FF7DA87D7D52A8FD48FFA985FFFF85A9A98585A9FFA98585FF85A9A9FF85
%AF7FFFFFA985A9A9FFFF8585FFA9FFFF7D7D53FFFFFF7D7DFFA87D7D277D
%A87D7D53A8A8FD1BFFAFFFA9FD05FFAFFD24FF8585A9FF858585FF85AFAF
%FF85AF85AFA9AFFFA9A9A9FFFFA9AF85A9A9FFFFAF85FFFFFF7D7D52FFFF
%FF52FFFFFF527D7D7D2EA8FFA852A8FFFFA9857F855B857F855B857F855B
%857F855B8585FFFFFFA9A985AFA9AFFFA9A9FFA9AFA9FFAF857F855B857F
%855B857F855B857F855B857FFD0FFFA9A9FFFF85A9858585A9AFA985FF85
%7FAF85A97FFF5BA9A9A985A985AFA9A9A985A9FFFF59A85952847EA82EA8
%527D7D7DFF277D7DA8527DFFFFA9375B5B5B375B5B5B375B5B5B375B5B5B
%3785FD04FF8585A9FFA9FF5BFFA98585FFFFFFFD045B375B5B5B375B5B5B
%375B5B5B375BFD0FFFAFFFFFFFAFFFAFFFA9A985FFAFFD04FFA9A9FFFFAF
%85AFAFFFA9AF85FFA9AFA9FFFFFFA8FFFF7E7DAFFFA87DA8FFFFA8FFA8FF
%A87D7DFFFFFFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FD05FFA9FD
%07FFA9FD04FFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FDFCFFFDFCFF
%FDFCFFFDFCFFFDFCFFFDFCFFFDB1FFA7A8A8FD30FFA84CFD4AFFA87B9F7B
%75A8FD14FF59A8FD18FF76937DFD1BFFA8FD2EFFA0C8C2C851A8FD12FF7D
%2F53FD17FFAF9AB5A1FD14FFA1A8FD04FFAFFD27FFA87DFD06FF7C7BA69F
%C176FD10FFA859527D7D52A8FD15FF7D6F9A4BA8FD11FFCA767676A1FFFF
%A9FFFFFFA9FD25FFA877A87DA87DA24B7675A6A07CA9FD0EFFA87DA8A8FF
%FFA87D7DFD13FF842F5B5A5B2FFD11FF76C9A1CAA0A1FFFFFFA884A8A8FD
%25FF7693BC93B693BC93BC93BC6FFD0FFF7DFF7DFFFFFF7DFF7DA8FD11FF
%AF597E7E847E7E7DFD0FFFA87DFD04A17DA87DA8A8A9A8A8A8FD24FF76FD
%0ABC9AAFFD0DFF7DFFFFA8FFFFFFA8AFFF7DFD11FF7DA9FD05FF84A8FD0F
%FFA8A1A1A1A8AFA8FD06FF84A8FD23FF7693BC93BC93BCB5BC93BC4BFD0E
%FFA8FFA94BA1FFFF7DFFFFA8A8FD10FFA77BA0A0A6A0A675A9FD0EFF7D7D
%775252A87E847D847D7E7DA8537DFD23FFA87D7D7D52A17D7676A176A8FD
%0EFF7EFF7D4B52FFFF7EA8FFA8FD11FF7DFD05C8A07CA8FD0EFF532F5A30
%5A2F5A30542F5A30542F5453FD27FFAF597D84FD12FF7DFFFF52A8A87C75
%7DFF84A8FD10FFA19FC8C7C8C1C875A8FD0EFF7D5A5A5B5A5B5A5B5A5B5A
%5B5A5B2FA8FD25FFA8FFA87E7DA8FD10FFA9A751A7FFAEFFA89FA0A9A876
%77A8FD0FFF7DFD06C87CA8FD0FFF53855B855B855B855B855B855B5AFD25
%FF7D532E7EFFFF7D532F7DFD0DFFAF51C751A853A87DC77CFF52B56F7DFD
%0FFFA19FC8C8C8C7C875A8FD0FFF7D30615B5B5B615B5B5B855B307DFD24
%FFCA5A5A5A53A8A87D547E2FFD0EFF7D767D7D5B53A87B9F84A86F76AFFD
%0FFF7DFD06C87CA8FD10FFA8595A5A7E5A7E5A5A2F7E84FD22FFA8FFA8FF
%52302F7DA8A87D2F2F53A8FD0DFFA8FFA87E2F53FFA87C7DA8FFA8FD10FF
%A79FC8C7C8C7C875FD0FFFA8A8A77D28FD047DA17D527DA87DA8FD21FFA8
%A884A87D8483A8A8A87D847DA8FD11FFA8CFFD15FFA8A87D7C7BA07CA07B
%7C7DA8FD0EFFA8FFA8FFFFFFA8FD05FFA8FD5AFFA8FFA9AFA8FFA8AFA8FF
%A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD7AFFA9FFA8FD7B
%FFA97CA09FA0757DFD16FFA87DFD1AFFAFFFA8FD28FFA8A8A8FD18FFA975
%C87B7C7CA09F7DFD16FF7DFD19FFA89B6F9A76A8FD25FF7DFFAFA8A8FD17
%FF51C8767D52A176A09F7DFD14FFA87DFD18FF7D756FBCB5BC6F7EFD23FF
%A8A8FFFFA8A8A8FD05FFA8FD0FFF7DC87CA1C9A1A1CA76C87CFD14FF7D76
%A8FD16FFA8767C7C99BCBCBC6FFD23FF7E53FFCAA1A1CACAFD04FF7D53FD
%0EFFA19F52A1C3C9CAC37D51A0A2FD12FFA751A051FD16FFA193767BA075
%BCBC937DFD22FF7E5AFFFFCAC3FD06FF5A5AFD0EFF7DC89FA1CAA1A1CA76
%C89FA8FD12FF7DFFFFA87DFD15FF7DBCB6A07C7C99BCB5A1FD22FF7E2F7D
%7DA87D7E7DA87D7E7D5953FD0EFF7D75C775A1A1C376A09F527DFD11FF7D
%A8AFFFFF7E7DFD14FFA193BC93767BA0759376FD22FF7E5AA8FFA8AFA8FF
%A8A8A8FF7E7EFD0EFF7E5B53A07BA0A0A07C5A30A8FD0EFFA87E7DA9AFFF
%A9FFA9A87DA8FD12FF599ABCBCBC9A7C7C6FA8FD22FF7E59FFA8A9A8A8A8
%A9A8A8A87E53FD0EFF7E5B5B307D7B7C535B5B5B7DFD0DFFA86F6F9A939A
%6F9A6F9A939A6F76FD10FF7D7D7D9AB5BCBB76517DFD23FF7E597C7C7CA0
%7C7C7CA07CA1537EFD0EFF7D5B5B855B5A2F5B5B853084FD0DFF7E535A54
%5A545A545A545A547E2FA8FD0EFFA85A5AA95276939A6F7DFD24FF7E28FD
%0A9F5253FD0EFF7E3661FD045B2F2F305A7DFD0DFF59FD0C7D53A8FD0DFF
%7D545B5B2F7DA8A87DFD26FF7D5A53592F5953532F5953592F7EFD0EFF7D
%5B5B855B855B855A5A2FFD0FFF7CA09FC8A0C89FC8A0A69FA07DFD0DFF7D
%5A5B8530A8FD2BFF7D537DA87EA884A87E842F7EA8FD0FFF2F615B5B5B85
%5B85307DFD10FFA87D84A8A8A884A97D7DA8FD0EFF7D5B85307DFD2BFF84
%A82EFD07A87D537DA8A8FD0EFFA82F615B855B853659CFFD11FFA8A8A87D
%5384A8A8FD10FFA85A2F59FD2BFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD
%10FFA8535A545A2F7DA8FD11FF7DA8A8A87D537DFD04A8FD0FFFA87EA8FD
%4CFFA8A8A8FD15FFA8FFA8FFA8FFA8FFA8FDFCFFFDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFDFCFFFD60FFAFFD7DFFA87CA17DFD19FFA8FD60FFAF7C9FC8
%C79F76FD16FF7D75A07CFD15FFCFFFCFFFCFFFCFFFCFFFCFFD13FF7D7D7C
%A8FD28FFA89FCDC8C8A09F7DFD13FFA1A17BC8C8A07DFD12FFA8597E597E
%5A7E597E5A7E597E59FD11FF7DA0C7C875A8FD27FF7CA0A0A076A199A1AF
%FD11FF7D4444C89FC89FA1FD04FFAFFD0DFF7D37315B305B305B305B305B
%3130A8FD0FFFA97CC1C8C8C776FD27FFA77CA1A1CAA1757CA87DA8FD10FF
%7DA17CC8C8A07DFFAFFF76A7FD0DFFA87CA052847E847E847E7E76A776FD
%11FF7CC8C8C8C1A1FD27FF7CA0A1C9A1A152A8527D7D7DA8FD0FFFA876C7
%C875A07BA07BC87DFD0DFF7DA09FA1AFFD05FFA8A09F7CA9FD10FF7D9FC8
%C89F7DFD27FFA79FA1A1A17DA87DA176A17DA8FD0EFFA87CC7A67D7D7DA1
%C8C89FA7FD0DFFA884FFFFFFAFFFFFFFAFFFFFFF7DFD11FFA8A0C8C87CFD
%28FF7CC8757D767D7DA1C3C976A87DFD0EFFA79FC82F5B5B3752C8C89F7D
%FD0DFFA8A884A8A8FFA8FFA9FFA8A8A87DA8FD11FF7BC8C1A0FD28FF7C75
%7CA1C352A9A1A1A0A87E59CFFD0DFFA1C8C85A5B5B53C8C8C876FD0FFF2F
%5B3053A8FFFFFF7D54303053FD0FFFA9A87E7D7CA177847EFD25FF7D6FBC
%939A6F535B7E7DA8535B54FD0FFF75C79F7C7CC2C7C875A8FD0FFF595B85
%3153A8FF7D305B853084FD0FFFA82930305B305A302FA8FD24FF76FD04BC
%BB53853659527D545ACFFD0FFF7DFD05A07CFD11FFA85A5B853084FF5A5B
%855B59FD12FF7D535B5B28A8A8FD25FF7D45BCBCBC93535376939A76542F
%FD0DFFA8FFA8FFA8A8A8A9A8FFA8FFFFA9A8FD0DFF7D2F5B5B7DFF2F5B36
%53A8FD11FFA8837D5A53847DFD26FF7D946F9A9ABC9ABCBB9A525A307EFD
%0CFFA8A87DA87DFD05A87DFD04A8FD0FFF845A2F7EA8592F7EA8FD12FFA8
%A8FD04FFA8A8FD25FFA193BC936F6FBC6F53305B3653A8FD0CFFAFA8A87D
%FD05A87EA87DA8A8A8FD10FFCAA87DA87DCFFD14FFA87DA8FFA8A87DFD26
%FFA8BCBCC3BC9A769A525A597ECFFD0DFFA8A8A8FF7DFD04A8FF7DA9A8A8
%A8FD2BFFA8A87DA87EFD2AFFCAFD05FFA8FDFCFFFDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFDFCFFFDFCFFFD84FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.217bca6, 2021/06/14-18:28:11        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 25.4 (Windows)"
   xmp:CreateDate="2021-09-20T14:57:22+03:00"
   xmp:ModifyDate="2021-09-20T14:57:22+03:00"
   xmp:MetadataDate="2021-09-20T14:57:22+03:00"
   xmpMM:RenditionClass="proof:pdf"
   xmpMM:OriginalDocumentID="uuid:65E6390686CF11DBA6E2D887CEACB407"
   xmpMM:DocumentID="xmp.did:61f74e45-415e-9447-b6a9-f912d4d52a9a"
   xmpMM:InstanceID="xmp.iid:61f74e45-415e-9447-b6a9-f912d4d52a9a"
   illustrator:StartupProfile="Web"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00"
   pdfx:CreatorVersion="21.0.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ox030_source</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:5c6ea82d-7c16-2245-8ede-7cc4b7f867c9"
    stRef:documentID="xmp.did:5c6ea82d-7c16-2245-8ede-7cc4b7f867c9"
    stRef:originalDocumentID="uuid:65E6390686CF11DBA6E2D887CEACB407"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:cb4e6aba-8b9a-9c48-a47e-d03d4b1e01ad"
      stEvt:when="2019-10-14T11:24:24+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.1 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5c6ea82d-7c16-2245-8ede-7cc4b7f867c9"
      stEvt:when="2021-09-20T14:56:39+03:00"
      stEvt:softwareAgent="Adobe Illustrator 25.4 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:61f74e45-415e-9447-b6a9-f912d4d52a9a"
      stEvt:when="2021-09-20T14:57:22+03:00"
      stEvt:softwareAgent="Adobe Illustrator 25.4 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1000.000000"
    stDim:h="1000.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="0"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="R=237 G=242 B=248"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="237"
         xmpG:green="242"
         xmpG:blue="248"/>
        <rdf:li
         xmpG:swatchName="R=213 G=225 B=239"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="212"
         xmpG:green="225"
         xmpG:blue="239"/>
        <rdf:li
         xmpG:swatchName="R=220 G=230 B=246"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="219"
         xmpG:green="230"
         xmpG:blue="246"/>
        <rdf:li
         xmpG:swatchName="R=197 G=213 B=240"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="196"
         xmpG:green="212"
         xmpG:blue="239"/>
        <rdf:li
         xmpG:swatchName="R=116 G=170 B=255"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="116"
         xmpG:green="170"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="R=79 G=136 B=255"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="79"
         xmpG:green="135"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="R=255 G=170 B=76"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="170"
         xmpG:blue="75"/>
        <rdf:li
         xmpG:swatchName="R=255 G=138 B=50"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="137"
         xmpG:blue="49"/>
        <rdf:li
         xmpG:swatchName="R=255 G=95 B=95"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="94"
         xmpG:blue="94"/>
        <rdf:li
         xmpG:swatchName="R=226 G=59 B=59"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="226"
         xmpG:green="59"
         xmpG:blue="59"/>
        <rdf:li
         xmpG:swatchName="R=255 G=191 B=180"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="191"
         xmpG:blue="179"/>
        <rdf:li
         xmpG:swatchName="R=255 G=159 B=145"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="158"
         xmpG:blue="144"/>
        <rdf:li
         xmpG:swatchName="R=37 G=45 B=50"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="36"
         xmpG:green="45"
         xmpG:blue="49"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
233 364.5 mo
233 370.851 227.851 376 221.5 376 cv
215.149 376 210 370.851 210 364.5 cv
210 358.149 215.149 353 221.5 353 cv
227.851 353 233 358.149 233 364.5 cv
cp
.309804 .533333 1 rgb
f
230 363 mo
230 368.523 225.523 373 220 373 cv
214.477 373 210 368.523 210 363 cv
210 357.477 214.477 353 220 353 cv
225.523 353 230 357.477 230 363 cv
cp
.454902 .666667 1 rgb
f
226 364.5 mo
226 366.985 223.985 369 221.5 369 cv
219.015 369 217 366.985 217 364.5 cv
217 362.015 219.015 360 221.5 360 cv
223.985 360 226 362.015 226 364.5 cv
cp
.862745 .901961 .964706 rgb
f
182 364.5 mo
182 370.851 176.851 376 170.5 376 cv
164.149 376 159 370.851 159 364.5 cv
159 358.149 164.149 353 170.5 353 cv
176.851 353 182 358.149 182 364.5 cv
cp
.309804 .533333 1 rgb
f
179 363 mo
179 368.523 174.523 373 169 373 cv
163.477 373 159 368.523 159 363 cv
159 357.477 163.477 353 169 353 cv
174.523 353 179 357.477 179 363 cv
cp
.454902 .666667 1 rgb
f
175 364.5 mo
175 366.985 172.985 369 170.5 369 cv
168.015 369 166 366.985 166 364.5 cv
166 362.015 168.015 360 170.5 360 cv
172.985 360 175 362.015 175 364.5 cv
cp
.862745 .901961 .964706 rgb
f
233.737 331 mo
158.263 331 li
154.804 331 152 328.196 152 324.737 cv
152 304 li
240 304 li
240 324.737 li
240 328.196 237.196 331 233.737 331 cv
cp
.886275 .231373 .231373 rgb
f
209 273 mo
197 273 li
197 304 li
240 304 li
240 286.879 226.121 273 209 273 cv
cp
1 .666667 .298039 rgb
f
232.321 327 mo
155.679 327 li
153.647 327 152 325.353 152 323.321 cv
152 304 li
236 304 li
236 323.321 li
236 325.353 234.353 327 232.321 327 cv
cp
1 .372549 .372549 rgb
f
205 273 mo
197 273 li
197 304 li
236 304 li
236 286.879 222.121 273 205 273 cv
cp
1 .788235 .376471 rgb
f
2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
201.811 303.874 mo
235.463 288.463 li
1 .666667 .298039 rgb
@
200 303 mo
219.232 275.326 li
@
3 lw
133.5 376.5 mo
242.5 376.5 li
.145098 .176471 .196078 rgb
@
196.5 272.5 mo
196.5 303.5 li
151.5 303.5 li
151.5 324.589 li
151.5 328.406 154.594 331.5 158.41 331.5 cv
233.589 331.5 li
237.406 331.5 240.5 328.406 240.5 324.589 cv
240.5 304.632 li
240.5 286.886 226.114 272.5 208.368 272.5 cv
196.5 272.5 li
cp
@
2 lw
197 304 mo
240 304 li
@
234 287 mo
197 304 li
@
217 275 mo
197 304 li
@
3 lw
182.5 364.5 mo
182.5 371.127 177.127 376.5 170.5 376.5 cv
163.873 376.5 158.5 371.127 158.5 364.5 cv
158.5 357.873 163.873 352.5 170.5 352.5 cv
177.127 352.5 182.5 357.873 182.5 364.5 cv
cp
@
209.5 364.5 mo
209.5 371.127 214.873 376.5 221.5 376.5 cv
228.127 376.5 233.5 371.127 233.5 364.5 cv
233.5 357.873 228.127 352.5 221.5 352.5 cv
214.873 352.5 209.5 357.873 209.5 364.5 cv
cp
@
183.5 365.5 mo
209.5 365.5 li
@
2 lw
175 364.5 mo
175 366.985 172.985 369 170.5 369 cv
168.015 369 166 366.985 166 364.5 cv
166 362.015 168.015 360 170.5 360 cv
172.985 360 175 362.015 175 364.5 cv
cp
@
226 364.5 mo
226 366.985 223.985 369 221.5 369 cv
219.015 369 217 366.985 217 364.5 cv
217 362.015 219.015 360 221.5 360 cv
223.985 360 226 362.015 226 364.5 cv
cp
@
3 lw
178.5 354.5 mo
213.274 331.674 li
@
213.274 354.5 mo
178.5 331.674 li
@
135.5 293.5 mo
144.5 293.5 li
151.5 303.5 li
@
401.2 289 mo
390.8 289 li
390.36 289 390 288.64 390 288.2 cv
390 281.8 li
390 281.36 390.36 281 390.8 281 cv
401.2 281 li
401.64 281 402 281.36 402 281.8 cv
402 288.2 li
402 288.64 401.64 289 401.2 289 cv
cp
.309804 .533333 1 rgb
f
397.2 289 mo
390.8 289 li
390.36 289 390 288.64 390 288.2 cv
390 281.8 li
390 281.36 390.36 281 390.8 281 cv
397.2 281 li
397.64 281 398 281.36 398 281.8 cv
398 288.2 li
398 288.64 397.64 289 397.2 289 cv
cp
.454902 .666667 1 rgb
f
387 330.5 mo
387 334.09 384.09 337 380.5 337 cv
376.91 337 374 334.09 374 330.5 cv
374 326.91 376.91 324 380.5 324 cv
384.09 324 387 326.91 387 330.5 cv
cp
.886275 .231373 .231373 rgb
f
383 329.5 mo
383 331.985 380.985 334 378.5 334 cv
376.015 334 374 331.985 374 329.5 cv
374 327.015 376.015 325 378.5 325 cv
380.985 325 383 327.015 383 329.5 cv
cp
1 .372549 .372549 rgb
f
389 366.5 mo
389 371.194 385.194 375 380.5 375 cv
375.806 375 372 371.194 372 366.5 cv
372 361.806 375.806 358 380.5 358 cv
385.194 358 389 361.806 389 366.5 cv
cp
.309804 .533333 1 rgb
f
385 365.5 mo
385 369.09 382.09 372 378.5 372 cv
374.91 372 372 369.09 372 365.5 cv
372 361.91 374.91 359 378.5 359 cv
382.09 359 385 361.91 385 365.5 cv
cp
.454902 .666667 1 rgb
f
355.5 343 mo
359.363 350.571 li
368 351.785 li
361.75 357.678 li
363.225 366 li
355.5 362.071 li
347.775 366 li
349.25 357.678 li
343 351.785 li
351.637 350.571 li
355.5 343 li
cp
1 .788235 .376471 rgb
f
364 351 mo
358 356 li
359 364 li
363 365 li
361.968 357.463 li
368 351 li
364 351 li
cp
1 .666667 .298039 rgb
f
436.5 343 mo
440.363 350.571 li
449 351.785 li
442.75 357.678 li
444.225 366 li
436.5 362.071 li
428.775 366 li
430.25 357.678 li
424 351.785 li
432.637 350.571 li
436.5 343 li
cp
1 .372549 .372549 rgb
f
445 351 mo
439 356 li
440 364 li
444 365 li
442.968 357.463 li
449 351 li
445 351 li
cp
.886275 .231373 .231373 rgb
f
410 353.5 mo
410 346.894 413.892 341.21 419.5 338.575 cv
417.373 337.575 415.006 337 412.5 337 cv
403.387 337 396 344.387 396 353.5 cv
396 362.613 403.387 370 412.5 370 cv
415.006 370 417.373 369.425 419.5 368.425 cv
413.892 365.79 410 360.106 410 353.5 cv
cp
1 .666667 .298039 rgb
f
414.93 369.795 mo
409.824 366.174 406.479 360.237 406.479 353.5 cv
406.479 346.763 409.824 340.826 414.93 337.205 cv
414.135 337.084 413.329 337 412.5 337 cv
403.387 337 396 344.387 396 353.5 cv
396 362.613 403.387 370 412.5 370 cv
413.329 370 414.135 369.916 414.93 369.795 cv
cp
1 .788235 .376471 rgb
f
355.5 340.5 mo
355.5 330 li
355.5 307.632 373.632 289.5 396 289.5 cv
418.368 289.5 436.5 307.632 436.5 330 cv
436.5 340.5 li
.145098 .176471 .196078 rgb
@
396.5 279.5 mo
396.5 275.5 li
@
380.5 322.5 mo
380.5 305 li
380.5 296.44 387.44 289.5 396 289.5 cv
404.56 289.5 411.5 296.44 411.5 305 cv
411.5 336.5 li
@
380.5 356.5 mo
380.5 338.5 li
@
355.5 341.488 mo
359.618 349.832 li
368.826 351.17 li
362.163 357.665 li
363.736 366.836 li
355.5 362.506 li
347.264 366.836 li
348.837 357.665 li
342.174 351.17 li
351.382 349.832 li
355.5 341.488 li
cp
@
436.5 341.488 mo
440.618 349.832 li
449.826 351.17 li
443.163 357.665 li
444.736 366.836 li
436.5 362.506 li
428.264 366.836 li
429.837 357.665 li
423.174 351.17 li
432.382 349.832 li
436.5 341.488 li
cp
@
389.5 366.5 mo
389.5 371.471 385.471 375.5 380.5 375.5 cv
375.529 375.5 371.5 371.471 371.5 366.5 cv
371.5 361.529 375.529 357.5 380.5 357.5 cv
385.471 357.5 389.5 361.529 389.5 366.5 cv
cp
@
387.5 330.5 mo
387.5 334.366 384.366 337.5 380.5 337.5 cv
376.634 337.5 373.5 334.366 373.5 330.5 cv
373.5 326.634 376.634 323.5 380.5 323.5 cv
384.366 323.5 387.5 326.634 387.5 330.5 cv
cp
@
410.5 353.5 mo
410.5 346.807 414.377 341.034 420 338.261 cv
417.735 337.144 415.196 336.5 412.5 336.5 cv
403.111 336.5 395.5 344.111 395.5 353.5 cv
395.5 362.889 403.111 370.5 412.5 370.5 cv
415.196 370.5 417.735 369.856 420 368.739 cv
414.377 365.966 410.5 360.193 410.5 353.5 cv
cp
@
391.942 289.5 mo
390.599 289.5 389.5 288.401 389.5 287.058 cv
389.5 282.942 li
389.5 281.599 390.599 280.5 391.942 280.5 cv
400.058 280.5 li
401.401 280.5 402.5 281.599 402.5 282.942 cv
402.5 287.058 li
402.5 288.401 401.401 289.5 400.058 289.5 cv
@
604 853 mo
576.938 853 555 831.062 555 804 cv
555 784 li
653 784 li
653 804 li
653 831.062 631.062 853 604 853 cv
cp
.835294 .882353 .937255 rgb
f
601.5 852.937 mo
627.4 851.635 648 830.224 648 804 cv
648 784 li
555 784 li
555 804 li
555 830.224 575.6 851.635 601.5 852.937 cv
cp
.929412 .94902 .972549 rgb
f
636.5 787 mo
653 787 li
653 798 li
636.5 798 li
633.462 798 631 795.538 631 792.5 cv
631 789.462 633.462 787 636.5 787 cv
cp
.835294 .882353 .937255 rgb
f
571.5 787 mo
555 787 li
555 798 li
571.5 798 li
574.538 798 577 795.538 577 792.5 cv
577 789.462 574.538 787 571.5 787 cv
cp
f
635 784 mo
575 784 li
575 787 li
635 787 li
635 784 li
cp
f
654 784 mo
554 784 li
554 770 li
654 770 li
654 784 li
cp
.454902 .666667 1 rgb
f
654 784 mo
650 784 li
650 770 li
654 770 li
654 784 li
cp
.309804 .533333 1 rgb
f
651.705 815.174 mo
647.918 813.151 643.594 812 639 812 cv
624.088 812 612 824.088 612 839 cv
612 843.594 613.151 847.918 615.174 851.705 cv
633.258 847.484 647.484 833.258 651.705 815.174 cv
cp
f
650 821.207 mo
647.015 819.612 643.607 818.705 639.986 818.705 cv
628.233 818.705 618.705 828.233 618.705 839.986 cv
618.705 843.607 619.612 847.015 621.207 850 cv
635.461 846.674 646.674 835.461 650 821.207 cv
cp
.454902 .666667 1 rgb
f
556 815.174 mo
559.787 813.151 564.111 812 568.705 812 cv
583.616 812 595.705 824.088 595.705 839 cv
595.705 843.594 594.554 847.918 592.53 851.705 cv
574.446 847.484 560.22 833.258 556 815.174 cv
cp
.309804 .533333 1 rgb
f
557.705 821.207 mo
560.689 819.612 564.098 818.705 567.718 818.705 cv
579.472 818.705 589 828.233 589 839.986 cv
589 843.607 588.093 847.015 586.498 850 cv
572.244 846.674 561.031 835.461 557.705 821.207 cv
cp
.454902 .666667 1 rgb
f
571.5 784 mo
555 784 li
555 795 li
571.5 795 li
574.538 795 577 792.538 577 789.5 cv
577 786.462 574.538 784 571.5 784 cv
cp
1 .666667 .298039 rgb
f
636.5 784 mo
653 784 li
653 795 li
636.5 795 li
633.462 795 631 792.538 631 789.5 cv
631 786.462 633.462 784 636.5 784 cv
cp
f
564.5 771.5 mo
564.5 783.5 li
.309804 .533333 1 rgb
@
575.5 771.5 mo
575.5 783.5 li
@
586.5 771.5 mo
586.5 783.5 li
@
597.5 771.5 mo
597.5 783.5 li
@
608.5 771.5 mo
608.5 783.5 li
@
619.5 771.5 mo
619.5 783.5 li
@
630.5 771.5 mo
630.5 783.5 li
@
641.5 771.5 mo
641.5 783.5 li
@
631.212 791 mo
631.866 793.308 633.983 795 636.5 795 cv
653 795 li
653 787 li
636.5 787 li
633.983 787 631.866 788.692 631.212 791 cv
cp
1 .788235 .376471 rgb
f
570.5 787 mo
555 787 li
555 795 li
571.5 795 li
573.357 795 574.996 794.077 575.991 792.667 cv
575.993 792.611 576 792.557 576 792.5 cv
576 789.462 573.538 787 570.5 787 cv
cp
f
652 794 mo
648 794 li
648 785 li
652 785 li
652 794 li
cp
1 .666667 .298039 rgb
f
654.5 769.5 mo
553.5 769.5 li
553.5 784.5 li
554.5 784.5 li
554.5 804 li
554.5 831.338 576.662 853.5 604 853.5 cv
631.338 853.5 653.5 831.338 653.5 804 cv
653.5 784.5 li
654.5 784.5 li
654.5 769.5 li
cp
.145098 .176471 .196078 rgb
@
2 lw
572 784 mo
636 784 li
@
3 lw
650.947 815.348 mo
647.356 813.53 643.3 812.5 639 812.5 cv
624.365 812.5 612.5 824.365 612.5 839 cv
612.5 843.3 613.53 847.356 615.348 850.947 cv
@
557.053 815.348 mo
560.644 813.53 564.7 812.5 569 812.5 cv
583.635 812.5 595.5 824.365 595.5 839 cv
595.5 843.3 594.47 847.356 592.652 850.947 cv
@
2 lw
653 795 mo
636.5 795 li
633.462 795 631 792.538 631 789.5 cv
631 786.462 633.462 784 636.5 784 cv
653 784 li
@
555 795 mo
571.5 795 li
574.538 795 577 792.538 577 789.5 cv
577 786.462 574.538 784 571.5 784 cv
555 784 li
@
622.879 380 mo
585.121 380 li
580.084 380 576 375.916 576 370.879 cv
576 317.121 li
576 312.084 580.084 308 585.121 308 cv
622.879 308 li
627.916 308 632 312.084 632 317.121 cv
632 370.879 li
632 375.916 627.916 380 622.879 380 cv
cp
.835294 .882353 .937255 rgb
f
618.879 380 mo
585.121 380 li
580.084 380 576 375.916 576 370.879 cv
576 317.121 li
576 312.084 580.084 308 585.121 308 cv
618.879 308 li
623.916 308 628 312.084 628 317.121 cv
628 370.879 li
628 375.916 623.916 380 618.879 380 cv
cp
.929412 .94902 .972549 rgb
f
622.521 380 mo
585.479 380 li
580.244 380 576 375.756 576 370.521 cv
576 323 li
632 323 li
632 370.521 li
632 375.756 627.756 380 622.521 380 cv
cp
1 .666667 .298039 rgb
f
618.521 380 mo
585.479 380 li
580.244 380 576 375.756 576 370.521 cv
576 323 li
628 323 li
628 370.521 li
628 375.756 623.756 380 618.521 380 cv
cp
1 .788235 .376471 rgb
f
615.721 296 mo
592.279 296 li
587.707 296 584 299.707 584 304.279 cv
584 308 li
624 308 li
624 304.279 li
624 299.707 620.293 296 615.721 296 cv
cp
.309804 .533333 1 rgb
f
611.721 296 mo
592.279 296 li
587.707 296 584 299.707 584 304.279 cv
584 305 li
620 305 li
620 304.279 li
620 299.707 616.293 296 611.721 296 cv
cp
.454902 .666667 1 rgb
f
593 339 mo
596 339 li
1 .666667 .298039 rgb
@
606 345 mo
609 345 li
@
610 363 mo
613 363 li
@
587 348 mo
590 348 li
@
601 354 mo
604 354 li
@
591 361 mo
594 361 li
@
610 279.464 mo
610 275 li
610 271.686 607.314 269 604 269 cv
600.686 269 598 271.686 598 275 cv
598 279.464 li
598 281.728 597.101 283.899 595.5 285.5 cv
593.899 287.101 593 289.272 593 291.535 cv
593 296 li
615 296 li
615 291.535 li
615 289.272 614.101 287.101 612.5 285.5 cv
610.899 283.899 610 281.728 610 279.464 cv
cp
.886275 .231373 .231373 rgb
f
611 292.536 mo
611 290.272 610.101 288.101 608.5 286.5 cv
606.899 284.899 606 282.728 606 280.464 cv
606 276 li
606 272.9 603.649 270.35 600.633 270.034 cv
599.044 271.113 598 272.935 598 275 cv
598 279.464 li
598 281.728 597.101 283.899 595.5 285.5 cv
593.899 287.101 593 289.272 593 291.536 cv
593 293 li
611 293 li
611 292.536 li
cp
1 .372549 .372549 rgb
f
3 lw
560.5 380.5 mo
647.5 380.5 li
.145098 .176471 .196078 rgb
@
624.5 307.663 mo
624.5 304.632 li
624.5 299.588 620.412 295.5 615.368 295.5 cv
615.5 295.5 li
615.5 292.036 li
615.5 289.772 614.601 287.601 613 286 cv
611.399 284.399 610.5 282.228 610.5 279.964 cv
610.5 275 li
610.5 271.41 607.59 268.5 604 268.5 cv
600.41 268.5 597.5 271.41 597.5 275 cv
597.5 279.964 li
597.5 282.228 596.601 284.399 595 286 cv
593.399 287.601 592.5 289.772 592.5 292.036 cv
592.5 295.5 li
592.632 295.5 li
587.588 295.5 583.5 299.588 583.5 304.632 cv
583.5 307.663 li
578.953 308.481 575.5 312.449 575.5 317.231 cv
575.5 370.769 li
575.5 376.143 579.857 380.5 585.231 380.5 cv
622.769 380.5 li
628.143 380.5 632.5 376.143 632.5 370.769 cv
632.5 317.231 li
632.5 312.449 629.047 308.481 624.5 307.663 cv
cp
@
2 lw
584 308 mo
624 308 li
@
593 296 mo
615 296 li
@
577 323 mo
631 323 li
@
3 lw
625.5 366.5 mo
631.5 366.5 li
@
625.5 344.5 mo
631.5 344.5 li
@
621.5 355.5 mo
631.5 355.5 li
@
621.5 333.5 mo
631.5 333.5 li
@
832 782 mo
832 770.586 822.438 761.405 810.888 762.03 cv
800.528 762.591 792.182 771.274 792.003 781.648 cv
791.936 785.516 792.973 789.132 794.815 792.212 cv
798.052 797.622 800 803.703 800 810.008 cv
800 818 li
824 818 li
824 810.196 li
824 803.85 825.887 797.694 829.159 792.256 cv
830.961 789.26 832 785.754 832 782 cv
cp
1 .666667 .298039 rgb
f
823.158 792.256 mo
824.961 789.26 826 785.753 826 782 cv
826 771.974 818.622 763.673 808.999 762.226 cv
799.531 763.668 792.171 771.913 792.003 781.648 cv
791.936 785.516 792.973 789.132 794.815 792.212 cv
798.052 797.622 800 803.703 800 810.008 cv
800 814 li
818 814 li
818 810.196 li
818 803.85 819.887 797.694 823.158 792.256 cv
cp
1 .788235 .376471 rgb
f
2 lw
800 782.5 mo
800 778.649 801.612 775.174 804.199 772.715 cv
1 .666667 .298039 rgb
@
839 828 mo
785 828 li
782.239 828 780 825.761 780 823 cv
780 820.239 782.239 818 785 818 cv
839 818 li
841.761 818 844 820.239 844 823 cv
844 825.761 841.761 828 839 828 cv
cp
.309804 .533333 1 rgb
f
837 824 mo
783 824 li
781.343 824 780 822.657 780 821 cv
780 819.343 781.343 818 783 818 cv
837 818 li
838.657 818 840 819.343 840 821 cv
840 822.657 838.657 824 837 824 cv
cp
.454902 .666667 1 rgb
f
818.921 840 mo
805.079 840 li
802.274 840 800 837.726 800 834.921 cv
800 828 li
824 828 li
824 834.921 li
824 837.726 821.726 840 818.921 840 cv
cp
.309804 .533333 1 rgb
f
817.805 837 mo
802.195 837 li
800.983 837 800 836.017 800 834.805 cv
800 828 li
820 828 li
820 834.805 li
820 836.017 819.017 837 817.805 837 cv
cp
.454902 .666667 1 rgb
f
3 lw
839 817.5 mo
824.5 817.5 li
824.5 809.658 li
824.5 803.841 825.977 798.05 829.166 793.185 cv
831.273 789.971 832.5 786.132 832.5 782 cv
832.5 770.298 822.695 760.886 810.852 761.531 cv
800.277 762.108 791.744 770.94 791.505 781.528 cv
791.409 785.777 792.612 789.733 794.74 793.041 cv
797.919 797.981 799.5 803.779 799.5 809.654 cv
799.5 817.5 li
785 817.5 li
781.962 817.5 779.5 819.962 779.5 823 cv
779.5 826.038 781.962 828.5 785 828.5 cv
799.5 828.5 li
799.5 834.953 li
799.5 838.016 801.984 840.5 805.047 840.5 cv
818.953 840.5 li
822.016 840.5 824.5 838.016 824.5 834.953 cv
824.5 828.5 li
839 828.5 li
842.038 828.5 844.5 826.038 844.5 823 cv
844.5 819.962 842.038 817.5 839 817.5 cv
cp
.145098 .176471 .196078 rgb
@
825.046 835.669 mo
830.957 836.653 835.5 841.821 835.5 848 cv
835.5 854.875 829.875 860.5 823 860.5 cv
801 860.5 li
794.125 860.5 788.5 854.875 788.5 848 cv
788.5 841.735 793.17 836.509 799.201 835.63 cv
@
2 lw
800 818 mo
824 818 li
@
800 828 mo
824 828 li
@
862 552 mo
862 570.778 846.778 586 828 586 cv
809.222 586 794 570.778 794 552 cv
794 533.222 809.222 518 828 518 cv
846.778 518 862 533.222 862 552 cv
cp
.886275 .231373 .231373 rgb
f
857 549 mo
857 537.644 851.427 527.596 842.874 521.421 cv
838.381 519.231 833.335 518 828 518 cv
809.222 518 794 533.222 794 552 cv
794 563.356 799.573 573.404 808.126 579.579 cv
812.619 581.769 817.666 583 823 583 cv
841.778 583 857 567.778 857 549 cv
cp
1 .372549 .372549 rgb
f
801.929 531.402 mo
805.816 535.289 801.573 539.532 805.46 543.419 cv
809.349 547.307 813.591 543.064 817.479 546.952 cv
821.369 550.842 817.126 555.084 821.016 558.974 cv
824.904 562.862 829.146 558.619 833.034 562.508 cv
836.925 566.398 832.683 570.641 836.574 574.532 cv
840.464 578.423 844.707 574.18 848.598 578.071 cv
850 579 855 574 854.255 572.414 cv
850.368 568.527 854.61 564.284 850.723 560.397 cv
846.835 556.509 842.593 560.752 838.705 556.864 cv
834.815 552.974 839.058 548.732 835.168 544.842 cv
831.28 540.954 827.037 545.197 823.149 541.309 cv
819.258 537.418 823.501 533.175 819.61 529.284 cv
815.719 525.393 811.477 529.636 807.586 525.745 cv
805 525 801 530 801.929 531.402 cv
cp
1 .788235 .376471 rgb
f
791.322 575.243 mo
766.866 594.904 li
760.836 599.751 759.938 608.606 765.257 614.224 cv
770.702 619.975 779.924 619.567 784.851 613.439 cv
804.757 588.678 li
791.322 575.243 li
cp
.309804 .533333 1 rgb
f
852.509 565.88 mo
850.179 569.945 847.041 573.487 843.302 576.274 cv
845.096 576.221 846.881 576.354 848.598 578.071 cv
850 579 855 574 854.255 572.414 cv
852.144 570.303 852.429 568.087 852.509 565.88 cv
cp
1 .666667 .298039 rgb
f
847 567.5 mo
847 569.433 845.433 571 843.5 571 cv
841.567 571 840 569.433 840 567.5 cv
840 565.567 841.567 564 843.5 564 cv
845.433 564 847 565.567 847 567.5 cv
cp
.454902 .666667 1 rgb
f
816 536.5 mo
816 538.433 814.433 540 812.5 540 cv
810.567 540 809 538.433 809 536.5 cv
809 534.567 810.567 533 812.5 533 cv
814.433 533 816 534.567 816 536.5 cv
cp
f
832 552 mo
832 554.209 830.209 556 828 556 cv
825.791 556 824 554.209 824 552 cv
824 549.791 825.791 548 828 548 cv
830.209 548 832 549.791 832 552 cv
cp
f
763.742 612.261 mo
769.199 615.737 776.612 614.712 780.851 609.439 cv
800.757 584.678 li
791.322 575.243 li
766.866 594.904 li
761.498 599.219 760.21 606.705 763.742 612.261 cv
cp
f
810.866 588.134 mo
809.411 589.589 807.053 589.589 805.598 588.134 cv
791.866 574.402 li
790.411 572.947 790.411 570.589 791.866 569.134 cv
793.321 567.679 795.679 567.679 797.134 569.134 cv
810.866 582.866 li
812.321 584.321 812.321 586.679 810.866 588.134 cv
cp
.835294 .882353 .937255 rgb
f
807.866 585.134 mo
806.411 586.589 804.053 586.589 802.598 585.134 cv
791.866 574.402 li
790.411 572.947 790.411 570.589 791.866 569.134 cv
793.321 567.679 795.679 567.679 797.134 569.134 cv
807.866 579.866 li
809.321 581.321 809.321 583.679 807.866 585.134 cv
cp
.929412 .94902 .972549 rgb
f
3 lw
852.487 576.303 mo
866.534 562.257 865.936 539.111 850.693 525.839 cv
837.992 514.78 818.783 514.616 805.912 525.478 cv
792.48 536.813 790.038 555.68 798.571 569.763 cv
797.333 568.525 li
795.575 566.768 792.726 566.768 790.969 568.525 cv
789.211 570.282 789.211 573.132 790.969 574.889 cv
791.322 575.243 li
766.866 594.904 li
760.836 599.751 759.938 608.606 765.257 614.224 cv
770.702 619.975 779.924 619.567 784.851 613.439 cv
804.757 588.678 li
805.111 589.031 li
806.868 590.789 809.718 590.789 811.475 589.031 cv
813.232 587.274 813.232 584.425 811.475 582.667 cv
810.237 581.429 li
823.507 589.469 841.025 587.765 852.487 576.303 cv
cp
.145098 .176471 .196078 rgb
@
2 lw
798.393 570.293 mo
809.707 581.607 li
@
792.029 575.243 mo
804.757 587.971 li
@
801.929 531.402 mo
805.816 535.289 801.573 539.532 805.46 543.419 cv
809.349 547.307 813.591 543.064 817.479 546.952 cv
821.369 550.842 817.126 555.084 821.016 558.974 cv
824.904 562.862 829.146 558.619 833.034 562.508 cv
836.925 566.398 832.683 570.641 836.574 574.532 cv
840.464 578.423 844.707 574.18 848.598 578.071 cv
@
854.255 572.414 mo
850.368 568.527 854.61 564.284 850.723 560.397 cv
846.835 556.509 842.593 560.752 838.705 556.864 cv
834.815 552.974 839.058 548.732 835.168 544.842 cv
831.28 540.954 827.037 545.197 823.149 541.309 cv
819.258 537.418 823.501 533.175 819.61 529.284 cv
815.719 525.393 811.477 529.636 807.586 525.745 cv
@
830.92 554.737 mo
829.358 556.299 826.826 556.299 825.263 554.737 cv
823.701 553.174 823.701 550.642 825.263 549.08 cv
826.826 547.518 829.358 547.518 830.92 549.08 cv
832.482 550.642 832.482 553.174 830.92 554.737 cv
cp
@
846.477 570.293 mo
844.915 571.855 842.382 571.855 840.82 570.293 cv
839.258 568.731 839.258 566.198 840.82 564.636 cv
842.382 563.074 844.915 563.074 846.477 564.636 cv
848.039 566.198 848.039 568.731 846.477 570.293 cv
cp
@
815.364 539.18 mo
813.802 540.742 811.269 540.742 809.707 539.18 cv
808.145 537.618 808.145 535.085 809.707 533.523 cv
811.269 531.961 813.802 531.961 815.364 533.523 cv
816.926 535.085 816.926 537.618 815.364 539.18 cv
cp
@
642.646 568.82 mo
640.852 568.487 639.125 567.855 637.529 566.97 cv
629.266 562.393 li
621.451 558.065 616.358 550.174 615.568 541.399 cv
615.446 540.051 614.354 539 613 539 cv
613 536.418 li
613 533.978 611.022 532 608.582 532 cv
600.418 532 li
597.978 532 596 533.978 596 536.418 cv
596 539 li
595.498 539 li
594.145 539 593.052 540.051 592.931 541.399 cv
592.14 550.174 587.047 558.065 579.233 562.393 cv
570.97 566.97 li
569.373 567.855 567.647 568.487 565.852 568.82 cv
557.983 570.282 552.1 577.369 552.597 585.748 cv
553.111 594.406 560.648 601 569.347 601 cv
574.756 601 li
573.237 602.064 572.278 603.869 572.419 605.891 cv
572.622 608.818 575.235 611 578.17 611 cv
629.83 611 li
632.765 611 635.378 608.818 635.581 605.891 cv
635.722 603.869 634.763 602.064 633.244 601 cv
639.151 601 li
647.851 601 655.388 594.406 655.901 585.748 cv
656.398 577.369 650.515 570.282 642.646 568.82 cv
cp
.835294 .882353 .937255 rgb
f
650.901 586.748 mo
651.398 578.369 645.515 571.282 637.646 569.82 cv
635.852 569.487 612.579 563.537 610.568 542.399 cv
610.439 541.052 609.354 540 608 540 cv
608 537.418 li
608 534.978 606.022 533 603.582 533 cv
597.65 533 li
596.651 533.81 596 535.032 596 536.418 cv
596 539 li
595.498 539 li
594.144 539 593.052 540.051 592.931 541.399 cv
592.14 550.174 587.047 558.065 579.233 562.393 cv
570.969 566.97 li
569.373 567.855 567.647 568.487 565.852 568.82 cv
557.983 570.282 552.1 577.369 552.597 585.748 cv
553.111 594.406 560.648 601 569.347 601 cv
574.756 601 li
573.237 602.064 572.278 603.869 572.419 605.891 cv
572.622 608.818 575.235 611 578.17 611 cv
628.1 611 li
629.481 610.088 630.46 608.628 630.581 606.891 cv
630.722 604.869 629.763 603.064 628.244 602 cv
634.151 602 li
634.207 602 634.262 601.993 634.318 601.992 cv
634.004 601.617 639.712 600.974 639.993 600.96 cv
645.991 598.785 650.508 593.378 650.901 586.748 cv
cp
.929412 .94902 .972549 rgb
f
608 514.5 mo
608 516.433 606.433 518 604.5 518 cv
602.567 518 601 516.433 601 514.5 cv
601 512.567 602.567 511 604.5 511 cv
606.433 511 608 512.567 608 514.5 cv
cp
.772549 .835294 .941176 rgb
f
604 624 mo
602.269 624 600.791 622.748 600.507 621.041 cv
599 612 li
609 612 li
607.493 621.041 li
607.209 622.748 605.731 624 604 624 cv
cp
f
602.5 623.652 mo
603.525 623.17 604.297 622.22 604.493 621.041 cv
606 612 li
599 612 li
600.507 621.041 li
600.703 622.22 601.475 623.17 602.5 623.652 cv
cp
.862745 .901961 .964706 rgb
f
553.016 581 mo
655.482 581 li
654.617 577.372 652.526 574.226 649.672 572 cv
558.826 572 li
555.972 574.226 553.882 577.372 553.016 581 cv
cp
.886275 .231373 .231373 rgb
f
643.251 572 mo
558.826 572 li
555.974 574.224 553.885 577.367 553.019 580.992 cv
553.016 581 650.208 581 650.208 581 cv
649.046 577.227 646.544 574.045 643.251 572 cv
cp
1 .372549 .372549 rgb
f
552.597 585.748 mo
552.685 587.236 552.995 588.657 553.468 590 cv
655.03 590 li
655.504 588.657 655.813 587.236 655.901 585.748 cv
655.998 584.103 655.843 582.512 655.482 581 cv
553.016 581 li
552.655 582.512 552.5 584.103 552.597 585.748 cv
cp
.309804 .533333 1 rgb
f
552.843 587.665 mo
552.886 587.894 552.938 588.12 552.99 588.346 cv
553.123 588.908 553.278 589.462 553.468 590 cv
650.35 590 li
650.641 588.956 650.834 587.872 650.901 586.748 cv
651.021 584.736 650.764 582.803 650.208 581 cv
553.016 581 li
552.955 581.256 552.909 581.517 552.86 581.776 cv
552.825 581.963 552.789 582.149 552.761 582.339 cv
552.726 582.568 552.698 582.799 552.672 583.031 cv
552.645 583.288 552.624 583.547 552.609 583.807 cv
552.598 583.99 552.585 584.172 552.58 584.357 cv
552.568 584.817 552.569 585.279 552.597 585.748 cv
552.625 586.208 552.682 586.66 552.748 587.109 cv
552.776 587.295 552.808 587.48 552.843 587.665 cv
cp
.454902 .666667 1 rgb
f
655.03 590 mo
553.468 590 li
555.749 596.472 562.143 601 569.347 601 cv
574.756 601 li
633.244 601 li
639.151 601 li
646.356 601 652.749 596.472 655.03 590 cv
cp
1 .666667 .298039 rgb
f
650.35 590 mo
553.468 590 li
553.597 590.366 553.744 590.725 553.898 591.078 cv
553.926 591.141 553.952 591.203 553.98 591.265 cv
554.134 591.603 554.299 591.936 554.475 592.261 cv
554.508 592.321 554.542 592.38 554.575 592.44 cv
555.339 593.808 556.302 595.052 557.419 596.144 cv
557.499 596.222 557.576 596.303 557.658 596.38 cv
557.879 596.587 558.109 596.786 558.342 596.981 cv
558.47 597.089 558.599 597.196 558.73 597.3 cv
558.95 597.474 559.173 597.643 559.402 597.806 cv
559.563 597.921 559.729 598.031 559.894 598.141 cv
560.111 598.284 560.327 598.429 560.55 598.563 cv
560.768 598.693 560.993 598.812 561.217 598.933 cv
561.467 599.067 561.717 599.2 561.974 599.323 cv
562.315 599.485 562.66 599.641 563.013 599.781 cv
563.185 599.85 563.362 599.908 563.538 599.971 cv
563.82 600.073 564.103 600.172 564.391 600.259 cv
564.577 600.315 564.765 600.365 564.952 600.415 cv
565.244 600.492 565.538 600.562 565.834 600.625 cv
566.018 600.663 566.202 600.701 566.388 600.733 cv
566.714 600.79 567.043 600.835 567.374 600.873 cv
567.534 600.892 567.693 600.915 567.854 600.93 cv
568.347 600.973 568.845 601 569.347 601 cv
574.756 601 li
633.244 601 li
639.151 601 li
639.434 601 639.712 600.974 639.993 600.96 cv
644.974 599.154 648.925 595.114 650.35 590 cv
cp
1 .788235 .376471 rgb
f
592.931 541.399 mo
592.79 542.967 592.505 544.504 592.099 546 cv
616.4 546 li
615.993 544.504 615.709 542.967 615.568 541.399 cv
615.446 540.051 614.354 539 613 539 cv
596 539 li
595.498 539 li
594.144 539 593.052 540.051 592.931 541.399 cv
cp
1 .666667 .298039 rgb
f
592.563 543.95 mo
592.433 544.64 592.282 545.323 592.099 545.997 cv
592.099 546 611.151 546 611.151 546 cv
610.879 544.821 610.678 543.62 610.568 542.399 cv
610.446 541.051 609.354 540 608 540 cv
608 539 li
596 539 li
595.498 539 li
594.144 539 593.052 540.051 592.931 541.399 cv
592.866 542.117 592.762 542.826 592.641 543.53 cv
592.616 543.671 592.59 543.81 592.563 543.95 cv
cp
1 .788235 .376471 rgb
f
3 lw
561.5 624.5 mo
646.5 624.5 li
.145098 .176471 .196078 rgb
@
600.568 621.497 mo
598.5 611.5 li
609.5 611.5 li
607.797 621.377 li
607.107 625.381 601.392 625.476 600.568 621.497 cv
cp
@
645.267 569.379 mo
640.241 567.69 635.38 565.545 630.745 562.97 cv
629.487 562.27 li
621.682 557.934 616.557 550.081 615.646 541.317 cv
615.479 539.712 614.114 538.5 612.5 538.5 cv
612.5 535.974 li
612.5 533.503 610.497 531.5 608.026 531.5 cv
599.974 531.5 li
597.503 531.5 595.5 533.503 595.5 535.974 cv
595.5 538.5 li
593.886 538.5 592.521 539.712 592.354 541.317 cv
591.443 550.081 586.318 557.934 578.513 562.27 cv
577.255 562.97 li
572.62 565.545 567.759 567.69 562.733 569.379 cv
555.89 571.68 551.051 578.333 551.533 586.058 cv
552.08 594.822 559.661 601.5 568.442 601.5 cv
574.844 601.5 li
573.321 602.57 572.362 604.391 572.516 606.426 cv
572.736 609.332 575.313 611.5 578.226 611.5 cv
629.774 611.5 li
632.687 611.5 635.264 609.332 635.484 606.426 cv
635.638 604.391 634.679 602.57 633.156 601.5 cv
639.558 601.5 li
648.339 601.5 655.92 594.822 656.467 586.058 cv
656.949 578.333 652.11 571.68 645.267 569.379 cv
cp
@
604.5 530.5 mo
604.5 519.5 li
@
608.5 514.5 mo
608.5 516.709 606.709 518.5 604.5 518.5 cv
602.291 518.5 600.5 516.709 600.5 514.5 cv
600.5 512.291 602.291 510.5 604.5 510.5 cv
606.709 510.5 608.5 512.291 608.5 514.5 cv
cp
@
2 lw
575 601 mo
633 601 li
@
553 590 mo
655 590 li
@
553 581 mo
655 581 li
@
559 572 mo
649 572 li
@
596 539 mo
612 539 li
@
592 546 mo
615 546 li
@
397 625 mo
374.356 625 356 606.644 356 584 cv
356 550 li
356 527.356 374.356 509 397 509 cv
419.644 509 438 527.356 438 550 cv
438 584 li
438 606.644 419.644 625 397 625 cv
cp
.309804 .533333 1 rgb
f
394 509.121 mo
372.759 510.659 356 528.366 356 550 cv
356 584 li
356 605.633 372.759 623.341 394 624.879 cv
415.241 623.341 432 605.633 432 584 cv
432 550 li
432 528.366 415.241 510.659 394 509.121 cv
cp
.454902 .666667 1 rgb
f
438 556 mo
397 579 li
356 556 li
356 550 li
356 527.356 374.356 509 397 509 cv
419.644 509 438 527.356 438 550 cv
438 556 li
cp
1 .666667 .298039 rgb
f
432 559 mo
396 578 li
356 556 li
356 556 351 518 391 509 cv
413.644 509 432 527.881 432 551.171 cv
432 559 li
cp
1 .788235 .376471 rgb
f
420 543 mo
420 555.703 409.703 566 397 566 cv
384.297 566 374 555.703 374 543 cv
374 530.297 384.297 520 397 520 cv
409.703 520 420 530.297 420 543 cv
cp
1 .623529 .568627 rgb
f
417 541 mo
417 553.15 407.15 563 395 563 cv
382.85 563 373 553.15 373 541 cv
373 528.85 382.85 519 395 519 cv
407.15 519 417 528.85 417 541 cv
cp
1 .74902 .705882 rgb
f
371 545 mo
374 545 li
374 537 li
371 537 li
368.791 537 367 538.791 367 541 cv
367 543.209 368.791 545 371 545 cv
cp
f
423 545 mo
420 545 li
420 537 li
423 537 li
425.209 537 427 538.791 427 541 cv
427 543.209 425.209 545 423 545 cv
cp
f
3 lw
400.5 578.5 mo
435.5 597.5 li
.309804 .533333 1 rgb
@
397 625.5 mo
374.08 625.5 355.5 606.92 355.5 584 cv
355.5 550 li
355.5 527.08 374.08 508.5 397 508.5 cv
419.92 508.5 438.5 527.08 438.5 550 cv
438.5 584 li
438.5 606.92 419.92 625.5 397 625.5 cv
cp
.145098 .176471 .196078 rgb
@
420.5 543 mo
420.5 555.979 409.979 566.5 397 566.5 cv
384.021 566.5 373.5 555.979 373.5 543 cv
373.5 530.021 384.021 519.5 397 519.5 cv
409.979 519.5 420.5 530.021 420.5 543 cv
cp
@
420.5 536.5 mo
423 536.5 li
425.485 536.5 427.5 538.515 427.5 541 cv
427.5 543.485 425.485 545.5 423 545.5 cv
420.5 545.5 li
@
373.5 536.5 mo
371 536.5 li
368.515 536.5 366.5 538.515 366.5 541 cv
366.5 543.485 368.515 545.5 371 545.5 cv
373.5 545.5 li
@
389 542.5 mo
389 543.328 388.328 544 387.5 544 cv
386.672 544 386 543.328 386 542.5 cv
386 541.672 386.672 541 387.5 541 cv
388.328 541 389 541.672 389 542.5 cv
cp
f
405 542.5 mo
405 543.328 405.672 544 406.5 544 cv
407.328 544 408 543.328 408 542.5 cv
408 541.672 407.328 541 406.5 541 cv
405.672 541 405 541.672 405 542.5 cv
cp
f
2 lw
392.06 552 mo
392.99 553.782 394.851 555 397 555 cv
399.149 555 401.01 553.782 401.94 552 cv
@
399.046 520 mo
394.25 520 390.362 523.888 390.362 528.685 cv
390.362 532.522 393.472 535.633 397.309 535.633 cv
400.379 535.633 402.867 533.144 402.867 530.074 cv
402.867 527.618 400.877 525.628 398.421 525.628 cv
396.456 525.628 394.864 527.22 394.864 529.185 cv
@
3 lw
355.5 556.5 mo
434.5 600.5 li
@
437.5 556.5 mo
396.88 579.124 li
@
215.571 832.252 mo
207.707 835.375 li
206.93 825.1 198.367 817 187.893 817 cv
151.716 817 li
143.275 817 136.432 823.843 136.432 832.284 cv
140 839.595 li
140 866 li
209.054 866 li
201.536 863.984 195.76 861.445 193 858 cv
220.861 845.573 li
215.571 832.252 li
cp
1 .372549 .372549 rgb
f
198 818 mo
145 818 li
145 781.441 li
145 767.962 154.888 756.242 168.274 754.663 cv
184.351 752.767 198 765.263 198 780.942 cv
198 818 li
cp
1 .666667 .298039 rgb
f
167.5 754.639 mo
154.282 756.103 144 767.318 144 780.942 cv
144 818 li
191 818 li
191 780.942 li
191 767.318 180.718 756.103 167.5 754.639 cv
cp
1 .788235 .376471 rgb
f
163 815.543 mo
163 807 li
181 807 li
181 815.823 li
181 821.382 175.756 825.74 169.854 824.403 cv
165.788 823.482 163 819.712 163 815.543 cv
cp
1 .623529 .568627 rgb
f
169.5 824.32 mo
173.246 823.289 176 819.88 176 815.823 cv
176 807 li
163 807 li
163 815.823 li
163 819.88 165.754 823.289 169.5 824.32 cv
cp
1 .74902 .705882 rgb
f
155 792.023 mo
155 779 li
169.899 779 li
173.092 779 176.125 777.602 178.199 775.174 cv
181.965 770.765 li
181.965 770.765 183.138 780.176 189 779 cv
189 792.529 li
189 801.463 182.155 808.794 173.44 809.527 cv
163.437 810.369 155 802.062 155 792.023 cv
cp
1 .623529 .568627 rgb
f
169.5 809.406 mo
177.688 808.258 184 801.149 184 792.529 cv
184 777.282 li
181.68 771.941 li
176.662 777.031 li
175.419 778.291 173.724 779 171.954 779 cv
155 779 li
155 792.529 li
155 801.149 161.311 808.258 169.5 809.406 cv
cp
1 .74902 .705882 rgb
f
140 839.824 mo
140 844.883 li
170.512 860.991 li
176.547 864.177 183.656 864.629 190.046 862.233 cv
196 860 li
192 858 li
186.292 859.141 li
183.507 859.699 180.615 859.335 178.054 858.104 cv
140 839.824 li
cp
.886275 .231373 .231373 rgb
f
210.5 864 mo
194.76 864 182 851.24 182 835.5 cv
182 813.5 li
182 797.76 194.76 785 210.5 785 cv
226.24 785 239 797.76 239 813.5 cv
239 835.5 li
239 851.24 226.24 864 210.5 864 cv
cp
.309804 .533333 1 rgb
f
208.5 785.078 mo
193.694 786.105 182 798.433 182 813.5 cv
182 835.5 li
182 850.567 193.694 862.895 208.5 863.922 cv
223.306 862.895 235 850.567 235 835.5 cv
235 813.5 li
235 798.433 223.306 786.105 208.5 785.078 cv
cp
.454902 .666667 1 rgb
f
231.935 837.044 mo
230.376 833.206 226.001 831.359 222.164 832.917 cv
185.138 847.953 li
185.978 850.021 li
188.363 854.04 191.705 857.426 195.694 859.856 cv
227.808 846.815 li
231.645 845.257 233.493 840.882 231.935 837.044 cv
cp
.309804 .533333 1 rgb
f
215.571 832.252 mo
182 845 li
184 860 li
220.861 845.573 li
215.571 832.252 li
cp
1 .372549 .372549 rgb
f
226.278 842.295 mo
220.873 844.502 li
215.981 832.521 li
221.386 830.314 li
224.694 828.963 228.471 830.55 229.822 833.858 cv
231.173 837.167 229.586 840.944 226.278 842.295 cv
cp
1 .74902 .705882 rgb
f
214 832 mo
212 833 li
182 813.5 li
182 797.76 194.76 785 210.5 785 cv
225.397 785 237.624 796.429 238.892 810.997 cv
214 832 li
cp
.929412 .94902 .972549 rgb
f
235 813.5 mo
235 814.281 li
238.892 810.997 li
237.624 796.429 225.397 785 210.5 785 cv
209.827 785 209.162 785.032 208.5 785.078 cv
223.306 786.105 235 798.433 235 813.5 cv
cp
.835294 .882353 .937255 rgb
f
225 806.5 mo
225 814.508 218.508 821 210.5 821 cv
202.492 821 196 814.508 196 806.5 cv
196 798.492 202.492 792 210.5 792 cv
218.508 792 225 798.492 225 806.5 cv
cp
1 .623529 .568627 rgb
f
222 805.5 mo
222 798.382 216.487 792.564 209.5 792.05 cv
201.96 792.566 196 798.829 196 806.5 cv
196 809.394 196.857 812.083 198.317 814.346 cv
200.792 817.192 204.432 819 208.5 819 cv
215.956 819 222 812.956 222 805.5 cv
cp
1 .74902 .705882 rgb
f
196 809 mo
194.5 809 li
192.567 809 191 807.433 191 805.5 cv
191 803.567 192.567 802 194.5 802 cv
196 802 li
196 809 li
cp
f
225 802 mo
226.5 802 li
228.433 802 230 803.567 230 805.5 cv
230 807.433 228.433 809 226.5 809 cv
225 809 li
225 802 li
cp
f
183 844 mo
181 836 181 829 182 821 cv
177 823 li
177 836.5 li
177 838.782 177.268 841.002 177.775 843.129 cv
183 844 li
cp
.886275 .231373 .231373 rgb
f
187.128 859.343 mo
189.547 862.081 192.485 864.351 195.788 866 cv
209.054 866 li
201.536 863.984 194.76 860.445 192 857 cv
187.128 859.343 li
cp
f
139.5 838.5 mo
139.5 864.5 li
.145098 .176471 .196078 rgb
@
166 786.5 mo
166 787.328 165.328 788 164.5 788 cv
163.672 788 163 787.328 163 786.5 cv
163 785.672 163.672 785 164.5 785 cv
165.328 785 166 785.672 166 786.5 cv
cp
f
181 786.5 mo
181 787.328 180.328 788 179.5 788 cv
178.672 788 178 787.328 178 786.5 cv
178 785.672 178.672 785 179.5 785 cv
180.328 785 181 785.672 181 786.5 cv
cp
f
2 lw
177 796.745 mo
176.409 798.612 174.389 799.996 171.963 799.996 cv
169.538 799.996 167.518 798.612 166.927 796.745 cv
@
3 lw
161.5 816.5 mo
153.858 816.5 li
149.48 816.5 145.432 817.941 142.15 820.37 cv
134.684 825.896 135.809 837.427 144.068 841.676 cv
176.792 858.512 li
180.266 860.517 183.307 860.589 187.027 859.093 cv
226.106 843.372 li
229.611 841.963 231.734 838.184 230.757 834.534 cv
229.586 830.161 224.92 827.92 220.851 829.557 cv
186.67 843.307 li
184.573 844.151 182.24 844.196 180.111 843.434 cv
177.5 842.5 li
@
189.5 792.27 mo
189.5 779.5 li
@
154.5 779.5 mo
154.5 791.681 li
154.5 802.139 163.067 810.585 173.488 809.708 cv
176.562 809.449 179.41 808.395 181.826 806.753 cv
@
181.5 815.575 mo
181.5 820.004 178.554 824.029 174.235 825.013 cv
168.017 826.431 162.5 821.744 162.5 815.768 cv
162.5 808.5 li
@
198.5 786.5 mo
198.5 781.105 li
198.5 766.367 186.946 753.886 172.213 753.507 cv
156.975 753.114 144.5 765.349 144.5 780.497 cv
144.5 818.5 li
@
2 lw
215.337 832.105 mo
220.679 845.067 li
@
155 779 mo
172.004 779 li
173.647 779 175.209 778.282 176.278 777.034 cv
181.652 770.765 li
183.326 776.623 li
183.727 778.03 185.013 779 186.477 779 cv
189 779 li
@
3 lw
182.539 843.221 mo
181.862 840.763 181.5 838.174 181.5 835.5 cv
181.5 813.5 li
181.5 797.484 194.484 784.5 210.5 784.5 cv
226.516 784.5 239.5 797.484 239.5 813.5 cv
239.5 835.5 li
239.5 851.516 226.516 864.5 210.5 864.5 cv
203.434 864.5 196.958 861.973 191.926 857.773 cv
@
2 lw
225 806.5 mo
225 814.508 218.508 821 210.5 821 cv
202.492 821 196 814.508 196 806.5 cv
196 798.492 202.492 792 210.5 792 cv
218.508 792 225 798.492 225 806.5 cv
cp
@
196 809 mo
194.5 809 li
192.567 809 191 807.433 191 805.5 cv
191 803.567 192.567 802 194.5 802 cv
196 802 li
@
225 809 mo
226.5 809 li
228.433 809 230 807.433 230 805.5 cv
230 803.567 228.433 802 226.5 802 cv
225 802 li
@
206 804.5 mo
206 805.328 205.328 806 204.5 806 cv
203.672 806 203 805.328 203 804.5 cv
203 803.672 203.672 803 204.5 803 cv
205.328 803 206 803.672 206 804.5 cv
cp
f
215 804.5 mo
215 805.328 215.672 806 216.5 806 cv
217.328 806 218 805.328 218 804.5 cv
218 803.672 217.328 803 216.5 803 cv
215.672 803 215 803.672 215 804.5 cv
cp
f
206.899 812 mo
207.65 813.2 208.98 814 210.5 814 cv
212.02 814 213.35 813.2 214.101 812 cv
@
210 792 mo
207.626 792.808 206.587 796.55 207.395 798.925 cv
208.042 800.824 210.106 801.84 212.006 801.193 cv
213.526 800.676 214.338 799.024 213.821 797.505 cv
213.407 796.289 211.421 795.947 211 797 cv
@
182 813 mo
213 833 li
@
214 832 mo
239 811 li
@
234.5 539 mo
232.567 539 231 540.567 231 542.5 cv
231 596 li
145 596 li
145 542.5 li
145 540.567 143.433 539 141.5 539 cv
139.567 539 138 540.567 138 542.5 cv
138 599.5 li
138 601.433 139.567 603 141.5 603 cv
141.671 603 141.835 602.973 142 602.95 cv
142 603 li
235 603 li
235 602.95 li
236.694 602.705 238 601.262 238 599.5 cv
238 542.5 li
238 540.567 236.433 539 234.5 539 cv
cp
.454902 .666667 1 rgb
f
156 614 mo
150 614 li
150 604 li
156 604 li
156 614 li
cp
f
226 614 mo
220 614 li
220 604 li
226 604 li
226 614 li
cp
f
220.921 582 mo
155.079 582 li
150.065 582 146 586.065 146 591.079 cv
146 595 li
230 595 li
230 591.079 li
230 586.065 225.935 582 220.921 582 cv
cp
1 .666667 .298039 rgb
f
216.395 582 mo
154.605 582 li
149.853 582 146 585.853 146 590.605 cv
146 591 li
225 591 li
225 590.605 li
225 585.853 221.147 582 216.395 582 cv
cp
1 .788235 .376471 rgb
f
175.811 542.504 mo
176.91 544.73 li
177.042 544.997 177.296 545.182 177.591 545.225 cv
180.048 545.582 li
180.79 545.69 181.086 546.602 180.549 547.126 cv
178.772 548.858 li
178.558 549.066 178.461 549.366 178.511 549.659 cv
178.931 552.106 li
179.058 552.845 178.282 553.408 177.618 553.06 cv
175.421 551.904 li
175.158 551.766 174.842 551.766 174.579 551.904 cv
172.382 553.06 li
171.718 553.408 170.942 552.845 171.069 552.106 cv
171.489 549.659 li
171.539 549.366 171.442 549.066 171.228 548.858 cv
169.451 547.126 li
168.914 546.602 169.21 545.69 169.952 545.582 cv
172.409 545.225 li
172.703 545.182 172.958 544.997 173.09 544.73 cv
174.189 542.504 li
174.52 541.832 175.479 541.832 175.811 542.504 cv
cp
1 .372549 .372549 rgb
f
166 543 mo
166 544.657 164.657 546 163 546 cv
161.343 546 160 544.657 160 543 cv
160 541.343 161.343 540 163 540 cv
164.657 540 166 541.343 166 543 cv
cp
f
190 543 mo
190 544.657 188.657 546 187 546 cv
185.343 546 184 544.657 184 543 cv
184 541.343 185.343 540 187 540 cv
188.657 540 190 541.343 190 543 cv
cp
f
3 lw
130.5 614.5 mo
245.5 614.5 li
.145098 .176471 .196078 rgb
@
230.5 542.5 mo
230.5 595.5 li
145.5 595.5 li
145.5 542.5 li
145.5 540.291 143.709 538.5 141.5 538.5 cv
139.291 538.5 137.5 540.291 137.5 542.5 cv
137.5 598.963 li
137.5 601.469 139.531 603.5 142.037 603.5 cv
233.963 603.5 li
236.469 603.5 238.5 601.469 238.5 598.963 cv
238.5 542.5 li
238.5 540.291 236.709 538.5 234.5 538.5 cv
232.291 538.5 230.5 540.291 230.5 542.5 cv
cp
@
145.5 590.874 mo
145.5 585.697 149.697 581.5 154.874 581.5 cv
221.126 581.5 li
226.303 581.5 230.5 585.697 230.5 590.874 cv
@
146.5 559.5 mo
229.5 559.5 li
@
149.5 613.5 mo
149.5 604.5 li
@
156.5 604.5 mo
156.5 613.5 li
@
226.5 613.5 mo
226.5 604.5 li
@
219.5 604.5 mo
219.5 613.5 li
@
2 lw
218 560 mo
218 595 li
@
158 560 mo
158 595 li
@
170 560 mo
170 595 li
@
182 560 mo
182 595 li
@
194 560 mo
194 595 li
@
206 560 mo
206 595 li
@
141 537 mo
141 535 li
141 527.268 147.268 521 155 521 cv
161 521 li
168.732 521 175 527.268 175 535 cv
175 542 li
@
163 540 mo
163 537.791 164.791 536 167 536 cv
183 536 li
185.209 536 187 537.791 187 540 cv
@
785 319 mo
766 319 li
762.134 319 759 322.134 759 326 cv
759 327 li
785 327 li
785 319 li
cp
1 .74902 .705882 rgb
f
797 304 mo
797 313.389 789.389 321 780 321 cv
770.611 321 763 313.389 763 304 cv
763 294.611 770.611 287 780 287 cv
789.389 287 797 294.611 797 304 cv
cp
1 .623529 .568627 rgb
f
793.167 302.75 mo
793.167 294.445 786.735 287.658 778.584 287.059 cv
769.787 287.66 762.833 294.968 762.833 303.917 cv
762.833 307.292 763.833 310.43 765.537 313.07 cv
768.425 316.391 772.67 318.5 777.417 318.5 cv
786.115 318.5 793.167 311.448 793.167 302.75 cv
cp
1 .74902 .705882 rgb
f
763 307 mo
760.5 307 li
758.567 307 757 305.433 757 303.5 cv
757 302.5 li
757 300.567 758.567 299 760.5 299 cv
763 299 li
763 307 li
cp
f
797 299 mo
799.5 299 li
801.433 299 803 300.567 803 302.5 cv
803 303.5 li
803 305.433 801.433 307 799.5 307 cv
797 307 li
797 299 li
cp
f
869.74 327 mo
754.26 327 li
752.46 327 751 328.432 751 330.198 cv
751 330.607 li
751 332.374 752.46 333.806 754.26 333.806 cv
754.965 333.806 li
759.307 348.159 li
762.64 357.638 771.736 364 781.959 364 cv
842.041 364 li
852.264 364 861.36 357.638 864.693 348.159 cv
869.035 333.806 li
869.74 333.806 li
871.54 333.806 873 332.374 873 330.607 cv
873 330.198 li
873 328.432 871.54 327 869.74 327 cv
cp
.309804 .533333 1 rgb
f
868.999 320.279 mo
869.062 316.694 866.248 313.545 862.681 313.187 cv
861.606 313.08 860.582 313.233 859.646 313.568 cv
859.651 313.429 859.667 313.293 859.667 313.153 cv
859.667 306.71 854.443 301.487 848 301.487 cv
845.518 301.487 843.221 302.268 841.33 303.589 cv
840.06 302.293 838.292 301.487 836.333 301.487 cv
833.035 301.487 830.277 303.771 829.536 306.841 cv
828.683 305.721 827.35 304.987 825.833 304.987 cv
823.256 304.987 821.167 307.076 821.167 309.653 cv
821.167 309.735 821.187 309.811 821.191 309.892 cv
820.429 309.736 819.641 309.653 818.833 309.653 cv
814.2 309.653 810.209 312.361 808.326 316.275 cv
807.071 314.394 804.931 313.153 802.5 313.153 cv
800.578 313.153 798.839 313.928 797.574 315.182 cv
796.955 313.33 795.227 311.987 793.167 311.987 cv
790.589 311.987 788.5 314.076 788.5 316.653 cv
784.634 316.653 781.5 319.787 781.5 323.653 cv
781.5 324.865 781.808 326.006 782.35 327 cv
862 327.153 li
865.824 327.153 868.932 324.087 868.999 320.279 cv
cp
.835294 .882353 .937255 rgb
f
794.556 327 mo
854.634 327 li
862.366 327 li
864.552 325.548 865.877 322.904 865.404 319.993 cv
864.963 317.278 862.878 315.027 860.205 314.374 cv
858.662 313.998 857.189 314.155 855.899 314.671 cv
856.316 312.883 856.303 310.932 855.447 308.848 cv
854.022 305.379 850.815 302.838 847.076 302.534 cv
843.937 302.278 841.08 303.493 839.1 305.556 cv
838.11 303.744 836.21 302.5 834 302.5 cv
831.663 302.5 829.662 303.883 828.731 305.868 cv
827.635 304.992 826.161 304.57 824.562 305.008 cv
823.159 305.391 822 306.461 821.483 307.822 cv
821.015 309.054 818.388 309.5 816.5 309.5 cv
812.446 309.5 809.092 312.457 808.452 316.329 cv
807.219 314.334 805.018 313 802.5 313 cv
800.578 313 798.839 313.775 797.574 315.029 cv
796.955 313.177 795.227 311.833 793.167 311.833 cv
790.589 311.833 788.5 313.923 788.5 316.5 cv
784.634 316.5 781.5 319.634 781.5 323.5 cv
781.5 324.777 781.847 325.969 782.444 327 cv
794.556 327 li
cp
.929412 .94902 .972549 rgb
f
788 373 mo
783 373 li
783 365 li
788 365 li
788 373 li
cp
.454902 .666667 1 rgb
f
841 373 mo
836 373 li
836 365 li
841 365 li
841 373 li
cp
f
751 330.198 mo
751 330.607 li
751 332.373 752.46 333.806 754.26 333.806 cv
754.965 333.806 li
759.307 348.159 li
761.815 355.294 767.591 360.66 774.653 362.879 cv
775.415 362.951 776.182 363 776.959 363 cv
837.041 363 li
847.264 363 856.36 356.638 859.693 347.159 cv
864.035 332.806 li
864.74 332.806 li
866.54 332.806 868 331.373 868 329.607 cv
868 329.198 li
868 328.344 867.654 327.573 867.098 327 cv
754.26 327 li
752.46 327 751 328.432 751 330.198 cv
cp
f
868 336 mo
755 336 li
755 333 li
868 333 li
868 336 li
cp
.309804 .533333 1 rgb
f
819 298 mo
819 300.209 817.209 302 815 302 cv
812.791 302 811 300.209 811 298 cv
811 295.791 812.791 294 815 294 cv
817.209 294 819 295.791 819 298 cv
cp
.772549 .835294 .941176 rgb
@
834 281.5 mo
834 285.09 831.09 288 827.5 288 cv
823.91 288 821 285.09 821 281.5 cv
821 277.91 823.91 275 827.5 275 cv
831.09 275 834 277.91 834 281.5 cv
cp
@
855 290 mo
855 292.761 852.761 295 850 295 cv
847.239 295 845 292.761 845 290 cv
845 287.239 847.239 285 850 285 cv
852.761 285 855 287.239 855 290 cv
cp
@
819 316.5 mo
819 317.328 818.328 318 817.5 318 cv
816.672 318 816 317.328 816 316.5 cv
816 315.672 816.672 315 817.5 315 cv
818.328 315 819 315.672 819 316.5 cv
cp
.835294 .882353 .937255 rgb
f
850 312 mo
850 313.657 848.657 315 847 315 cv
845.343 315 844 313.657 844 312 cv
844 310.343 845.343 309 847 309 cv
848.657 309 850 310.343 850 312 cv
cp
f
838 321 mo
838 322.105 837.105 323 836 323 cv
834.895 323 834 322.105 834 321 cv
834 319.895 834.895 319 836 319 cv
837.105 319 838 319.895 838 321 cv
cp
f
796 319.5 mo
796 320.881 794.881 322 793.5 322 cv
792.119 322 791 320.881 791 319.5 cv
791 318.119 792.119 317 793.5 317 cv
794.881 317 796 318.119 796 319.5 cv
cp
f
781.286 320.764 mo
780.78 320.81 780.268 320.833 779.75 320.833 cv
770.407 320.833 762.833 313.259 762.833 303.917 cv
762.833 294.574 770.407 287 779.75 287 cv
789.093 287 796.667 294.574 796.667 303.917 cv
796.667 306.565 796.058 309.072 794.973 311.304 cv
.145098 .176471 .196078 rgb
@
763 307 mo
761.06 307 li
758.85 307 757.06 305.209 757.06 303 cv
757.06 300.791 758.85 299 761.06 299 cv
763 299 li
@
797 307 mo
798.44 307 li
800.65 307 802.44 305.209 802.44 303 cv
802.44 300.791 800.65 299 798.44 299 cv
797 299 li
@
775 302.5 mo
775 303.328 774.328 304 773.5 304 cv
772.672 304 772 303.328 772 302.5 cv
772 301.672 772.672 301 773.5 301 cv
774.328 301 775 301.672 775 302.5 cv
cp
f
785 302.5 mo
785 303.328 785.672 304 786.5 304 cv
787.328 304 788 303.328 788 302.5 cv
788 301.672 787.328 301 786.5 301 cv
785.672 301 785 301.672 785 302.5 cv
cp
f
775.549 310.333 mo
776.425 311.733 777.977 312.667 779.75 312.667 cv
781.523 312.667 783.075 311.733 783.951 310.333 cv
@
779.167 287 mo
776.396 287.943 775.185 292.309 776.128 295.079 cv
776.883 297.295 779.291 298.48 781.507 297.725 cv
783.28 297.122 784.228 295.195 783.624 293.422 cv
783.141 292.004 780.825 291.605 780.333 292.833 cv
@
3 lw
754.5 373.5 mo
869.5 373.5 li
@
2 lw
755 333 mo
870 333 li
@
3 lw
870.21 326.5 mo
753.79 326.5 li
751.973 326.5 750.5 327.973 750.5 329.79 cv
750.5 330.21 li
750.5 332.027 751.973 333.5 753.79 333.5 cv
754.5 333.5 li
758.881 348.206 li
762.244 357.956 771.422 364.5 781.735 364.5 cv
842.265 364.5 li
852.578 364.5 861.756 357.956 865.119 348.206 cv
869.5 333.5 li
870.21 333.5 li
872.027 333.5 873.5 332.027 873.5 330.21 cv
873.5 329.79 li
873.5 327.973 872.027 326.5 870.21 326.5 cv
cp
@
2 lw
783 372 mo
783 366 li
@
788 366 mo
788 372 li
@
841 372 mo
841 366 li
@
836 366 mo
836 372 li
@
862 326.667 mo
865.866 326.667 869 323.533 869 319.667 cv
869 315.801 865.866 312.667 862 312.667 cv
861.173 312.667 860.382 312.818 859.646 313.081 cv
859.651 312.942 859.667 312.806 859.667 312.667 cv
859.667 306.223 854.443 301 848 301 cv
845.518 301 843.221 301.781 841.33 303.102 cv
840.06 301.806 838.292 301 836.333 301 cv
833.035 301 830.277 303.284 829.536 306.355 cv
828.683 305.235 827.35 304.5 825.833 304.5 cv
823.256 304.5 821.167 306.589 821.167 309.167 cv
821.167 309.248 821.187 309.324 821.191 309.405 cv
820.429 309.249 819.641 309.167 818.833 309.167 cv
814.2 309.167 810.209 311.875 808.326 315.788 cv
807.071 313.907 804.931 312.667 802.5 312.667 cv
800.578 312.667 798.839 313.442 797.574 314.695 cv
796.955 312.844 795.227 311.5 793.167 311.5 cv
790.589 311.5 788.5 313.589 788.5 316.167 cv
784.634 316.167 781.5 319.301 781.5 323.167 cv
781.5 324.379 781.808 325.519 782.35 326.513 cv
@
759.333 326.667 mo
760.027 322.503 763.348 319.274 767.53 318.697 cv
770.828 318.242 li
@
432.161 785.288 mo
428.572 789.256 li
426.992 791.003 424.747 792 422.392 792 cv
392.271 792 li
398.143 788.383 401.806 781.555 400.718 773.962 cv
399.611 766.236 393.47 760.009 385.764 758.769 cv
375.664 757.143 366.786 763.806 364.911 773 cv
352.498 773 li
351.118 773 350 774.118 350 775.498 cv
350 776.78 li
350 780.767 353.233 784 357.22 784 cv
366.068 784 li
367.654 787.619 370.386 790.617 373.808 792.545 cv
364.403 794.368 357.297 802.618 357.273 812.533 cv
357.245 823.913 366.827 833 378.207 833 cv
406.364 833 li
428.04 833 438.595 816.17 440 794.889 cv
440 788.381 li
440 782.048 435.454 781.143 432.161 785.288 cv
cp
1 .666667 .298039 rgb
f
358.242 812.369 mo
358.257 815.998 359.269 819.383 361.007 822.307 cv
364.785 825.837 369.908 828 375.468 828 cv
403.505 828 li
425.09 828 435.601 811.345 437 790.286 cv
437 783.857 li
437 783.477 436.982 783.118 436.951 782.776 cv
435.616 782.805 434.118 783.641 432.815 785.288 cv
429.253 789.243 li
427.672 790.998 425.422 792 423.061 792 cv
393.093 792 li
398.674 788.548 402.251 782.169 401.623 774.994 cv
400.877 766.468 394.036 759.506 385.523 758.624 cv
375.923 757.63 367.648 764.14 365.848 773 cv
353.498 773 li
352.118 773 351 774.118 351 775.498 cv
351 776.94 li
351 780.839 354.233 784 358.22 784 cv
367.001 784 li
368.579 787.581 371.3 790.548 374.708 792.456 cv
365.3 794.268 358.202 802.498 358.242 812.369 cv
cp
1 .788235 .376471 rgb
f
392.063 824 mo
389.469 824 li
383.135 824 378 818.865 378 812.531 cv
378 812.469 li
378 806.135 383.135 801 389.469 801 cv
415 801 li
415 801.063 li
415 813.731 404.731 824 392.063 824 cv
cp
1 .666667 .298039 rgb
f
389.511 823 mo
386.966 823 li
381.865 823 377.23 819.618 376.071 814.65 cv
374.384 807.425 379.823 801 386.761 801 cv
411.511 801 li
411.511 813.15 401.662 823 389.511 823 cv
cp
.454902 .666667 1 rgb
f
393 814 mo
407 814 li
.309804 .533333 1 rgb
@
399 808 mo
410 808 li
@
365 783 mo
356.832 783 li
353.059 783 350 779.941 350 776.168 cv
350 774.963 li
350 773.879 350.879 773 351.963 773 cv
365 773 li
365 783 li
cp
.886275 .231373 .231373 rgb
f
350 774.785 mo
350 776.629 li
350.079 776.89 350.196 777.276 350.275 777.537 cv
351.362 779.028 353.117 780 355.103 780 cv
360.881 780 li
360.633 778.725 360.5 777.41 360.5 776.063 cv
360.5 775.021 360.584 773.999 360.735 773 cv
351.785 773 li
350.799 773 350 773.799 350 774.785 cv
cp
1 .372549 .372549 rgb
f
3 lw
340.5 844.5 mo
346.05 844.5 346.05 848.5 351.599 848.5 cv
357.148 848.5 357.148 844.5 362.697 844.5 cv
368.246 844.5 368.246 848.5 373.795 848.5 cv
379.343 848.5 379.343 844.5 384.891 844.5 cv
390.439 844.5 390.439 848.5 395.987 848.5 cv
401.536 848.5 401.536 844.5 407.085 844.5 cv
412.637 844.5 412.637 848.5 418.188 848.5 cv
423.737 848.5 423.737 844.5 429.287 844.5 cv
434.84 844.5 434.84 848.5 440.393 848.5 cv
445.947 848.5 445.947 844.5 451.5 844.5 cv
.145098 .176471 .196078 rgb
@
340.5 857.5 mo
346.05 857.5 346.05 861.5 351.599 861.5 cv
357.148 861.5 357.148 857.5 362.697 857.5 cv
368.246 857.5 368.246 861.5 373.795 861.5 cv
379.343 861.5 379.343 857.5 384.891 857.5 cv
390.439 857.5 390.439 861.5 395.987 861.5 cv
401.536 861.5 401.536 857.5 407.085 857.5 cv
412.637 857.5 412.637 861.5 418.188 861.5 cv
423.737 861.5 423.737 857.5 429.287 857.5 cv
434.84 857.5 434.84 861.5 440.393 861.5 cv
445.947 861.5 445.947 857.5 451.5 857.5 cv
@
2 lw
389.511 823 mo
386.966 823 li
381.865 823 377.23 819.618 376.071 814.65 cv
374.384 807.425 379.823 801 386.761 801 cv
411.511 801 li
411.511 813.15 401.662 823 389.511 823 cv
cp
@
3 lw
365.411 772.5 mo
352.998 772.5 li
351.618 772.5 350.5 773.618 350.5 774.998 cv
350.5 776.28 li
350.5 780.267 353.733 783.5 357.72 783.5 cv
366.568 783.5 li
@
379 772.5 mo
379 773.328 378.328 774 377.5 774 cv
376.672 774 376 773.328 376 772.5 cv
376 771.672 376.672 771 377.5 771 cv
378.328 771 379 771.672 379 772.5 cv
cp
f
432.661 784.788 mo
429.072 788.756 li
427.492 790.503 425.247 791.5 422.892 791.5 cv
393.771 791.5 li
393.426 791.51 li
398.289 788.287 401.5 782.771 401.5 776.5 cv
401.5 766.559 393.441 758.5 383.5 758.5 cv
373.559 758.5 365.5 766.559 365.5 776.5 cv
365.5 783.137 369.102 788.92 374.449 792.041 cv
374.308 792.045 li
364.903 793.868 357.797 802.118 357.773 812.033 cv
357.745 823.413 367.327 832.5 378.707 832.5 cv
406.864 832.5 li
428.54 832.5 439.095 815.67 440.5 794.389 cv
440.5 787.881 li
440.5 781.548 435.955 780.643 432.661 784.788 cv
cp
@
124.095 159.43 mo
123.449 159.43 122.906 159.21 122.467 158.77 cv
122.027 158.33 121.807 157.787 121.807 157.142 cv
121.807 127.353 li
121.807 126.68 122.027 126.129 122.467 125.704 cv
122.906 125.279 123.449 125.065 124.095 125.065 cv
143.982 125.065 li
144.657 125.065 145.199 125.264 145.611 125.66 cv
146.021 126.056 146.227 126.577 146.227 127.222 cv
146.227 127.838 146.021 128.337 145.611 128.718 cv
145.199 129.1 144.657 129.29 143.982 129.29 cv
126.383 129.29 li
126.383 139.981 li
139.011 139.981 li
139.686 139.981 140.227 140.18 140.639 140.576 cv
141.049 140.972 141.255 141.477 141.255 142.094 cv
141.255 142.71 141.049 143.216 140.639 143.611 cv
140.227 144.008 139.686 144.206 139.011 144.206 cv
126.383 144.206 li
126.383 157.142 li
126.383 157.787 126.162 158.33 125.723 158.77 cv
125.283 159.21 124.74 159.43 124.095 159.43 cv
cp
.454902 .666667 1 rgb
f
172.627 159.43 mo
172.216 159.43 171.842 159.342 171.505 159.166 cv
171.167 158.989 170.881 158.711 170.646 158.33 cv
162.727 145.569 li
167.171 144.294 li
174.387 155.91 li
174.914 156.761 174.988 157.56 174.607 158.308 cv
174.225 159.056 173.564 159.43 172.627 159.43 cv
cp
156.654 141.962 mo
162.287 141.962 li
163.636 141.962 164.824 141.705 165.851 141.191 cv
166.877 140.679 167.684 139.96 168.27 139.036 cv
168.857 138.111 169.15 137.063 169.15 135.89 cv
169.15 134.6 168.857 133.455 168.27 132.458 cv
167.684 131.461 166.877 130.684 165.851 130.126 cv
164.824 129.568 163.636 129.29 162.287 129.29 cv
156.654 129.29 li
156.654 141.962 li
cp
154.367 159.43 mo
153.721 159.43 153.179 159.21 152.738 158.77 cv
152.299 158.33 152.078 157.787 152.078 157.142 cv
152.078 127.353 li
152.078 126.68 152.299 126.129 152.738 125.704 cv
153.179 125.279 153.721 125.065 154.367 125.065 cv
162.287 125.065 li
164.486 125.065 166.438 125.527 168.139 126.452 cv
169.84 127.376 171.167 128.644 172.121 130.258 cv
173.074 131.871 173.551 133.749 173.551 135.89 cv
173.551 137.885 173.074 139.659 172.121 141.214 cv
171.167 142.769 169.84 143.985 168.139 144.865 cv
166.438 145.746 164.486 146.185 162.287 146.185 cv
156.654 146.185 li
156.654 157.142 li
156.654 157.787 156.441 158.33 156.017 158.77 cv
155.592 159.21 155.041 159.43 154.367 159.43 cv
cp
f
182.174 159.43 mo
181.529 159.43 180.986 159.21 180.547 158.77 cv
180.106 158.33 179.887 157.787 179.887 157.142 cv
179.887 127.353 li
179.887 126.68 180.106 126.129 180.547 125.704 cv
180.986 125.279 181.529 125.065 182.174 125.065 cv
202.063 125.065 li
202.736 125.065 203.279 125.264 203.69 125.66 cv
204.101 126.056 204.307 126.577 204.307 127.222 cv
204.307 127.838 204.101 128.337 203.69 128.718 cv
203.279 129.1 202.736 129.29 202.063 129.29 cv
184.463 129.29 li
184.463 139.981 li
197.09 139.981 li
197.765 139.981 198.307 140.18 198.719 140.576 cv
199.129 140.972 199.334 141.477 199.334 142.094 cv
199.334 142.71 199.129 143.216 198.719 143.611 cv
198.307 144.008 197.765 144.206 197.09 144.206 cv
184.463 144.206 li
184.463 155.206 li
202.063 155.206 li
202.736 155.206 203.279 155.396 203.69 155.777 cv
204.101 156.159 204.307 156.657 204.307 157.273 cv
204.307 157.919 204.101 158.439 203.69 158.836 cv
203.279 159.231 202.736 159.43 202.063 159.43 cv
182.174 159.43 li
cp
f
212.93 159.43 mo
212.285 159.43 211.749 159.21 211.324 158.77 cv
210.898 158.33 210.686 157.787 210.686 157.142 cv
210.686 127.353 li
210.686 126.68 210.898 126.129 211.324 125.704 cv
211.749 125.279 212.285 125.065 212.93 125.065 cv
213.635 125.065 214.221 125.345 214.689 125.901 cv
233.874 151.422 li
233.874 127.353 li
233.874 126.68 234.094 126.129 234.534 125.704 cv
234.975 125.279 235.517 125.065 236.162 125.065 cv
236.836 125.065 237.379 125.279 237.79 125.704 cv
238.201 126.129 238.406 126.68 238.406 127.353 cv
238.406 157.142 li
238.406 157.787 238.201 158.33 237.79 158.77 cv
237.379 159.21 236.836 159.43 236.162 159.43 cv
235.869 159.43 235.553 159.363 235.217 159.231 cv
234.879 159.1 234.607 158.901 234.402 158.638 cv
215.219 133.118 li
215.219 157.142 li
215.219 157.787 215.005 158.33 214.58 158.77 cv
214.154 159.21 213.604 159.43 212.93 159.43 cv
cp
f
251.781 155.382 mo
257.457 155.382 li
259.922 155.382 262.1 154.817 263.992 153.688 cv
265.884 152.559 267.372 151.004 268.457 149.023 cv
269.543 147.044 270.086 144.777 270.086 142.226 cv
270.086 139.644 269.543 137.371 268.457 135.405 cv
267.372 133.44 265.884 131.9 263.992 130.786 cv
262.1 129.671 259.922 129.113 257.457 129.113 cv
251.781 129.113 li
251.781 155.382 li
cp
249.494 159.43 mo
248.848 159.43 248.306 159.21 247.865 158.77 cv
247.426 158.33 247.205 157.787 247.205 157.142 cv
247.205 127.353 li
247.205 126.68 247.426 126.129 247.865 125.704 cv
248.306 125.279 248.848 125.065 249.494 125.065 cv
257.457 125.065 li
259.98 125.065 262.275 125.483 264.344 126.319 cv
266.412 127.155 268.208 128.344 269.734 129.884 cv
271.258 131.424 272.432 133.235 273.254 135.317 cv
274.074 137.4 274.486 139.703 274.486 142.226 cv
274.486 144.749 274.074 147.059 273.254 149.155 cv
272.432 151.253 271.258 153.071 269.734 154.611 cv
268.208 156.151 266.412 157.34 264.344 158.176 cv
262.275 159.012 259.98 159.43 257.457 159.43 cv
249.494 159.43 li
cp
f
283.901 159.43 mo
283.256 159.43 282.721 159.21 282.295 158.77 cv
281.869 158.33 281.657 157.787 281.657 157.142 cv
281.657 127.353 li
281.657 126.709 281.877 126.166 282.317 125.726 cv
282.758 125.286 283.285 125.065 283.901 125.065 cv
284.547 125.065 285.09 125.286 285.529 125.726 cv
285.969 126.166 286.189 126.709 286.189 127.353 cv
286.189 154.853 li
302.117 154.853 li
302.762 154.853 303.305 155.073 303.746 155.514 cv
304.185 155.954 304.406 156.497 304.406 157.142 cv
304.406 157.787 304.185 158.33 303.746 158.77 cv
303.305 159.21 302.762 159.43 302.117 159.43 cv
283.901 159.43 li
cp
f
312.193 159.43 mo
311.547 159.43 311.005 159.21 310.564 158.77 cv
310.125 158.33 309.905 157.787 309.905 157.142 cv
309.905 127.353 li
309.905 126.68 310.125 126.129 310.564 125.704 cv
311.005 125.279 311.547 125.065 312.193 125.065 cv
312.867 125.065 313.417 125.279 313.843 125.704 cv
314.268 126.129 314.48 126.68 314.48 127.353 cv
314.48 157.142 li
314.48 157.787 314.268 158.33 313.843 158.77 cv
313.417 159.21 312.867 159.43 312.193 159.43 cv
cp
f
325.568 159.43 mo
324.922 159.43 324.38 159.21 323.939 158.77 cv
323.5 158.33 323.28 157.787 323.28 157.142 cv
323.28 127.353 li
323.28 126.68 323.5 126.129 323.939 125.704 cv
324.38 125.279 324.922 125.065 325.568 125.065 cv
345.456 125.065 li
346.13 125.065 346.673 125.264 347.084 125.66 cv
347.494 126.056 347.7 126.577 347.7 127.222 cv
347.7 127.838 347.494 128.337 347.084 128.718 cv
346.673 129.1 346.13 129.29 345.456 129.29 cv
327.855 129.29 li
327.855 139.981 li
340.483 139.981 li
341.158 139.981 341.701 140.18 342.112 140.576 cv
342.522 140.972 342.727 141.477 342.727 142.094 cv
342.727 142.71 342.522 143.216 342.112 143.611 cv
341.701 144.008 341.158 144.206 340.483 144.206 cv
327.855 144.206 li
327.855 155.206 li
345.456 155.206 li
346.13 155.206 346.673 155.396 347.084 155.777 cv
347.494 156.159 347.7 156.657 347.7 157.273 cv
347.7 157.919 347.494 158.439 347.084 158.836 cv
346.673 159.231 346.13 159.43 345.456 159.43 cv
325.568 159.43 li
cp
f
364.991 159.87 mo
363.114 159.87 361.324 159.576 359.624 158.989 cv
357.922 158.403 356.44 157.582 355.18 156.525 cv
353.918 155.47 352.994 154.253 352.407 152.874 cv
352.114 152.258 352.122 151.685 352.43 151.157 cv
352.737 150.63 353.258 150.293 353.991 150.145 cv
354.52 150.029 355.04 150.109 355.554 150.388 cv
356.066 150.667 356.456 151.085 356.72 151.642 cv
357.071 152.375 357.65 153.05 358.458 153.666 cv
359.264 154.281 360.239 154.781 361.384 155.162 cv
362.527 155.543 363.73 155.733 364.991 155.733 cv
366.399 155.733 367.697 155.514 368.886 155.073 cv
370.073 154.634 371.034 153.996 371.768 153.16 cv
372.501 152.323 372.868 151.29 372.868 150.058 cv
372.868 148.503 372.259 147.109 371.042 145.878 cv
369.824 144.645 367.822 143.883 365.036 143.59 cv
361.398 143.237 358.538 142.167 356.456 140.378 cv
354.373 138.589 353.332 136.374 353.332 133.733 cv
353.332 131.798 353.874 130.155 354.96 128.806 cv
356.045 127.457 357.519 126.43 359.382 125.726 cv
361.244 125.021 363.319 124.67 365.607 124.67 cv
367.396 124.67 368.959 124.919 370.294 125.418 cv
371.628 125.917 372.794 126.605 373.792 127.485 cv
374.788 128.365 375.654 129.407 376.388 130.609 cv
376.798 131.255 376.967 131.863 376.894 132.435 cv
376.82 133.008 376.534 133.455 376.036 133.777 cv
375.478 134.13 374.877 134.203 374.231 133.998 cv
373.586 133.793 373.102 133.411 372.779 132.853 cv
372.31 132.003 371.738 131.285 371.063 130.697 cv
370.389 130.111 369.597 129.649 368.688 129.311 cv
367.778 128.975 366.708 128.806 365.476 128.806 cv
363.305 128.776 361.486 129.18 360.02 130.016 cv
358.553 130.852 357.819 132.135 357.819 133.865 cv
357.819 134.746 358.047 135.589 358.502 136.395 cv
358.956 137.203 359.792 137.899 361.01 138.485 cv
362.227 139.073 363.979 139.483 366.268 139.718 cv
369.758 140.069 372.478 141.133 374.43 142.907 cv
376.38 144.683 377.355 147.021 377.355 149.926 cv
377.355 151.598 377.011 153.05 376.321 154.281 cv
375.632 155.514 374.708 156.548 373.55 157.384 cv
372.391 158.22 371.07 158.843 369.59 159.254 cv
368.108 159.664 366.576 159.87 364.991 159.87 cv
cp
f
404.314 159.451 mo
403.669 159.451 403.127 159.231 402.686 158.791 cv
402.246 158.352 402.026 157.809 402.026 157.163 cv
402.026 127.375 li
402.026 126.701 402.246 126.15 402.686 125.726 cv
403.127 125.301 403.669 125.087 404.314 125.087 cv
404.988 125.087 405.539 125.301 405.965 125.726 cv
406.389 126.15 406.602 126.701 406.602 127.375 cv
406.602 157.163 li
406.602 157.809 406.389 158.352 405.965 158.791 cv
405.539 159.231 404.988 159.451 404.314 159.451 cv
cp
.145098 .176471 .196078 rgb
f
430.802 159.892 mo
428.426 159.892 426.204 159.444 424.136 158.549 cv
422.068 157.654 420.264 156.408 418.725 154.81 cv
417.184 153.211 415.98 151.341 415.115 149.199 cv
414.25 147.059 413.818 144.741 413.818 142.247 cv
413.818 139.783 414.25 137.488 415.115 135.361 cv
415.98 133.234 417.184 131.372 418.725 129.773 cv
420.264 128.175 422.06 126.921 424.113 126.011 cv
426.167 125.102 428.396 124.647 430.802 124.647 cv
433.06 124.647 435.004 124.94 436.632 125.527 cv
438.26 126.114 439.894 127.082 441.538 128.432 cv
441.772 128.607 441.956 128.791 442.088 128.981 cv
442.22 129.172 442.309 129.362 442.352 129.553 cv
442.396 129.744 442.418 129.971 442.418 130.235 cv
442.418 130.793 442.22 131.255 441.824 131.621 cv
441.428 131.988 440.951 132.193 440.394 132.237 cv
439.836 132.281 439.294 132.099 438.766 131.687 cv
437.68 130.749 436.559 130.03 435.4 129.531 cv
434.24 129.033 432.709 128.783 430.802 128.783 cv
429.07 128.783 427.443 129.135 425.918 129.839 cv
424.393 130.543 423.051 131.511 421.893 132.743 cv
420.732 133.976 419.831 135.405 419.185 137.033 cv
418.541 138.661 418.218 140.399 418.218 142.247 cv
418.218 144.125 418.541 145.877 419.185 147.505 cv
419.831 149.133 420.732 150.563 421.893 151.795 cv
423.051 153.027 424.393 153.988 425.918 154.677 cv
427.443 155.367 429.07 155.711 430.802 155.711 cv
432.298 155.711 433.713 155.455 435.048 154.941 cv
436.383 154.429 437.666 153.717 438.898 152.808 cv
439.426 152.427 439.946 152.257 440.46 152.301 cv
440.973 152.345 441.406 152.551 441.758 152.917 cv
442.109 153.284 442.286 153.79 442.286 154.435 cv
442.286 154.728 442.227 155.015 442.109 155.293 cv
441.992 155.572 441.816 155.829 441.582 156.063 cv
439.998 157.325 438.304 158.278 436.5 158.923 cv
434.695 159.568 432.797 159.892 430.802 159.892 cv
cp
f
465.474 155.755 mo
467.38 155.755 469.133 155.411 470.731 154.721 cv
472.33 154.032 473.716 153.079 474.89 151.861 cv
476.062 150.644 476.965 149.214 477.596 147.571 cv
478.227 145.929 478.541 144.154 478.541 142.247 cv
478.541 140.341 478.227 138.566 477.596 136.923 cv
476.965 135.28 476.062 133.851 474.89 132.633 cv
473.716 131.416 472.33 130.471 470.731 129.795 cv
469.133 129.121 467.38 128.783 465.474 128.783 cv
463.566 128.783 461.814 129.121 460.215 129.795 cv
458.616 130.471 457.238 131.416 456.08 132.633 cv
454.92 133.851 454.019 135.28 453.373 136.923 cv
452.728 138.566 452.405 140.341 452.405 142.247 cv
452.405 144.154 452.728 145.929 453.373 147.571 cv
454.019 149.214 454.92 150.644 456.08 151.861 cv
457.238 153.079 458.616 154.032 460.215 154.721 cv
461.814 155.411 463.566 155.755 465.474 155.755 cv
cp
465.474 159.892 mo
462.893 159.892 460.53 159.458 458.39 158.593 cv
456.248 157.729 454.407 156.511 452.867 154.941 cv
451.328 153.372 450.132 151.509 449.281 149.353 cv
448.43 147.197 448.006 144.829 448.006 142.247 cv
448.006 139.666 448.43 137.305 449.281 135.163 cv
450.132 133.022 451.328 131.167 452.867 129.598 cv
454.407 128.028 456.248 126.81 458.39 125.945 cv
460.53 125.08 462.893 124.647 465.474 124.647 cv
468.055 124.647 470.408 125.08 472.535 125.945 cv
474.662 126.81 476.502 128.028 478.058 129.598 cv
479.611 131.167 480.814 133.022 481.666 135.163 cv
482.516 137.305 482.941 139.666 482.941 142.247 cv
482.941 144.829 482.516 147.197 481.666 149.353 cv
480.814 151.509 479.611 153.372 478.058 154.941 cv
476.502 156.511 474.662 157.729 472.535 158.593 cv
470.408 159.458 468.055 159.892 465.474 159.892 cv
cp
f
492.357 159.451 mo
491.711 159.451 491.176 159.231 490.751 158.791 cv
490.325 158.352 490.113 157.809 490.113 157.163 cv
490.113 127.375 li
490.113 126.701 490.325 126.15 490.751 125.726 cv
491.176 125.301 491.711 125.087 492.357 125.087 cv
493.06 125.087 493.647 125.366 494.117 125.923 cv
513.301 151.443 li
513.301 127.375 li
513.301 126.701 513.521 126.15 513.961 125.726 cv
514.4 125.301 514.943 125.087 515.589 125.087 cv
516.264 125.087 516.806 125.301 517.217 125.726 cv
517.627 126.15 517.833 126.701 517.833 127.375 cv
517.833 157.163 li
517.833 157.809 517.627 158.352 517.217 158.791 cv
516.806 159.231 516.264 159.451 515.589 159.451 cv
515.295 159.451 514.98 159.385 514.643 159.253 cv
514.305 159.121 514.033 158.923 513.829 158.659 cv
494.644 133.14 li
494.644 157.163 li
494.644 157.809 494.432 158.352 494.007 158.791 cv
493.582 159.231 493.031 159.451 492.357 159.451 cv
cp
f
537.545 159.892 mo
535.667 159.892 533.877 159.598 532.176 159.011 cv
530.475 158.425 528.993 157.604 527.732 156.547 cv
526.471 155.491 525.547 154.274 524.961 152.895 cv
524.667 152.279 524.674 151.707 524.982 151.179 cv
525.291 150.651 525.81 150.314 526.545 150.167 cv
527.072 150.051 527.593 150.131 528.106 150.409 cv
528.619 150.688 529.008 151.106 529.272 151.663 cv
529.625 152.396 530.203 153.071 531.01 153.688 cv
531.816 154.303 532.793 154.803 533.936 155.184 cv
535.08 155.564 536.283 155.755 537.545 155.755 cv
538.953 155.755 540.25 155.535 541.438 155.095 cv
542.627 154.655 543.587 154.018 544.32 153.182 cv
545.053 152.345 545.42 151.311 545.42 150.079 cv
545.42 148.524 544.811 147.131 543.594 145.899 cv
542.377 144.667 540.375 143.904 537.588 143.611 cv
533.951 143.259 531.091 142.188 529.008 140.399 cv
526.926 138.61 525.885 136.395 525.885 133.755 cv
525.885 131.819 526.427 130.177 527.512 128.827 cv
528.598 127.478 530.071 126.451 531.935 125.747 cv
533.797 125.043 535.873 124.691 538.16 124.691 cv
539.949 124.691 541.512 124.94 542.846 125.439 cv
544.181 125.938 545.347 126.627 546.344 127.507 cv
547.342 128.387 548.207 129.429 548.94 130.631 cv
549.352 131.276 549.519 131.885 549.446 132.457 cv
549.373 133.029 549.087 133.477 548.588 133.799 cv
548.031 134.151 547.43 134.225 546.784 134.019 cv
546.139 133.814 545.654 133.433 545.332 132.875 cv
544.863 132.024 544.291 131.307 543.616 130.719 cv
542.941 130.133 542.149 129.671 541.24 129.333 cv
540.331 128.996 539.26 128.827 538.028 128.827 cv
535.857 128.798 534.039 129.201 532.572 130.037 cv
531.105 130.873 530.373 132.156 530.373 133.887 cv
530.373 134.768 530.6 135.61 531.055 136.417 cv
531.509 137.225 532.345 137.921 533.562 138.507 cv
534.779 139.095 536.532 139.505 538.82 139.739 cv
542.31 140.091 545.031 141.154 546.982 142.929 cv
548.933 144.704 549.908 147.043 549.908 149.947 cv
549.908 151.619 549.563 153.071 548.875 154.303 cv
548.185 155.535 547.261 156.569 546.102 157.405 cv
544.943 158.241 543.623 158.864 542.143 159.275 cv
540.66 159.685 539.129 159.892 537.545 159.892 cv
cp
f
752.308 158.996 mo
751.412 158.996 750.558 158.855 749.746 158.576 cv
748.934 158.296 748.227 157.904 747.625 157.399 cv
747.022 156.895 746.582 156.314 746.302 155.656 cv
746.162 155.363 746.165 155.09 746.313 154.838 cv
746.46 154.586 746.708 154.425 747.058 154.354 cv
747.31 154.299 747.559 154.338 747.804 154.471 cv
748.048 154.603 748.234 154.803 748.36 155.068 cv
748.528 155.419 748.805 155.74 749.189 156.035 cv
749.574 156.328 750.04 156.566 750.586 156.748 cv
751.132 156.931 751.706 157.021 752.308 157.021 cv
752.98 157.021 753.6 156.916 754.166 156.707 cv
754.733 156.496 755.191 156.192 755.542 155.793 cv
755.892 155.394 756.067 154.9 756.067 154.313 cv
756.067 153.57 755.776 152.906 755.195 152.318 cv
754.614 151.729 753.659 151.365 752.329 151.226 cv
750.593 151.058 749.227 150.547 748.234 149.693 cv
747.24 148.839 746.743 147.781 746.743 146.521 cv
746.743 145.598 747.002 144.814 747.519 144.17 cv
748.038 143.525 748.741 143.035 749.631 142.699 cv
750.519 142.363 751.51 142.195 752.602 142.195 cv
753.456 142.195 754.201 142.314 754.839 142.553 cv
755.476 142.791 756.032 143.119 756.508 143.539 cv
756.983 143.959 757.396 144.457 757.747 145.031 cv
757.943 145.339 758.023 145.629 757.988 145.902 cv
757.953 146.176 757.816 146.389 757.579 146.543 cv
757.313 146.711 757.025 146.746 756.718 146.647 cv
756.41 146.55 756.179 146.367 756.025 146.102 cv
755.801 145.695 755.528 145.353 755.206 145.072 cv
754.884 144.793 754.506 144.572 754.072 144.411 cv
753.638 144.25 753.127 144.17 752.539 144.17 cv
751.503 144.156 750.635 144.348 749.935 144.747 cv
749.234 145.146 748.885 145.759 748.885 146.584 cv
748.885 147.005 748.993 147.407 749.211 147.792 cv
749.428 148.178 749.826 148.51 750.407 148.789 cv
750.988 149.07 751.825 149.266 752.917 149.377 cv
754.583 149.545 755.881 150.053 756.813 150.9 cv
757.743 151.748 758.209 152.863 758.209 154.25 cv
758.209 155.048 758.044 155.74 757.716 156.328 cv
757.387 156.916 756.945 157.41 756.393 157.809 cv
755.839 158.208 755.209 158.506 754.503 158.701 cv
753.795 158.897 753.064 158.996 752.308 158.996 cv
cp
.454902 .666667 1 rgb
f
762.641 158.785 mo
762.332 158.785 762.073 158.681 761.863 158.471 cv
761.653 158.261 761.548 158.002 761.548 157.693 cv
761.548 143.477 li
761.548 143.154 761.653 142.893 761.863 142.689 cv
762.073 142.486 762.332 142.385 762.641 142.385 cv
772.132 142.385 li
772.454 142.385 772.713 142.478 772.909 142.668 cv
773.105 142.857 773.203 143.105 773.203 143.414 cv
773.203 143.707 773.105 143.945 772.909 144.127 cv
772.713 144.31 772.454 144.4 772.132 144.4 cv
763.732 144.4 li
763.732 149.504 li
769.759 149.504 li
770.081 149.504 770.34 149.598 770.536 149.787 cv
770.732 149.977 770.83 150.218 770.83 150.512 cv
770.83 150.806 770.732 151.047 770.536 151.236 cv
770.34 151.426 770.081 151.519 769.759 151.519 cv
763.732 151.519 li
763.732 156.77 li
772.132 156.77 li
772.454 156.77 772.713 156.861 772.909 157.043 cv
773.105 157.225 773.203 157.463 773.203 157.757 cv
773.203 158.064 773.105 158.313 772.909 158.502 cv
772.713 158.691 772.454 158.785 772.132 158.785 cv
762.641 158.785 li
cp
f
781.1 158.785 mo
780.791 158.785 780.532 158.681 780.322 158.471 cv
780.112 158.261 780.008 158.002 780.008 157.693 cv
780.008 142.385 li
782.191 142.385 li
782.191 157.693 li
782.191 158.002 782.087 158.261 781.876 158.471 cv
781.666 158.681 781.407 158.785 781.1 158.785 cv
cp
775.472 144.4 mo
775.178 144.4 774.935 144.307 774.747 144.117 cv
774.558 143.928 774.464 143.686 774.464 143.393 cv
774.464 143.099 774.558 142.857 774.747 142.668 cv
774.935 142.478 775.178 142.385 775.472 142.385 cv
786.706 142.385 li
787 142.385 787.242 142.478 787.431 142.668 cv
787.62 142.857 787.715 143.099 787.715 143.393 cv
787.715 143.686 787.62 143.928 787.431 144.117 cv
787.242 144.307 787 144.4 786.706 144.4 cv
775.472 144.4 li
cp
f
803.171 151.961 mo
803.675 148.978 li
800.44 148.978 li
799.958 151.961 li
803.171 151.961 li
cp
807.35 147.215 mo
807.644 147.215 807.882 147.285 808.063 147.425 cv
808.245 147.564 808.315 147.796 808.273 148.117 cv
808.26 148.384 808.134 148.594 807.896 148.748 cv
807.657 148.902 807.385 148.978 807.076 148.978 cv
805.67 148.978 li
805.166 151.961 li
806.51 151.961 li
806.831 151.961 807.073 152.037 807.234 152.191 cv
807.394 152.346 807.476 152.549 807.476 152.801 cv
807.476 153.025 807.363 153.234 807.14 153.431 cv
806.915 153.627 806.614 153.725 806.236 153.725 cv
804.725 153.725 li
804.031 157.736 li
803.976 158.044 803.853 158.296 803.664 158.492 cv
803.476 158.688 803.22 158.785 802.897 158.785 cv
802.59 158.785 802.362 158.674 802.215 158.449 cv
802.068 158.227 802.022 157.96 802.079 157.652 cv
802.729 153.725 li
799.496 153.725 li
798.823 157.736 li
798.768 158.029 798.638 158.278 798.435 158.48 cv
798.232 158.684 797.983 158.785 797.689 158.785 cv
797.382 158.785 797.15 158.691 796.997 158.502 cv
796.843 158.313 796.794 158.029 796.85 157.652 cv
797.521 153.725 li
796.072 153.725 li
795.778 153.725 795.544 153.651 795.369 153.504 cv
795.194 153.357 795.113 153.165 795.128 152.927 cv
795.155 152.605 795.278 152.363 795.495 152.202 cv
795.712 152.041 795.995 151.961 796.346 151.961 cv
797.963 151.961 li
798.445 148.978 li
796.892 148.978 li
796.611 148.978 796.381 148.916 796.198 148.789 cv
796.017 148.664 795.926 148.468 795.926 148.201 cv
795.926 147.865 796.037 147.617 796.262 147.456 cv
796.485 147.295 796.786 147.215 797.165 147.215 cv
798.865 147.215 li
799.559 143.414 li
799.629 143.092 799.755 142.836 799.936 142.646 cv
800.118 142.458 800.37 142.363 800.692 142.363 cv
801 142.363 801.235 142.469 801.396 142.679 cv
801.557 142.889 801.602 143.162 801.532 143.498 cv
800.86 147.215 li
804.095 147.215 li
804.788 143.414 li
804.844 143.119 804.97 142.871 805.166 142.668 cv
805.361 142.465 805.613 142.363 805.922 142.363 cv
806.243 142.363 806.478 142.469 806.625 142.679 cv
806.772 142.889 806.81 143.162 806.74 143.498 cv
806.09 147.215 li
807.35 147.215 li
cp
f
822.092 158.785 mo
821.084 158.785 820.177 158.551 819.372 158.082 cv
818.566 157.613 817.93 156.973 817.461 156.16 cv
816.992 155.349 816.758 154.438 816.758 153.431 cv
816.758 153.123 816.855 152.867 817.052 152.664 cv
817.247 152.461 817.499 152.359 817.808 152.359 cv
818.115 152.359 818.375 152.461 818.585 152.664 cv
818.795 152.867 818.899 153.123 818.899 153.431 cv
818.899 154.033 819.039 154.578 819.319 155.068 cv
819.6 155.559 819.981 155.943 820.464 156.224 cv
820.947 156.504 821.489 156.644 822.092 156.644 cv
822.707 156.644 823.257 156.504 823.74 156.224 cv
824.223 155.943 824.604 155.559 824.885 155.068 cv
825.164 154.578 825.305 154.033 825.305 153.431 cv
825.305 152.814 825.164 152.266 824.885 151.782 cv
824.604 151.299 824.223 150.918 823.74 150.638 cv
823.257 150.357 822.707 150.218 822.092 150.218 cv
818.585 150.218 li
818.276 150.218 818.024 150.116 817.828 149.913 cv
817.633 149.711 817.534 149.455 817.534 149.146 cv
817.534 143.477 li
817.534 143.169 817.633 142.91 817.828 142.699 cv
818.024 142.49 818.276 142.385 818.585 142.385 cv
825.599 142.385 li
825.893 142.385 826.144 142.493 826.354 142.71 cv
826.564 142.928 826.67 143.183 826.67 143.477 cv
826.67 143.757 826.567 144.002 826.365 144.211 cv
826.162 144.422 825.906 144.527 825.599 144.527 cv
819.655 144.527 li
819.655 148.076 li
822.092 148.076 li
823.113 148.076 824.027 148.31 824.832 148.779 cv
825.637 149.248 826.273 149.885 826.743 150.689 cv
827.212 151.496 827.446 152.408 827.446 153.431 cv
827.446 154.438 827.212 155.349 826.743 156.16 cv
826.273 156.973 825.637 157.613 824.832 158.082 cv
824.027 158.551 823.113 158.785 822.092 158.785 cv
cp
f
831.604 158.785 mo
831.324 158.785 831.079 158.681 830.869 158.471 cv
830.659 158.261 830.555 158.009 830.555 157.715 cv
830.555 157.602 830.572 157.494 830.607 157.389 cv
830.642 157.284 830.688 157.168 830.743 157.043 cv
836.771 144.527 li
830.387 144.527 li
830.078 144.527 829.823 144.426 829.62 144.223 cv
829.417 144.019 829.315 143.764 829.315 143.455 cv
829.315 143.148 829.417 142.893 829.62 142.689 cv
829.823 142.486 830.078 142.385 830.387 142.385 cv
838.388 142.385 li
838.682 142.385 838.934 142.49 839.144 142.699 cv
839.353 142.91 839.459 143.162 839.459 143.455 cv
839.459 143.554 839.444 143.648 839.417 143.739 cv
839.389 143.83 839.353 143.925 839.311 144.022 cv
832.592 158.197 li
832.367 158.59 832.038 158.785 831.604 158.785 cv
cp
f
1000 159 mo
859 159 li
859 142 li
1000 142 li
1000 159 li
cp
f
717 159 mo
576 159 li
576 142 li
717 142 li
717 159 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.4.1
%%Title: (ox030-temp_06.eps)
%%CreationDate: 9/20/2021 2:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+_e+!81^97&LC^:/10P[WiBsoH6T`mt?7+_P\gu<?pOq5lWJ#DX*1>(4^3KtrT!8>ukcHOT#m*':ne5W-hXd:R2j$Me@
%`Jg+Nf/6:GcnFdYs%Q3NYNuJ\+_?rYV/@l`GBR/L;UB:t)q@EY]pL8Jo]qo>rtsVfRJ0"TgA$dZ<;k5oeB+nPK@NRO=DbE[IOAXg
%1s.WcW:K74e:Ino=lup>9@[o?fR`lbH+aFNg[rKGTYt0`kl?;8<C`!kf*ZM.!9p""/5J([_8^t"7aK<F51Xj<Zh@LFZqTG`+iGq_
%SV&\X@mG$YE(sbc(-Hi-XuePlnJnK;kU+lc['3;-e9)4!QrqC^Ad$]$dSRsq=NC'.3k"!L!fLg)BC#>#>E20l$q%on-K/Ri;&u`k
%FUV2-*A`#73_5>$TSePuG^u,u&/!\$*g;?o9HqJ3#`("3+<lCDeoH;.k."A-Lk4D<?#3i*Q*h's*@og!>c]KMU0AgJR/7uPp0>l7
%@YKXJNZBY98;&!X5d/1bH9/M#`fVqicch2+.dUTIHP(<"*R/Zq_1Bn_HUst#YXG!HBFp&:aB;s258G9[UV<sZ-&;Jhq7%@`=5'42
%hl/HtTBTX1h.G?s$^s8o!1="1`R`sYAiVjA]@@B!I3pEIO.Fr42o"1eS2Sn!ekfp`!`^]*%5ZL`o/cjm'g)GKcUPpu=:AhTB,P+p
%>enoGcm&bmVk:"*2)IZki_\GAC<`d9#tS8+%D",Ic[Xp\<>^r#'nd_3Eg3!d1_7MQj1'7B":^MSbE?E]4VR`t$%=F;Sd0^)BM!?0
%Dftb'^HcXhg.B$2m8ekjl[#B0*G8<Ba/mp0P_1H$%,&F2eOLVmmiMD/9'lGWj.HJ]Yu0m4-PeLU#\C&@g[K[sW;'$mA@i`/pD\#V
%eTo&SF1Q8"T^.8MJ2BE%5``K1DKH^Z)&Tmib0g<\:nWZY&cf@pD(-lniukgS5l5E-.`[hNik2+ufUB%?C0YOSat_-XQ^=5C`pEL+
%%nF>nrufF8:?lqQ]';923%/Z6:k6$EHP6>W8[ikFpFFn<L.a``i`q#m;.'#Y5#>[W#4V/t9]9W><''MC1JRdag\BOpn9;.9EcD6A
%DgZ>hpsq:tmHQ0$kA%Gb`DG+CD_,MT=Nn3T=&l#eLLiRYbBWN;Wd>d&o/nRY:\Yle'oQ1q=N%5Y,/,KAZ-;J_^0P$PD5t=]M?R$^
%\Ip.3-o4=$PM]hLp"i*1_*;$1l,)=[%-^[>niJ*(Iq'?A$@``VW]R^GdY5FjKgam<Cl1<4Rms.A2pmWrR#Q22<:3])!/i"7p`%DX
%Y%"!^&g>Rac$d]>Ktk/J;pPS#qMZH4-fc#C<"]+b`K3ReND2,PR<!a()2A`)$u&\2k-![c80e,R'GAK-JA3E$R"`;[(t+5TR@,TY
%gpr@E_Gmg+a=Bh[XCDsTn$*^RT'@8lSd?P#))[/mD(E&7&bQ[X+G!-SO[,qlPk/[d&V":FQ?B!cqh6Q\D_-MD6?OU9C*[fn0as@i
%--f+rPhZlA/2AajC60k#Epkf5h"M5F4-,J)N)B4%qH-G-kN9;UIaA$>niT`OZC1IB6/9C.rF8]b7R,LUl>#r\j%OSr1_*X9eJO)f
%OfCq"UdfgOD:R5M2\7@eSQ%c;&r!JT=[D2)\Z1[r)Z7Lf;H<#Q+'=Hn0D`ll/;r!)?iC;\L#B&r0E6)5:.Kg0TBgOOF[PAqr0Pb$
%X6;5:.hjr`rT/N*I<h6eU;-VEAVJU\?iHsWs.l5V*o_,#0;hg-s!!GW<OB^0nga@u8AFcc47D,=0duL1>OZi>F3^S8.N1slpk->\
%\kI'CphSurW%7FFIMI@E:^-hr'DS*<rufpia`^\#_rC/Q`RS>n-a9$c$t17qr$smY,3[<mhK>-TAUFrk?&"=R#m5dsaQ&K,`P2Q3
%Od)k^I,PEd'/aS]*r(Zsia9TCQE`J<2OT$-J@*;,$$t=0\3Yid@K>j&H$n\UiJIsIeTEXTWqq;RQ$e@i0k;(<p]AfG@Fe7^8?s56
%/.-%i6M2a"[EdSCa$t'&EJU'VlK;Bj^Hd-JGuaF-HQ^)'A-&\lX%X]1^F1et>WBJ:V3q9JO=(IgEe$7tO^t%4?<p!#TF>3<'4Eqr
%JH$)TMe7JALb*<rk2;:K6t/L_TYuBG;3n"Zf#Xm6--3+q-=S9D?!\7LQ-p_53F\Mb![OnRZq4<0r"D\nJsTO@kCT=F(o,I#&^G'L
%<&mhs.!5X"8jS4:*?GTcL?Mf0W=<+1i2o&mFcN,g@PM6K$#"?qi7YCU5`fW[^gF5-(6,%=F=LjplpGo*'o(bSN[1]Pq1?]RgfU/*
%0hK`B_d*L-0Xj#1Vi\ANRRt?6LC/\Sb#G/rFFb!>B[eM.)Mfj)*?5"\+?\ZCMU<P8kW$d1pbAiO'GbsUY;o&:i"a5H:fU-=/aFbK
%1`uuN&-X2:i&Pu.bNhTa?l1)RG:i5ZUg7q@'oMLUrmHiZ7ib3UOple?Ul__m*luk=N['cA.Ce/-<aM,'!44lQ=5nme+B`OO!%Uk9
%*(")],lQ%#R>b]'EJQ`/OgG4Sn38<pfsWA<QncJA#K@PX[;^AmaQhFH^`6WWVrf"/VZT'4i'/01*233N],RTliVA,)?cF0+@BL``
%6hnkCOp:+VjuWEZcVmKdRT3adlUXaN-q8N@/of`ZaMJ)Rk"W3,7%PKS(&Md?+HrHB?N;H"jfHgk1_<niQ-62&Lf3&5Kq[J@O'ZpR
%3&.6P8pM2NkQdeS)5Ec5B5aYS2X0<D(h\X4M6$rW%qWP]WU#q,P"H[$(0-AK=mM^[!=]:Lj9,otZ%CdZT=LY,U0K>qA/D.?B=[4c
%7ARU>Cat'#^D^#:1=_OsC<Y1DSMd\KMm,p8QtinrR2>cC:!s"`U`[XH'FpUW?6K$9U9L*f[Z+`KU%_G*WX`^j=lCH50+&K11jTkD
%0MK_njY6q&o-u4C6@LrS!\(KViq7=?;Jc?oSWM;g[i2L?+3]!7krYi>UX6$W$TOdpG%mC1C/D3@PK,IP^(T/4>?kaQa6uPnU&\u1
%W#6bX`StAj1]fu&e@<^QUG/.4/n9u(H"g\R/V9!S6j6$,&YrQGV6'=%S7@[bBo8pi"DXX[6$F&o!,=c!VS<8O/"iKsd7m5uA5P8E
%Y[rMubEhG/%\'^i**a*u&6)\22X1NF,Xf85Z__(]]8OXb6qKmCO1O0kdGh$#*bEqpC2G65o)M7B[61G2'bhOQ-E)K)T'&6l<0ac+
%+bQ^0c(YG35g-tldm-Z"a3\MOKJ(+)0`0SBHgEeH`7$G51WhY>JrR"W7X8(QVhh?>=-sQiPi]o-RHuWmB5!g47nFChh[IN_q-@1q
%/(%]@CM#P2"fM\mcqNR/=aa0QF3h$>qahY04JsS7nL5[LSBs%WE.X<.=%G>bEcqK5;1V6tJhSKl=dfSk2j[MT#S2k.@NNT0:i3Pc
%13A[J2:k`K3D<L@MH@mA"FZ$a/54W7U&"mlKnAZZ*pS#u<(VF:ff;0qTrA/sJ:Snd2<,haL_Gd]*q/`W_?n]N8iWjcPX[$A"eJEt
%FWFTcJ18PA3SNsMrdu2M\d=';O7nkkZ!3O&`JPgOfKA^[U>*%lS]u(PRkSF9("E@up*+ihS3p`f:^^B-Bj59.QBS$l4?sq*Lo+^D
%dh.-n7E/sndcb_]Op]$n*<dD^U*Z5Z'K02ZceUq#/auR^!FCmLGQhqI1)[#f@l9^X#Wc!5J^o"TYgGt+4n`b;DQ'iHaJC"=pdF=n
%e*L[=F&Vco6Xm>p>Bn+eV>Ifi&A"i79KBR*T07(!l2:WI=C"r_RI<VhjHR*K`/8A)2mbSHA9Fpie)-laPX1K;.dD)C[`0qMo[SkF
%4js5m/SH56,q:F4@;2CeXBe[!)%UPacOUo]1o-",;=annm4G)a&l',f\Knabi*=D\fQ<d+[mFQAO5XG!lo6T&FO3ED.4"9_7]D.V
%#<QC"(aE<;S>_Ak-]#ajFA*]T8FI)cYe&=oX$#".22RV'WCM^pl6>P:+@Dgp',cb1W-,&7W1sY:cuYFd6Bp/9=$Q0r]U.IXTjEsa
%SPIXaU/OgHBEB\;5:/@5dGan,YYrI^NWp^G$p%83Fq+"pS2&TKMXN1(M<UfcHKY@nAGX>_+2H@IgCb0jW`*8[[":=IScAIl2)XJe
%IIK@[I[nTgUKtbA-r8?+O:WikN)e8:NGF.;_B<R..]B%Z-r$pZ</2^&5b4s\PU^SQN=Q\KQ[0PG)s8/<%+Hh"!Vm3ZmkK<RAZW=2
%=b6L<ar!O[CMK4ML4*`-UiGQ?f9M&DL(]728c@[CVAq:?@nBrVBKUn1KB(j!l%@Dr<=,s)YgN*(9gp<GL.@URIX/<4j8Q)k&bJBj
%4Vh"M-s<LQMNR'1+sY.C/uL6(!,\<Z%!g5C2-@oJN2&LHU='Zp[Pr37iRn_'>g$6/0i%Zq='OA/oIL063D]/sGVX,6e</k\RQRpM
%4g/HYc_B*bgiT(P]f\ueckFJ&S7.>ud$IWW6J#T<ZHET&"dP=@Y#oC0>t:>0UfLW!BS<$u.ST,U>>EC2AQ(+Q's.,Z[(o$A[#;kY
%[&^#I-43g"::gJXY=4X+.@Y$=V&9WC1>NX9'S]GMQ)j%'#n=j/O3f-3r)0j0s5n<^MnLY61+r7Ba'tfu9DImn)0i(0W&B[tgF,AV
%p4?&Kq%#-.;oZXS""I:8\CUT(s0h]nHa$H9_TT>fUYB%W+#X&nhb:c>3".Q\Jl8MoWr*4HRI.n1OI4;:cuu,,I`jB1)itQQjSVVk
%G"@7d<PK8Zpat!lV#!/FrT2t9dAfVEE:-?shk8\:`Z!u[UU7NE[+\4sU%5CeStSJZitiDc]c%1k0)N-CR?_drH>ESg$d7o8n2mJ1
%NQP[V,^<>(m^LIAfH<5&&:pdhY[Gh'2bKQ.^KR`Z\,>A[V3EF9]'Y^*I\TaLS+#r4";?8TYH[0.5bU87N[j^Bd)t]t/"If7e#5-D
%;dF#(`,B+.<-%F?]\'As]mbV_7\$.qhs,0O&IGrWBOS#lOPo5;K!JIPT'6KTpJhJhB&>j%gf`1#?>bPCF#%JHLF;8EK_NgH@A@"?
%f-5<H3BM\j;^k_!]q=[e0LQea(=0)68YMj?Bf.ZbDS+Ar+YuJKIpn3,SV)DLa#_;F)qMiT[WS6i\tN8p:G\Z'1\p^&Tc%%r8#:*-
%T4T<q_u\(enX4*?Id!;uC]&5Ac.Zp/g;-L"$fQ/=&Q8'U2msXdJ=`)X-/<D#[seg4[?R*TY?%dCbB`#aX)ck["Mh*os8:3a/?FKL
%$t&%uc;.D&n8d[+g!%;SPcl2'QDj[<=[JSr:ukuug>t'tq,Y['Mals,;D#A03gIL./t+m/5Q;Q,5K?2ZV*'usr;&^ng-"m9oOMW$
%OQ.MH8#>!$)+osm-,gT*D`kt."I8#2c6&iO!?;V18#0a19C,KD)IthJ:&lP,?k3ST0-Wh,JWsSBN/mJ$e[qrVh5q0RX%p-HQqXt>
%JE)bBIN!d)/slp@5t*Fu;@%^["<I@+@'p_smfL'F9JAJ$,X^#u\Dna8h5Po`L)]W;COpeAO%Lce?4Z,e&6J>O[S%Y@h[sNXOs):b
%nL=ktfH3":IRC4H`r"c`+,?+[+3K_Z7^lA)f%AMJaO$oIc"a9i&tj4mE.Tth65n+Ajb%2&Pa[.C]Hf'@^akB\MP[[/](/@GbM\]p
%bJ@%f.<X`M=7.iHS<^[+W@O=HEiCR5lWguqQ4FaLFfSARha(m-Tb(GnbPa_6/tog4p#T(Y0(n=(?gbr2Eq@9knE,lYigThV6L\ni
%h)k/MN?<@VJ^1i*?<q$i`4W[re))$glDGcF9qV2No\L(Yh*DI];;PNh;dKt5Xj@5LJ')BkKm=sp@*S/KgD.J0(u3qkhJQ(`eAaF^
%b/<E9KS6Bg[[DQ^Ol&,ZC'U:;"S,$As71-P0e(-?GK$i$9c]^`ns__`7iW\^YB%6:W8*@N*pq8!lL="L'eMQ'c<6l'7":^8G"XJO
%<>,3a&_Ck?q5%K&jGuQ96Mjc/@?-0sOKWQPDlrrhCt++6-qcN+&U+`SGR5oZlKsTr$A$=I(W!eJ6Jn!OD91[W>904GJhM@gg?js8
%d%tbA4T=nePTWk5AGj$u&D1\rlCEo3+qeArA)9VK-W*M[[<n'BhAAW,-=,_H>jj/_NRIm:C/OJBOK0AU/<C8L#jGN8=gc\OZaG!G
%R3auEN(oG*RX`K47n@-a@5p?3U1&Fs(kc>g6X@J#8^VHV3[_>.PEZ9cH^!LY'<rF^NY<\r`_GA_LVkWD>r&,aa*tOIWOX(1,Wg/+
%3e#lO>s;`_p4o%KgNmkaRs^*Q7^^SMJmSg9#$h$8+$JH=duTsigd\l9.3>V$(&O@f:glrC0K-<r@]Uas3lW,7B_ga^GPDHqEsWjR
%=7EBG[4GDK"+W>QXk[a"RO<?li)!A6Y'L@t6$Xc!o&@6Gf<%"7Qn#:=H/01rQ.V5"EJ`9QHXZ)Ur+=SY2"6JhfJ9H6:5G"!%fZD-
%rg3)*9hM:ceMKj2(;0WtOjnKE?;N?4$ORO+;gLaG<Je?+"U,3L\5"\*811#N+pMm,\TO*36A/VDhP8$UJamS=C6*I+,U&2Ta*BZ*
%^Z()WY6WUkTLu]*%jbsLT`rtfE5t?'ccab':M?l<++:mggFQF[c)P+Xn.RLFIe0b6Eg"l%f/i$Kpj3B=ST5>ej9GB@2'6-PZogHG
%:PVaaDCfQ@oj?k:UYbU0%*8jY/*XPfSeg.pL_4i<^Eo]pY#W4_jJlM#IS5KY)g#X_;C>giqNW@VG%?qpUHTn,C$j*H@<BP%.j%ck
%eIa!XamJ"rJE%g80K:+>iG&[=77%q,?WrHCT,QAkCJ:$rj%i,>&CT4.NfN!8@?X^aL]9.Ri<j"RLSV0D(1BF\YS!b%99OK'rg8Km
%QRhjEcCsm<!ckX]+t\I/*i_h][C"U(ITBjR>,_aU6:XcpTOVG2WRS%m0A&l0?gt!A`Mj^$/(cY,]i#dMnNV#:j5r?\2r1q\ALE@^
%#Bli+m`J:hU^0P9U0Mt_-RMdD)7_0OQ(9<p&TRstZZgaD9)@A]>IYCoWVc56]dW.;dmM&Zfo)"-+kOIF,r(>9](_pEjL:q3;6E/k
%\ejI'9f[E+01tK3lpXL'O;m-Jh"A?/HFapS<p7$)YSX-X=8&@677b!+jcAk!q;#KZqfLWd9Cri9eQ3KQ^]*f:`:j&(S@DF_Ph[<L
%r8u1lE.?h[fB+[6XVqGd`Wgp^^OO:hA[g`Pob$Y\8LbXJhD-lXkPaXLB'taeZW"Q'lF#NuCC,hmWn1.^QCqPgBgGL/Y,,kb2:o'?
%JAWP\C3N%GV8c]=eP]m/eS9:sX2Pm&%[,WTnTQIl9.^,jeD[l`!V"AD,:=L$Is)YTeD]XG]'a"6;u&)FmSs.W#<2X4h@9Aice,2O
%*T_HB/L(n^^D6qJfBU+J/l^5^]"@"6DcCES[Dp"?$.9bmdT\hsgl8@IoHclJkQ63K)>I?dBDB(A0/AB&^qKHr8qq'LoW"(9ZnYof
%!ltRpB6aX!?E'9DUIot(LQ!lLn3Y4V+`6:E=P?K^LF!h<dT]gkat5/'1jj[P5.c',gpaSmHP:mLUthV[r+Yrb-L-*a8'O#qn<&aF
%1ht9))pEm#DF,FZ^]&<9@p.b0gCa%>Qc0.9k4Pg4'p[kXX]ckCTeelLE&qYm-l-#XL'E<Q@l.B[=.!9o8k[\!*1K8V*ONj:n^E=#
%BhU>lB1YuXN/nL%0MHr>ldn<\qQ3BQU_\'8Rdfe&,^G+"06dB5C[s8NHID6mEqkg`^Gl-5b&mTkQc=.G2dQINc\6K>p\-(-f71iH
%r_&+U=+C`s.7'eqY5+r1^AWdh]&oK2Gp?Vd:"OdA2;alEi_A$PDnQXj%;W[&%/t;/kbt!#`u_C3r$P+]QrQD\FTf/7hFJH?-Znl_
%0?it5<NR75F9'_a'&Mn7Pd6oI[G(D<%!cJOO&H`_j'/8DNFQOh*'(u-*?=8=n<'"JA`pj8BjP!*ei'<Dh!'@E?2;EU)Na8T8K*[0
%90eMMS#,.G&Cd&^Jd[koolB0(Z1Mt2;%5QZXe<>VB_h=PbF>t#;E*%BS;->rdaE)?)Ql`NFZ8/WpO?1Xh9MZhho-!N2kecg&E%fo
%/>rV:,K5B'KF!H$]V>'n2EY."2dr%F)DW4<TV^HQ8t_MS\)`dhV1L;q/W-tb5-4\6KLoej^HF%*c2et>JYNGs'%2[#!KW#O9?,/j
%6Q'+4m.XN[T'WO8nrcIKd`>'"Gr\Z_N3dKa7>>5!!0]lYd`>'"GtB56C#nBa7:&I9>u83W(3!dW(8MP<1kKfo`m\m],p%5$"%e":
%g$J@:M&SI]Nk,DiQ@-*u0=l"p>3YDKQ%<qt>Go].h&gsFQV8YN@b5nI6rGjHk9Ud5?'LIX16G=lImOI>o4!=CigmW2Bah.HH37)l
%"&jLJe))rAr]Up<r<B-PB8cEUV*E&WO`"O[47ULR+6f\IIcK^ihj38+I7_iB3gK_(+(nC5]!_/iqd6fk\NKM"X%@a$&g:QHaDW%=
%[=\qrA1K&UW7&\d#Kh[r]]9t&h\F302KeN^O7q'.psVUgei<gkN\f^"Hb;L8\]#WDE$[ZNMlC7^qVSf[Rc1,/E^Yl2(q>g6I,hCZ
%r_Y,*ZA[#V&n6cP2]cF'Jl+G"c0/b;e0oi]*$^GQUiD>t&BD$(35uCI4Ei'2iMLURRiTO?MEtqr,E642,qeeKj%LB3\CGSX&\[@f
%T@apDFIbGbci,k%8p4:Yoo+jXN=RCrqK^D?#T9g7a\P8p3GSAdNaLUW<0B:]&L&ohCH;<9YhBGuGCt3U\3m%Q'"W>O%+oP'!\0bh
%aaU'I_T`kh`ZCC?.NB"P4<EMIh:ad.ftScYQIKJ<EKF6WO7p2f_ep2kIqq3%;6Ca.D]&>W2[g_7)RVf-_&1mnk*a3pF<pKE&VN$M
%WW0,,PB=>SK1;85dgLdpdaAMUI[@G6_P"[?_P#WuY=m)P*M;A_?4V'6>&NRJYF?O\*PRu-e0^Jsh!UFA$.liC.roS>"s)F20bLu/
%2gf=`C;X+^e>+%tre^l5&]<6A)#&5$OPLciV7X]TCb:WVhnD'n6G%AXF;Xmuq/XUA]@<<C]t)X^9>.mM,hsAX/g7PEp#].j0(n@)
%D_Bk3P`S+rd"MV%480!9\V,3n\oXi4Qb%7;4*STu\U",`3-<7SEQp,lgI@rch"$XI;qLH`M*'hF,t:Voci"UXgg0g*ap:$Z_%ZCk
%IJ2i!hCF_MF-GH2OkqTC2W5S3]b2P<Yf9+5*o&XgG%WJL82'hP#m]B%r8R@V&![93)>A7QZT:ET]aC>VIhI/!Yj.QMQSP)]B_nPt
%kN?;`Z"]'@Q%m[9U38Icd0Ksf&fa?lC&5='-HY6fdL!C(qA^do4hb]adXZH"H3;SS:;>Thk@OkiQL)(QY?SC\9$N_4So3l80*Q\K
%Ig!A2ToDm^0ZQO^'k>%0kkmjR5Xa:dPJdt1SqT:%8K<_,M12sSXB^qkVq@rW49!$VJ0n%E3NuSRPErbe%4MOk2SM@[CQk^SptMbF
%?^4f=Pk?jh+oN/X*"P1u'bD;NT&YLl!/a(TilIe_[5#gUi7N5bUt4='D4ng3ZCBQ6^I=K"_odJR7QhT"8khihS-M/_!roXPE$"FS
%@*&>]lJIf]os\$lWDSlu7B'.KLf'DH-'?nNl0djofR4-[h7%,`hs$d[i7JX=A8"5!f;d/sQ-PCs)/+BS3b=WDC;fl]g$,/VVNM`M
%F)3ZAB1GiVN/nL%I*0C@:5!`6PG6s7FA?R:@UJ7g-c]aEa(1HS3\RB%ih,_YY&eJS8ge!/gmAcbf/Yc:2;HZkn`J/W^J@8oZ,%s8
%jB(\mm#UJ!Si^Ich&_%#/nWqQ:N-iXU?"esOam>C7-QS8\+*e!^Z'<K[nDo4XnSu(OfneGm0bfhh**u.oAOgY[p"_hK+f^Z."R=(
%s6KCnjs3<t_WcrL?+&)6]SHr>?;93<KC?7>M+d<Y\FkJfCgi+b\LV/R+VT6NQXu,S$FXm7+k[IqR$^Z&RCER`5%0ZIg8@])FQ7&f
%^Ep?KO0\%//fg&AYe/!b-.en&OrlnI8gPa)<q-B^ds=oa2GXeIFCH7GMV]?WXjp#oq=)oL'fI*dgMco\p<i9@c#fb#>K8s%8ta0A
%D'LmpN#$Fi1'n-@H[oEoVH1>%ddE[U>CW]8jd_9q\VXe(QAX@$&i9Ju.^MIQ;<3d?1cN9Bj5lB-Qtb/uZnUH;?YS`!T-\nu6Q[N_
%+PL"cY?#S'LND(V]oGHmh5r8pK3tX>+ALtLFmWS5?4K2S7!Sj?%^m;K*C,a)nsGd>L#BI=O2(MRIp5WnkOQ6UC);>;e+ZM.8+Pc]
%@?;qF]'Y^*VI0(YK2uTr<<dYofZO]</c+"4jd9&X/@s_P<#=J:[rg']otkMl-P6D(HI3T4B`mil$3jou9,g>/peTKuqMG0;4SBi2
%bI9NZGUISPAF!g?nY8i.'X4!d+:UL_SBi=b>9KRaIs[GaZPnLN[*1H-;HmAp^NVm(m)#rr@sO(87Vp@n4Pd@-6%_:En2/r6Ni`".
%O&a]TR!1bLo`C`!6/E.9MTf\pj(BrBrWcctib/EBAO(un;5:qH-.g&[LljR-Is1a)d-1[,aNiaU0VA0N$SA_I/W+U9:E^VEIUV^<
%^A-l@4/IBh2=m+dfTE@-mkLFMg&9?5=B-$3V-u[7cjZqSBpNXEnXKh%pmCY(:SY[b+Y59&ZhrB/S]oet__NtNq!CZ\:8.LTmh@2+
%Z?:_#C:7iD-9gY%l+.#@2$JVV?,IBOdPCom+CMd;%2o9e1qd4'BAS?XFB:C)_@VHV^_hrG30rK?nSH._ZRn\R$&YEb9;Y0lgV$G/
%]MhW89m7WE4^BjKbEbsEm\Ugud#Yb*:iqaZ#I)46ZlUW.h^Kt>-O^BV(q+9pSqLPZaV>cp3RA0mU"dqImLZ*ZoJV3]SSI#)%)]HW
%7GDuC9/^^'*[PjD`.-RTj'`<lpjDC??A4Q3!tJN^2WVB@SdaK"VN;"N!0##T"l*/R3G83'pJo_QY][i<8SiLlF(OB`],TD^fp^s@
%)E1r86"p38=0J@<*ER;Z=G1Wf>p4)8k*j\*TE[Lm5u7,e>.od4S-<qh@\LCHHc#uFC%*!$n\R^l7H![TUb_LlU_+In4N.!<B]s^T
%j+1gpck"KZDP?tA-'"337h[T?@\)TE:g\GDp/:Z<C>?+#_knIeTK>IE)^tX&+s\Jc4J<!`WF,8U]25m9'.f;eiFjR$+C&-KT!<DI
%5U2UITm?:g^hD;GpeJEA''Hg^o7E\''I(44CA5nGL`<#"HR?T#P7&3&c1r.a/:+l$ZZb!"@T3:[DKq_o*<\YP^"b#YCI,Y?luuiH
%Qo\>G))t,rZH)frN0n>9kOi4MGNuuUaOHbAR$fKud)/Q5WInX!/moH`]2ulF6Lu19Xp#i\$siU_;8**#(V31'&`sT50LE>7HMcW-
%^XZX/l6u='2TUXZhm@`o^VpsRXFc#H]jUWE&T81qWf>G@0_Ep\-s1E;L\n9A@#G*aE6JFdgONd<7*/7L%kDf#QK@U!n<Y7SN^/ao
%G`+DI_E.4,F&Bu=,$<mVH&M]/X4BZ-iuVQodI!cJ]@3_79^TRHp+_k`2Tn':r(otuH@ag*^UK8QgdhGG]P`j$D-&6a^It+-VcCnk
%liqnr$(2^Hg)PF]A*RH.f<jUPqDj"n7f'>NaEE_W73?^q.qtc,jum/,@\7rg.rg?(%SY%b_,4jW<B2,7W^Z3PctF[jj*B9YfArkL
%H-qU8:4F5GndG=G(=[T]?OrdRR*frO.4iXuFOq,pD*4rI#FiQ>U!QJ/ZONVIb8e!C&3RB82&%]d(j-VPBPq[(jW1P_RC61EpNCc(
%fbHUEkl"7rc_BI53u.5e>Dfhsl'ddKq/mE1.f/gfrUsRZ="&Mu=@Umu@<;hB[Vdn-iRa.&rc+%QBf*HHZN<cWG$70nB`/l\p4NB+
%R?_fhiu_=%Q&a:T[Lf;A6$O9^eN%I@X`B01'p-g!;6LE\)XE]_A`FdOWY$em)730p]7.@*Zmrh(%4AJ$Zl@P5\=\375T#gG%W:*Y
%+l1W@G.5reG)!E-olQi>^e=ohq4.Ma%*3K2'pgnV7]]u&2``nr(1%=LKdu1X4(A'e*)>gZdV/eS3,UT?L(D6G`g95NqoR;:&D.<S
%6&W^ZPDQj@k=8j^Rb/"Jci">1#^?KSp#S*Fm]TO*Z5\dd?UZ)#V;ilqd@!JN;9,Wo?l\Mj)]_+%h^G*QN=+2Y.&45!'@Ug'Ie>Hj
%^Bp^E/%'9FO7?R!fU%6%,&FXr#g#DJgd4G0cVa$^2_-nVBA*^MVI(sJ`R:qjg1U"lIetteW;LrghsE6eR9"tJea-JIETgJJK4_UH
%mZI$A0C:]eB0%L8Z9Zmii:jiCF2qY.'p+_A$>$6:<)M]5T[gu"HM]g'itY`ce,6sHW<7/L<;:Qh8:M[G?\H7?GdW'oX(fuTbBt6s
%\c"9[i[*BAJ=W?e=(-8%rs!6m!Y:*QQ2`nmKVJu!"pSMD;@bN':oe4gNcH@7&rs>#>p&`VAg@(0W/fMF]@1Mb#3T*<VKAe@BnB`e
%0E3,m]OU/cIT>`:'u/V)A,m]Y'q@!HcH=,$J>`59eS_dp3qEf&&Mso7LNai#[[u?6Mh7/GlS_TEg)4(?cYP*d#c/E-/N$_nT\P=C
%R>%b4VtYVlqHhur6CZM5Zgf]qE6o)T&bYj#/C'O`GrgLj\IfKD6S5W\JFM[^k[.]rmFc^e)RqF:,3*U8<Go3cMJ;IaUEj1:^LdsY
%8fWiQU]Dc7NB20,-RQ-,"SFDTPLfP4nQ\As'9#R$AEBbncP7t\Ebas-C-S!S1AX@U9-L"t+#TK'1`K<1_rUqf@i.$`-_V!Hp$;P<
%EU>T,LmkGcFHgR[r/uL\;s@>!a,)R%"u]cY>Gl=S\dG3D=NaF#Vb6odEDa8i%eL]492&A[D#e'M,;Btf7(n2"(fCp-m$3*M`K'5S
%>e/R)*Ar/-rqRTb[E:M"*iaZFV]r^7C,uTfUT?tNC+stCG=%uA8.\MhLOSQj)`Cel]'TL)!R6B9daq]]4i1(nj(*6MHQ!s!I#jNT
%$o+tU3B4k^.NXJWJ3Dd.LRh&8HHpCFg`sLB@T_lNQ2QhYGH/2cZWmUuYhC$Z43()]2+Njmh`e,`CAnJJA*KZ:)_*i!/s\'[:'Oie
%(3WD(-]Gbr2I!^a%0h87)g+;V?!R;:aX0l"<FEQ3LQ$[5$#FLrh"^30@b"L32!#3]9AIMbb8o>5!VI%P,jRrfhWZb6_?eh<.)R.T
%7'UddONr`A]GT!%[#b4!@k`_Rc#ZYC3JpRX-j#^/kB7H+YlQR]'Nkl7nAEL,RCC#k_OF.XBImsX_!_dtch;8\1gW$^6Y1'.3%5+"
%b&Mj.'S1M-q&.t^Ml`;-MiF)R+)#U5FmGkIAcW0U<2*1_Z?6nO0DfMZ2FoA;DJDr6?`"aJlhblY@EgnQ1.SdbL[E@j..KE'MnIkp
%@fhT0<&Bm:L"6DMY2^Mj&%+\oh$tsb`dLu+gOM#c0Badu?4VJJR?*h'\^IV!@Pi]?(q:VoIV\DT'f,)*79fM&Hf!t+E6]>U_k[dr
%DDY#/#'9WT$RjHhT:/s`q$W.h'>GNoJg"0CUKR!p/()':BenXT7+I&,WX$R.3cIH'U=R]EV-Rh:90Y(?0oklL1GS0S>+^&bH!M<s
%Zd#1?c`kmq1PKiCX$LE>%P;pG+a,]k*f$j(:ZT`N;gmGelDoZ4N1==@FG"`A,HRCqr0^]*!Uj1oU`6B.>;\N-d14!D#qsi`(E-qD
%mZWR=Mr6#U3CK5qQ"oC,\sArZ#52Gc+=r4tD`jbU=!]Z-(h.E:Ht?q$"2bgsg$=L,S1ds^LeCT7>]tH<0!PF!(>lnco;td-YEq6L
%IkKC?6r@u-M'I9RD`I#^kg:kI'Oo_77=j6#7#alhI2"dm;K.B'[?b/hH]kCKh#8Mg#h2;ml1*\J]b/3i1R1#?\`C$8&\EYQ?.9P$
%1f<cT8;^%De[[pnL.-Ug$%Je#>&AIKH$AReAU;%=R_c,JRGNJ(6>+XE2qS6j;#s?ik\='jAj3A!X'H'A!+01?O@HYoqhH.&n"&Rj
%K?Zm!;*&DKC>^K>W:L4hIU1^3!<X;![2W@UW-<E0b!t;NNG9c0F8CZu'FK)KcfK^V<E`o]7M-4Me%ND^U)K!M_^q+YI`-ju6SO@q
%=@X_^J(XPj@`td\'8qirRJ`NH13@-iW"M.fI7"/F1gaV!$9SIMqU&uIDFD4\jXT]<oX/fbcVSF1TJe][HY\\NNd)/Ze\Z#A%%fo%
%Zf1om/rU$p*h0Vl+_WMZp$u6cH3)NR<_P-dUA`Hm]3$,$#M!aLj1-nH,\&*Bd_E+@i[gfdE%GA!QO5kVRS0ZqiTM12Lt"0Fob-J$
%^pdD*%@;qNCJ"^,PL3IR0@mODeC:<O]c7+k3>e%<Se2p2aDelr870b_nuda?8H6Y\\K%uMSpt@,]=<k`G5?8N!%#LJU4JdtN4!=h
%cUIdF6`R%[#!f_<fl-(bf2kX!27X,%-S&m-X\'$aiGIA+^M)gI.;2TCfu7u/7k4S7Oj7\BLA(s*YJLQj)]ZSk"@#@Pm:XqoLrtU!
%0n;t8pIkgXhWl5WJc`]:(Zf01)Mm(#BW8l\_e?gr^$PFY<#Np8fEQp>BK`sMHnd7,q&*^tWVsP/4eR.VXS-!,$7kqC@/m$,408=E
%l:'"$WW`/C/uHP`2/Yhl^r@S3+W%"FO_CV:5INF@fspo,TNs@8Qg("C)&\OWJ@)#%D.e<f"SGICa(9D?2At#\ZQ+gc/d9O/)8D.a
%q5+@H(N+'3AR;jF@JJ[@H9D`;CihI-0P3'o'*YJd#n:eEfE_G\;Wi@oR/2<"!Pi+GFm+HOVh#;BJkUm28j?8I\_^-;<ol90TNHKZ
%CZB7DJFIl5RH!%"@glMW!u?"[lc)eT:o0`Iekbg2LYQ8r5cOBRX3qur(t,Gn/m^G:9`koqc&nC-"#en[cPlBd%/)>ZQ<+@YFhib:
%%s.qZJb_,Cm`/g$\8u\9Q//3Ek]!,9_U!*c_(?_k4_'if0jp-aBe\GV=!HAc`SUN9T?Tq0U.+sA2AkR_%uuCE*G."dN\=:?d/mme
%lCW(a#Hau4!jnYQ#2S5n>15iBCnFasLG0:iF>T@;gpmuoBi'^)9CTit:2fdm7H4p_F$R6&o'8Coc:)CNLA-!=D\o_9`eF[':fp7V
%H\-DjrrlDacD.%S<_9'KI:hqEe$"Ob8?i@.mD9&D$5Fk,q7Yea\gs(4lH43WbZ$Ki?0QYs0+%s;pJ7BJb7!(N]qn_YWqEm+GI0B@
%@4lD.Z`U]?G1q8VqeU9L=i[SEDLVHDDSPY3XA5s91k5K#Q-IU'?-[%(gn2Z"B3n7sZ`_q_g&;`b"#*m<=mOVL%M/;;R,$"LT9$&B
%0_Gd%9t4tmB>GKr1jsrZ`3VCp^X'd7rVMgaq-$sOJ]T31(//r:.42O7nG\3k+sosIbe((&-9TLG@,m==m`r9dGaa&>aaF/qG!D=C
%#`/dgC1;C(l?(4&Vh\JYIAL%[mk8(3:_h0ah>&rkbj4nE[2?9bA+DK(k?#A]q*'EA55at>_)OGk;3IpK!&n-3U&qC7UX,!NfcTSC
%ai`SV2R3*l\XUp5)c%QCKn]>nr;QHaeETZbJH>^4o6KHehVuT;U\iB8Q="g[0@XdeT-cBj*14oFAl"BIF`Z#6^@uVEqt`e>rUjs;
%H*?nb[U3!omJZkT+,lKOHsu!0p1-qg"KLK(@PkC[ooWeDK@:@$)1-_6"hc]PJUK\*5ab^pnm;BrpKrB#r6pNQ4L'\ng-1$GlambG
%%LGkge_X6Vr3Va<f*^t2m,iN8:T"RN$^2?71m:$#rag!Cam%iNl,L=?CP>RXf>?c]q;J[Kmjj*Z6q,@<UV($YYq@G#T75,<)TU[a
%8#tt1[f*N(VHA-AHuX%8F$kHNrFsBA>M3-7ZH[aPd][!cV_;@gkFQd!NpNV=MoGVN_e8XOjg^7n83""Q:NA,u5BU!j*3C!J/T,tu
%?$LWOB0!A\qWfs4CbDj!T5UnQC(IrPQgZ;_J=k`]$M3,TO3?kNp&!*@U&(j*(91j/cuBiT7qTJ8>1_q4^!AZ7-=4@cfGfhJ?8m3d
%='.2;f(+-&IdUA/raFZScV5r4c$qL8$_*V]c8&F@oG7i*YO(>O5+eBN.+PU:jlbO,g#][Y#]Hc2bs$R'5tiXO_e(!<T#f2p^&+CL
%Yin4m@;#!p&NP/M5%A>JFf+,4^[/H$e[]>[fjbh*c(gA5Vm@&cT,4ht&!sc2pPcZ#m$%UIGl$s=^eo'#;-V5h4KX(VcE?LkZ4C7o
%jg&s2-48F]Dn`m+c@9$nQH^GqcXmuR/!%#?D<Fo"D`^89SF#%SRbcS=<_P`(OgQ9+I`XYI5qD7bgGH7nWqAKdpcA9u]2YN*[^(sl
%h`BF<:L7jMT>#SuS:+GikH]f\#Ktf[a2ru#b&lrUG'3!FZg@:_k,7SBG&oG9Ek\$hDYR-8fr_/nZe:m`HTh8k0OMriX`%Crf@mjg
%ff.`*'A7ShLF_$g#EMXlbboZgSa;\EePFl%qr2&XnBLB-[f!:R07-ZIZB7:apmpd9[.ZUd>C?H6gXsfRA\XSgIa<0Y)UBe:l[F%e
%Z<>hMQnD'-:X#?AHTa)bI&]ob\#6r8BUf"LKW/n@!6g,k[eO=Kh7>g,Z*[X52"BY@s(LCpli$R7ilUWF`9N\Uf#7FJp$0K8VrueJ
%gZ;.F@^l3654Q5UAq/gR"q?"'=!o=)p9Fo:LG]'[['X^E<*hoo[E7RoM<9i1NaOpB?e^bXH`_XYe(3!3ak=hqgWB7Sqt[%*^3:sD
%ZoL)0f)57&UT[<\PL"EeI@+9rHEfX/Hr!t;gj"2BG]Mur.r02*gZ/+OpQMrX-U2t&M+N3;DbUGVHaUt6`li9#B!T-T4IL"]kE#(+
%Cd1(oGQ2+Aptjem[?Gskd`ZS'7.tcjT(hL-qn4@1S(W/-Ac;VAk@T2BhWETtEGtS[qshA/\](t'T,-;Mh")=05MeKUI!Kc$oP;'c
%YM!(%9kB[&NrdJSoXh5bWO_Hq:K.+U?_=Vcq73Ip>LQBF$JNnaeCr$FPGufnO(YBaSD:HMpCj*A;dZQ&hl"WS.e_B$K<I@8c(e0R
%3a;<[l2.C?=4=_E>'&D<-C1MFGP$sFcRS`.!&M<#^NhiQq<kUR]g)JbnaqT<CPUBQ<jAN_"7^BB^AKlJh4:0dH[iX*G5hJgYjh(p
%p#^>`rmIjD:\P5M)qOu\mCi)hSPN%QhLAatC#8m<4k[JtAA=bK?e\[I\DK;pp(Xpnr?mZ41V"b!h2LaSM_gF/\Xf.ReYRIGS"M!=
%p?R(S1S6l,V4$n4k/L*&T\2,l_TRehqh:\"]25$PR<:DGT$0Csda$+?I:$m<mc7-dZgV37hp-[fA7*V_T'R\hg$_pB4IB=O55-0Y
%rGhCZrH\59K;[%tdg+4DHbk>9dgc>nqaU):!>osO*h67pIsfUW*.49GSNZs7B=NqR\Y\I&LNCXG[A1:7LWe5Y\!uhiF8eRSC@9iR
%S"&_;loG./iQT,KiM!Nf^@h!CI,j8)Q1etSiHD1`q=+@G*V3_(X1@f*G'Nk,I\OQ+3^5k%A8^7,SBoOE\%]VJIp"pLbeFa^bk\H7
%hJUW2k&sP_]>l##gg&guB$Qu3XQH+F1_EFLjdV[I\MkIgmcFA5YFk!X0C%)AM&5<LL&'Q\_ZdM3.2Ifsk?f"5(H^crLY"2n/:]^;
%L$q*1%^h^mr$0I64aF%j(&k6,U9cYT]fBDJWu\o0KiSGoqUGAc#(Y+oXk<mVn_WVh^@#d+qWilGk_FJhU">q*]J6:t=7V+9q#6fR
%Up3fT?5C;g2r6^=XVp5.cS<.P9\q^@QhTdBD9[MeMrO&<F2o`B0L'pYSseIoNa6G[mC!4,XG'Dhc?fE0RC6G7T:<(A4h0+KK(o#n
%<nk:=(3?Aa3l6709Sg)cED!lMfU`hSq.!-HJ,$ga+$:r6[9`asF*k=!Y\3FnmN'r8eX<H9h0VBR4SWI?N]10K`>NR\bKG+TRjZ4T
%;f4H63:/Ir2OiH>h+,e`2r0h>K&qH+ZF&^o?9\8K9l<0O4<o*]it\HK1qcs@-]bpD_*&Y2m\>Pq%k@$T/M=2$A3kW,?!D[uS2;$4
%qi@'EbgO1ke]*bP>[(K;?G><'g0ailYuH2Lir2irfA8^>AgYKlB>neS7lr)pogcanC%fsKUCU]RcTchbI/N%kH1pcoIo:T?nE/TN
%a3>F;I.D7DAa@IujhoD?[U)."Irb$e'1LhNZdP@m3^6t6IJRKTp%diqF(=C4^\VpFBrgKFcPEt@(7sV.oDZ)0RAoPZEp^6%c[P\;
%RQ(2+Q2F8MrGhi(n_9i:\,6.riVoV$D[#T0[oRb,e67PZKsf#hZW3Fr0ZDhu"1+@R2P(WW3h7)+UVjJubP0k9bKJ3)<dXY]FtU9%
%q<^b&\bUAhDe3AR8S+aV5+#W$r@+4CWB@,m?bQL5>C1L,iP\sV$;Os3*c?2UCY?\[a(o/@rN`jq]7jYD5#7G%f=oSU[[q9kbMr-T
%S_!&sG:+n:T%>#_O4PKA^O3>YT:Pqhrq^-(\Gj`WCV?,&)I"kd"I!m[p@_9G^GpKP4F&rnrNZ=lnV8c9?@qA.Jb#ma2J1aqqi/W$
%#%#BYZ$/G4@,p=ma)@HRHM5VGP=hOY\c96MCjmlcA[gflj--UX^%-1/XdIntW]g3c]Ude^?.rWaU)D]--b9ht^TX0ah_@n(adr+&
%T=R)hSM-O8g!<1E=70g5imkIr1Bh/m*R39D]/'gVg?qo2S$W"3?$NqbgNrg-D]tKs]skGSHarf]Ha^JWSbP%Nn*WDg[(iq,Zb:kD
%3BDQdT_)jeFlDB(`Rc4*T"TI+g0Zmh,JH:khe\lHfmIit^%1RXCgkWk0Q6R'8$Cg!E2P&>[Z6r\]X+5[rq:5VDJ&.hn`aZMrS6"O
%cMQ_LY7KN?rb/e`Z@:p!_rAeXdgu<d(E4H2/$g0:oqV55O"\c<0-AAE%\J-;I9apD.S`u-I/7s;I.B;p3B%CT4tgb)*e&S:C2`-R
%A&%;VZ$^ohbBETsd?fa^i:TD(p$7lqoblRG.(q^1q`8MpGJ=pZqWZTb+$1eKhYQ1Ys66jKDuC3mG4tk%qTc.ZV;7]5_`-[94,9pC
%LV"jVX7HP2PkNi-a&:sZ\mMlf*e,]T.VZ#*mEN])^j;]2@-@'86;T6dm2h\A^R'thhnJCtSK9pMO%mMs5Mk7d4ub`C2mOgnX8:8d
%c9gpC8bKI@W`Ym*QR]1F07L"P[l2SerFYM_f"^U#R]CjP*j7dloqneOdl5HqkHt2ikuSt/]Q1(A]6[;CGZT5iHhM-V<r6@-^8Tq]
%na>"1md$M1V$67+j.V\&1gW:'h_n4>T0-j,g@f&uBCFboZS@ep!FWXR?_</CDqFrE<n>IuX_52jDd!AVS@/(We<0KT:Egn<Lj?GA
%_Ne9$S%s8o9"1mH@-1_IhOs>*j#tR;s$n.94ab"GnuES?QcF`IIcoei&[`&'.9t0f26[r\HC0O!Q\CEi#!_kWA7:#/WUe;Gi4%]M
%H&S?N.Xh&/m.SGP0&5WPY?(B!%$H<!^SO,6W7XhHB<JD,_TVC%(@b2e!^0`[k'LHXGtfjhG.`cO\/Dqu:s0-gh)N>g;>nol*_aPo
%qF7"W'S'N)RknBS04u%V4V_'KZid8s3]q>7kT8XsM0)P\],qjEHe\!%>HR??[Wl]k?T:p#UAVO;X_u5Sd8Ti:kb%ll`,7N0Y3EW;
%Y]"G_e4n;"B6t"F?&dK4>]dn*lI,]Y-Jqe9Q,N?kQae=Y0;b9FlR+'aK/r%,3EPEV`\8B]J1MX;3Y\=/&sUm7::FIu^4UT=odE7G
%;FsOgQ]&oL#r?B2*jK5Y&)RsO@D)rm'!ZW\+,4AEV@&agQ,U_-C:2K+#E+LYA"+qg:H*<gDm<c%lbMu7%eJO4G_Oq69"<j3eV(H:
%\bBhFXZpRHK0F'@4XJ\F'g,OlWp=/*qV8O*T!Gs;5#RQI+.kd`do1:b'&YX=UQjO!poR<(j:[g4W;IV$SbPo1"U_XQ*b:6f&C[^n
%W]^%Aj_E0-]qV[-baEI9aN_PGlS1r!al@rDh4-/qKc5Obk4)na]H`gc8B.d%jZ&!BU\E9dAUDg,E4BkgQ;HtJOUsjROjI%MN7tnd
%39\]41ZL_rEYMWNN.LtAV.3oo0p(<fi-;qUCi\HuSb$)!=-F^Kb6o%F4Hc(Y3DHt&q+c.nof*[]%[8`YGeBU`[Ai\XLu@5R4'jSW
%o4iop]<QEEJ'?>L1%MP>^oYsi,;pN$V/.4/Z"(3T9Ihi%8V\dXXb:nIa6HMoM(Y]jbnI-*bcjg5+_'s1*T7X^Msq_$XlS2^C+J,[
%!Ki&;UcVmr/'2F<p#qDNZ^#Xe$Z.3G2Ij1YP^c\+GbJt!a+C[E@^Ul(:Q5K-Ah,SO@4`jADp5YQC\KKHg.F;K$m]L:iAVZaP67_Y
%c(d?ibZ7W!S8BPmA3[AbF?=AMacr56m't:RYGXg+C-3c#R&qWR;=u+qa)3D5e(g&=8lluJA,9Sk@@B1]F?R^;WRE6rMoDnpK/9Np
%@HG9GdlBc3pr3<7`e1^1b2Oa]K"qf!hDV$@90;aH$<G%QfoBK%r'2r^EOsk[E8<K`GCrf67pbm!$L$+@Kq=ns+l0V(>W<_T*Rn-Y
%n8^D2m2\1LMQ3@+ZX3[`Y?&eYUa]>n(F-`b!ma.`/t+$:.lLT(T[d7^&=$LDf.U4:mDVL]_:WM0C4::^&DEsGN(uhqq$Ju8VG:TS
%q^[o!r#m)b3BLaV6IC:\"8(K)VYq9'NIIli?M9=5[s?nm_Aqt6<V/rJc`iN72/!Vp!CN?(*jmXN9$cJZ%J`+Wm27OdKoTeR80k)P
%R`j6u[TL?ln?FXa1ifIeUS\6T7_2iTO6q7`6+YjqdH@JW6Y^P%UT\4MPfZXie`EZVk#iG#L)I9;_mK2i@.`H#79sejU<CdaFnru`
%3i:*f<0sMor$LZKP6_(uFSR5_>e;WO[96>ZL8L/7m-(%$(,(/;O?VSo.[.4[/oVbu(p:HrC:T_s2L8?3Co\sapMLW8b=c)^IK<7%
%1.LEH5<r?]RR,7r1B@m4iRKTDZcG6f>aM'J"7IC]2!scFRI6d1Ns%FeF,k+[6N&bphU;u5KSY:$.MVHM;R`N.Wo!`)rQkLoN7lFe
%\+-<cEI9,GqS\'$d(psbfWAEPY`(!D6):bZ5[uh6N?N_!:1Ff46!`]&e)6W"(FIXH/.9$jZdIfaGFlpj$+rP/a^Vt\]#7>X<L6iF
%-TYL<Aq;8TdqY89J4jE(0Q'q:7cm^g/.t<O\84IpQD#]0M$2DG]I;7*1Hb^P[dhQ%d"=s7CG?2c8rec$>pgU0Yu`sq'[c(Y1S'on
%1,EB*G\2sG6cQAd]&W:4jB!%O="tC'Dd"dQpVQ="0@Nc`T$tR8C9dWPLp\m8O$rL5]u2S*+32,a4ndVrao3I#Rh1)fJ6EkB)0*q&
%F1k)d<E_sCDB+I*EO7Snl3N>k`(#<O<19g?e);dX9IhQOeL)dU\*4`Ee^j"'"U`#KIN8BGUjU/b-*;g>)`eo`1EK"k][bI#E0J:o
%S8V[^[A%kE:c^d;cl@-X_sr?a$:\@l?NL<U%G]jg@<+H=leE2B:H/"&7[_jPf>*NG\rqR!bSfWdP#l2SPB&Ls(F#@k\8H6$X4f*;
%7GS[=-$c?jAm&!BHH&`kaDn-PMuu2.mGd(/nUE)ac]Q-6+f_E;j]kP\3Q7*f0*BN?(9jq)ftd,/;gQ`SFZ9O>U\]9`Cmi/T+]O?h
%@`l,=Bk^%=5C@XbNhN+H@k">neb:gRHEJ"ped&<>`0JE:"i*dOK3`?4[6;QOljF2UdGWiR.drD3A2s?>Oif?rS/]rm8]HBQ"Ch@J
%(]7T1pp*`!()">42!oL[>rElh.VCBWam4rj-aII3oUK\nYp!);lStSq2*Em!hi4U;R?B$X9G'H`W+'9/>]J$U%r9hF<npR^RqgST
%_u;A"4/T](->fNucT%'8jcl%Z>RqO9.j#nWJJ?.B9\Mg`!E;kHFSUr+U1$2[C$`l\b)jSPoaE?e'-=Dh"HVD"nTke==0u%an(i1F
%-eU27EH-%l;%>iCom&3q^$(@.GOT\)+EX1n%OO9P'X9r4Q(]-1`)F4dQ5U5gj?rC;GWd)J?I*S0\9P*H+i6,H/fDLCGDqri(Z@CB
%h9)m4Hc_9P/I_^9P*9/um9?o62&n`h=QWbbT*7GEQ3]@Y,DBC`>YWlA*?T#nodFD+C,f$^kMiam_@>66Cii2:ka`Nn(ZBYYftmLU
%Z\*3dRiV@#Q4A^8l_M,^V)Fb4PeCTUqZWd!.<EOkC1#XWoZi9Ej-2MZ,,Dmdee;BBVXSguK^eIOj.bg-Gl@_j.H).2fVuRVa4:MK
%[tW/(jdUPEU.oMJG<$>m&s,B*eW-fmFsfI3,'7K`(n:WQE[-5HR@Imk=CI?KV@;-5Y(ip1/19U?Q5u6q4T#gZDaTh9"r]VYkk4Ql
%'d::'DYCg8AouM!q+0\o+L5_1Qmn(Le$DcLI=e)"I*uU]3f>Gr%]U$!B.J@)AkT^Hg+emrQI^h&QK@d_U1G5*=Ct]:0?[><0pYss
%gWM@qeBY>C19<:Y9VW-A@Yd[CNQV^</.o28U2>Y/7a'4H2HjX;0H79@cEgAj,!V!lCqR'X=aWl">V>'$A`m;/f77rV*XnPd/3RY0
%d(Z@J4qJCi$jYq.,1^a1?>T2d+]i&#!F9>28)D[RR$2H&-=BR>&N]_/ecQe_/5?d4'G6T<ff%]d'rqR-W&>Z"!0=skG9K:,LO`X>
%+kj@4BjidN+`T323Ne.6Lbi40f5P:OlC$i]a66.?dUA:r4C76t3M)lqR[3*0FNIO4BE;2gm$n520PCQB.[Hpha0L4Y%LR$R/IQ-U
%E"7F#0+8<09T`2gUUQJe\X#OO2%A1:EsrE7d6!$moSf[U2q+\2GRJ]p*QbZAHVE1WeQ-Nljpq'r$>%>dWNeYLPQja9JkM-G%iCmn
%2q1"g86paMHCZ`_.3_brV+pA3V5CV)mm^thD$*ht"I20_0e3Zb)9T%F]9%<`i048M/]8;>`t/,gf;tLH[?*.:f6_8U1q$,CEls>!
%EJIkeh2;]AO^@TXO6\e6#*lJ!Cn1\NjP;YW3Ihag)BZ>TbVX?$9oM%bfUt7$:#O*l'D*2<W4dq:d"J;*!uOE%R=Z1Sir'7i2F1@/
%NcbOe4I^F380#r3oPDkqS<1>pPrOJhUXI$BZW(+oH(IWu7aG!NRnFK]31$57dPAK,<*G$%Sk>MQcV\tR*i;iWTiA^f_lrdSdQ)f!
%_<D!VqHVh?c\68O0K^k5n*%IXANFl2AQn83Z23MqLSF"Rne$9FhWq9ca8]ndaE@7>"p4XrQF]4(\iluV=aPp^*\rnJ6^nfl+\Z+.
%8?l_:-*oL'!`o*M0mbCNA@VENBnIp)PmoP#[\5&4&@?iPoMgk2I7<BA^*ij4(.$A3i<_L:?kB[,N1:(&qCmtD[RWfWl-P(a'7jbi
%SOrQ,RQ0DZP:<%+R&?aYlS+ZfZ_2[+kL)1">,/M]5%#;Wl(g%FR@]pH/^@D]a=7XsG1WQrBjlGD.3;WhatO4^bP*0;@#MT_30F\(
%3?7OtPXR/q"m<_.ab3[Kd%N<qch-j1.6\o$i3$;JGb?d&H!\!<7<fYi%WgaU6g"J!qBhD6_[AthY@X$9/QQ@a3]@jn=/4W1TW8RL
%cj+a2,$!J7LbND#V&;FUL1ps\G6mnM=,gcGrin@-JT8I\X#.\Z9Xu$>[qo?C7B_:@N;!Y?1bai<5BO#h8Wu(omKQut"jT9N1^(A+
%\r##G)//gbVUp<9-<[sj:^4QE\@r@]#,MJ[1@LYSi3jdB)D0RgZfBIW;]Afjim06LYN'7ufp7,efasbG2>QI4-GTeX8;*Zk6(2C_
%]LG8DM&q3Q*,P>CW"&P\#)kg[3Q[7OZo,.L>QLA4#SBl<XsEK?)<4VV$^%]U=:DLn@Lo@nElmNJ&f)iSm"k.6eJ;hJ+_tT4T0\'7
%4a#I8H+r!KSiV65;Y%hapuIPHX@da`]XDP://t-?bQ(]&"&OTY$HeSqTZ&>o?n<A"#9[K;08c-(HCM6K,?Ibg)<!tW@>\#5VF]Y$
%D2:Ae#fhd!,ZBjM:+;'0o`.Agnq@e&O*mTcP%:%[RV9LU,g2%#P@`b"Q42gPY16tlg:nE4>8"Po_?H9O[&YQ*k>#8FE@D_`q<j)4
%!muLu"%KJZjOFptW8$5_[gDJGCk55grRM`bUq5(IL3e#"SnZJ6?WhO9g*jO*+*>'=mjP@On'/]$CT=sDeTGA>c+0%<.tPB9EQr&&
%/`sBQj4%>/h"R),hSR7g<,\UZ/(Ii_6#VmTDrX:r>b7O21&U2'4qcUjEh8<JVlPGC/2Rc!R!;7;ARWZuis54g%G]Wtq^(HcNe%n0
%`@7#18c6fWJ1%N=L+EYT<Z"Yd_NBc=kf=\E[mX^lbI+!Co`._0Q[S(ZGD@JT=_^KmShi4X<^!8+"cfaGbG)S@*jRZg+I@)!?HROG
%7@$mgop;.(n?U&961k43jNCYkC5)L<ba$Ok"eN;\:pLh-d#T)h+l6q1;&L;`HQtW6"#MZ<p<omc07h5>Lbn$:KU6abgP^oT^s>4.
%GlJ]iOg%2.=iQ!25UH.M]_4bG>uK$Y=Y+Ep$mfr2ZZ>+6KG#XddXl\Sogg&,=tIjW9:W5#bD?gp\6c1m8Oeu.O]`itYa6QM77qCJ
%ZXSNEIBVU\^ITK$%<Ze7dui\ua3.VGm_oQC6ou)d:;u:Z1SgrVf*+,NV$f^l\2M_!L6=#+,A1,E*g9Q3iu3Xn'@]4!-//<D\97Ab
%]=Pj-SJ@%n`e(Xjk_Th-Zgg<nM[2fB6+%_$VX3pE5q<V$bjiM'"DYo-YH]31UCmc<`S'1MLkT'.i2]15VX3oj="=r:S7qClMf1qn
%Wh)8Xj%.Nk/RWJ^]Z-hsDKK4h"k;R$A3+&8[<mhQFM*FmoG3SR=:q$?167<kFM%nJX,DkVFM%l2/]WaiFM*F+pD/nU=:t4Kb=cZe
%lWMIeEW73jPg3Cp3S,T\2h>0Y=*TQ3?GOZ<(Wp7XN24I[&#/Rm#"u(7JO9AD!hSEF835d%Yj)d[G&\Z)lp.B]TIb%#j+1t,4AQM;
%TMHTL7u?^t?1=cnSKV+U@4i4L>P<0+96dh]a:bp%9CX.6HPQY+Sje/@l^kMR,ZL*^#Xd/Y[+aTG[c!DuaTLSIZhGhPdQr*@rf0LK
%O6D_;B+DAH5&';GVES_253\Iu#25^*AS_aGj))?'=4!6FRGNbJY,0QI^N@!^c7,,s9[hNhX+U6pj-eUu)\$gMZ`.F!/].p2X0c.1
%5D+f@#*U*#2SqP5Kk!LTTIC==T%BBZgqmI2m+.Pij![\>AiYL72=d'[dks7Kh(qH"7K]G8B])?=4<bs+nie-sAZKni'qge+dT/WS
%8KbgW_?R[V`j!OmPJBmFVU:;UGrQRV'2`V?p#]qVV,.eJ*+<k?9bAR#GiM\XYY%EGAK5.N.P2UKb_HJ!>7&cPGn/e$*>F-.-4Q^'
%T.o*]:;^D^1919Z(FJQ4-.eD@@>C%TjBV\?Lo[eI+EBMmd_hm`%K_S"c)&&D+bL1igeI2#[\Zk?2kfS,;g5a.C7&FK'="u&2\Q:i
%\NG+(A2N.m@lOmQ1AJI]W\'X%TLb<+(c'Vq6fK#"$g?fNqe?@=`Lu$,4h"],]$5,O/$PI&U=FMAY?Y>s*[Qk-2YO29/cj#jh2]"o
%T.h/GD+^.&c>W4D\lUhRhm'/m2b6Y5a=&o_`mlno))bICS;O:[_`acl3?qMPAmA()d!\>?4j&2IM5oeP(S"D]SZ:pR:#FB[#,37i
%6:EF_ZPBJkWL42Zq]FG6Nj/1I1CL0&3Q!O2P\ck8<X%O'/[^5N/Nnd,D1p@[0Q'<gT3/d[EGM,U4oTU/7FTTRh4;m_Gs(RLV_(EA
%EW`]1kj*,"\;a-5P._]^NiPT[9M2^+`mnN/:4L'H9N3U(C.tL>0ia.2>.eE.Y]WcEUm^^c(i@2FEX$5NbTLbZgQ$5#!G2W6.&?$G
%(8^N<P(n#G?0R61L-52]$W^h.fT'gA_+W[DUpZ:D:05o1ejsFQrd9CKnV4!m<*,s.nrFiqF*VS.7TWojb-gQX7(,JKqA>GC04!$A
%%mA6YAZ<Y6V/H#U90G"@Bo_1m-asIt<6GnrV4LkVWO>L.jW?W11S2q=$]dJ0i3E-cq7.t6r6el3EjMsicghfXNQJ)?FH`>tEjILV
%5j<<A)F(8,l&KK7pnM!i/8KNQ"eErH/:ObApA0g8>1T8s&4dOBV.ePFC<kb./GuU4CtHZg9:Qt[%9^-[S#?bpU8P,->_Fj8ICMl!
%Ot#7._Tris<Fr["ICQe4a2n@+&V,cuPBs+[!+`V1.Qh)Z^S#@cW3G3E#GS?4153jh[hWllSsM@Vdl@4U$W^8^C<+=%3[HBkOPDK(
%iW?e,iZbYe%TE#lp2)7XMhc/@BlR(4i"JtXTcrQS-JmUZfmN/u4iqR,L+D_V!\$WekqYm>T)_rq?m+U/8tf=!n[:C!E4G*+fuSG`
%AWEm\3SPbT_ZAg%DGiiA0FaAT1`Tf2q&51sc*@bD%:(n[ft][gn3DnpP[^hln=I@]UmObPm',f86'>]2%((@,`T`L!5((9d**VAT
%NBbVchRETQZJn&06%M.@>/6!C)mR"CEC1k_^`-<kK7ua*=hl9<QC]gR*AC%2d6V`*/[Rbd9@,R`OY^i4,_b#1WQU?]$G#P$V%)@l
%YiAm5h[[gU5a4BPpkdKKhMGHG_q#6-dNk7Aqnl5[%?a>O#-mZ^>cK?3KhU`]^LiSI&hZb9mAc/<r$\rg'pDekr'sjN9M:4aH@Tp%
%=UIB\90rt3#p>KVKd`'q.$6D\Us[X].]p:eaS(%pVeLp]))5cV/Uh0!bS'j8nrTJ!*O<?!)_^6'JZUnL%NH2>fT<FE<3:PN#.HDH
%-/;qW_)]M5-S"1OEXo$pH!:knfc]B'L9pCW3SRL'M6V$"0%36q7\o=3#iecVW\1VCTCfK/VBoX(aD:F@[h6em!c.s=OJBie4?Gle
%d?\&Q8#jPf88@9F6iS[,;rfILiV7dpDXYO,C:)C?O>ldal6oKql;hUR(uaS*4[gd$MK"jm]g[T6=2ZqBMjU8gof#!NFQGsN\@Ed/
%#17k6r/Af8Y&H0LaFH_6YT4[$aTDpn`<k+l4fNZ@^8]Mr7T[J2&)+[RQhl$$ST0E8=@`W<TJ@K`SsZ?gZtU;jc:_Ac*5)'m[/&WR
%:?Z(&@53fq9#l@b3lk&#cOdXsl'+*OJm0bk\mUQgJKbX?_pC2i#]:#/_'K:X32NB]ju<uL3j"6ZkSi%*B8ph7XJu\Ba0e0k>[Y;s
%cXd,"]S%?=e=8-rH'eoLR>`c2?I#=0h2&WCas\K](Y=/@Rd04r\\$\:Ru_7hKJ71pC+i9ARiTAQ</MP^cbL)&&!Q"`<=hc3VMXJ/
%:$=@Z3$)DiNgp5^Q&^MXW4#CbBe3pbA&MaPH3#r0Cm+]bD8cp,]GQFKo,Mp?%_IV97`]"V":j`\*2[T714qCm1AB#!jD^IuE`i't
%_bL_tch2I\k>^+og`Sp*Gf:#A;i]&@S;Z:3edX['8E[(*[4m$m32]%XW,#\[RjuJM@;siZe'3[e*cn+>.R$6"QnG#_c[_jG%j67-
%?)SHC+=Wp?/f^pGr2975>Vd@j#GS&96^5Er*2jW`MV=BB&o+K`?khU+9(3;n\sFCJ`049!3clg'b+NVQlcGmm(b/V\!1ntM_k,<O
%?._FcMKh!PX?+RsZFUoHPnXi\"1u`u\a:fs[:5,9+pLqW8;q$.(!=43QBJib!L8^9&PBumUg<%<LQBO*K"S-m(tFig4L.Zd]FA'S
%I+.(%6Iftle9Usp'b")hfT)Zs"2j?=l"X'oA#/FDP$;B^05mWiH"!L7dkk`aK9kQZYeNlYoFb0,4(t),C]iB2oHRYjm'*cPn.Uoo
%B2mOepW1"b%&k<<MlVjQ.8+F8S?b9SX9r"G%+Pj3,4rZ)H>pHiZ5dF=5.MsdToF<D?-q10;Jhh:b8[3.jg`'a[_,"n^\Z$`F?CQ-
%I;p*]di2.fo)JmlS5>T,DPXF6TYPUg^:bOL=&!Y,5[EWKbH(:*+M/4H^n(X?TZ^au4T)6i5VPm<h_%h;3g=#LPJut;h'4f^A;%j_
%).CTo%=%22dfUl,Pm'B>V)dafK?6cYpqu5VdrQoFOL<_^(PWUCAh;35A1RacOa"1BN4=LI!(YAkZ'[`"ibr\-'CG%ea6p=t@VihY
%4ltTNkV/!eaZ"sR/CiY+,n*`I3D#7[@$]iodN3&%Zue0*$>(nQ5om"C?sHjFY8lk-O:D$A09o#16#\)-b]<6\ZUN0L7jl_iqA:,2
%0,@9AQAhK"1Eh^]#g&"@eQ"1M5@LTB/HHY4&Q?1gB3(l\K*dcFY%@:Q*N#*cgs]o@g=3#Tq(K`O%>%Iej3-FTa(u1OemtjT3,BYg
%kZ$JE\dLdLJQij^9<Xpc!iucb`s)I5GAZaS;a$;nl7.LJ1e8J&4ZE[b/rDN^OtrW-;EB7Y"m$0-(.K)gi8K+/ogn]`9p^(&fk)'W
%;:c),;8QKf9$$PUcu?#(]Za5>[jl(`Vq-soSjae^W(YGRQ%si,]Ln2*jorb$E(Nmq@L*H5_a$\!#$tUMe`)fIG]_t%hY`._A$n!W
%6g_uT:':m\&/J\+L#:GI7XKf,QO2L6>NiQ1m:9>t^VnoC$k>NQrNanK5M(;%Fa9JokHRQP4e#3l`pZ"J'pf\rY^)W(El&J2WC%J%
%36\,d:8cGtl=SMa"[nFs?Gs]R04F!aqFE`0"bSVjj2C.;Jo&(R9fP6O3iM!+4u5j<F:,qO#*2u9l$>Iei9X*ZERc'E0ktLY`lgX:
%(/C2$Y>k3VN]pOY+l`#59*_?ueLdURpS;)(0`i^fN:hh"!B;%0$K8N4iJ1[#1L*_RM%[n(StJLTLZV3eepUuhcWRgup75pV]I`R7
%)#SIlh,r^rdKUK:Cp<o#?H_jebJm,:Ba'6Z2X^>P6:4\qV1La'^-W,'\u\>o5#%rX&hYee0N_RDd7igG?pA`n=_r3=.@-b.7ZM8o
%m>))U]U4al1r+W*&hRo]B6p^'X3Gh8YX?ZLP>-l)%c&_[pUM+rm)hCdk&H701(9%Wk8_b*@QO;YO99PA>'j4>F''LR?<[7fPtR@7
%<t5le%>/r=0@\G'R_l[[9Uh8"Y,!"5)[iC:N*/ur"n5X:_+S%qEW6*-JsK<iG``C-!)AuS8Rk,4e=TPK^SZql_pO8C.-0*ZN(C"7
%3e?0c_IYsE!EGmP=CL0tb)eV+*P.6XC]RMIplTB((":Yc/@7!jh(Ua<3@#=64Z&*pj1:32;-i+k-Kd!$S?uIP,M^]f/h!YU'5[`b
%M=5].h$!k)$m!.#KBES`C(Ldo'=Z?"3e#'^X`c7OQUA<jD1REN/i$O\RA#cB5kC&pBUSJ0U=f)!X98UfBU5,MiAr[6/D`bRi-/*+
%@o!Fg>#+9$OQbXU@0&!3,<WW$#O&r48@Bj1:"dl#;MMeL$t]Zh#*+GiF5brC^da@nC_*F.aoYRpM`\^:j>C7BAXT.+I0+F?8<)UD
%P;rS\oL4(9aG65"7Y`]UqXp`m/;rPt^I[-Gb!D4O]U]$-M,(r"57DDf.QH;;CM?CN]-rs\hUkE"hm%17Rl^_J<[0,_EXc3A!_0_6
%IU\U7;LZ$)DW(3rRoKsTmtEcf5roX5^4sh"I0f/L+u>W0V'Y:AG+UeVJRG/I&G-cXe>]JO5K\7DfT(9S`@GZ&4ge1AfONm=&pd9X
%4^0Bh"c?VHnOcQX]dm3Uc3Qn;C#p!*UaW1M$_((LB7J-']5pBPe&B!3_NZ!jABJIl"Qd^67I,U@NY/opLliJh7Tu\]@[/o]/$G7:
%((4VSM&PRN9K=7F;"Vnj=0c?'NELij1JnH:7f27f.`#2M?o-s>o.s&Y)B.W1kt?ChHVJf<Jo)mBBKQo&H=Op0)3NOfc^)V*A$mlL
%"fY$g#RTB"(1AdN&\n?X])AV[T7GOS43S\&9htl+d*1&mpgfsh7Oj37I\,*+)e=*/A@pC.*Fk+f+`K9?Cs@kUV!,$Bj;D0S%8tJ7
%@n"#"WUja?d#'`'BGKoLK>?.;m=k.&pR51*hjI'pIN(5KTUDq*UGM+%>P.k-iR1J26(SIdd`-=sgUF=#X"'nCZ9eEJ#N3Y-=%tQ.
%B*'WC<^\qd2]/TQHjUeqMqGh+R%V]8UXP61G.$"MO0Tb.d8Mu!S\\*%Ndo+cEAKO;`NsAuYtr\NUhjWqm:dhpR3&Y)@4Ym#ZpS0R
%MK>*CAXHt\]G*;hQP"AMm9K/o_`a0&]&[ERbETY%h_U,[ns\/Ld8=s*jU,b"al.ObirCjeAC/%Qr1(C@nOjBW)fJR6`hqe1(m&]2
%:G+3XY!5l[!gTL4)u/p_1d(0bBb+Kg!7%?85%%[>iG]R8mGWpHg6XE5"[_GR_J-k6?=QM>r")A^*!WMm=72TK8`+LH=Hh*7gd'+D
%.QlkGN_@QN]\>')Kj1E[2cc92EDY-LEWs;[>9ag-1=`i&YV(aBMrD\(TMWN8O,kDVFIbH.kgV<;?"Fc/Eh(@K0W\!$`6g"X(1pFN
%b)4ds'l)`@Llctd_ttkB=eHN=X1'^0Pf$Jcf.b<.EA8.;*P9/bc\9B+j!c[C2qi!NL&:@q4'md"8#T(fR$^jK#FFXN%S`7<=qWd2
%g!A%O1i>S!;t8CrY/e75B\ME_nA89AHAchYL7b4e%9>+!;J=I;@Z++%S\2fri;Qp]G<&77,49><`SkpL2Cp(kDFR(O$l'R8D'r:g
%Bo)`Y+a,5S2T5#q</B@,]oP5a%*`=l'K@VPkCE=7=8&<Gd:,$+Os01`//T-\9r=q.M)?0LDfT\hH'BM=7=sU?l[o#6_(6spcmU#]
%`)CmT0T\[Kb_gA"f/6Da)Eg>p=ULGcoHpA"7gKOn56"KmlQ!G0M7V>aHJ-h=M%L1d13L#q%2=?pP2e2ZK7^8qFGk5gp]3^C<\dt:
%Ms#W1f3(bhRXAcRXX%T_3d<>7Sn4\oY/fk^(6//'DdnkP^l?pd;Mjn!Z9j6)<F%FYh&[,)Q9sXpXab.P!A^+p?`;:&(tb.$;4-T,
%edQ67)^0/X(s-kbNP'Fb-h=+e7FjkdNGt6^"IsBN$[4eN`+R_=:oUP;DH1i$5/ZF3Ju;gWGNGt=c9W+:=?SNM.Q5cX63tHXq/C!U
%OXM_J3*m=o/Fq.S(pPWGa>mFBhKZp!$a]T5kc:mpR(0=I*D_/o4:O@Z+59ROjt@@`oE8o.:+39=acA\bXBBKp35"l$E87@+E^\,?
%J&-jO,7HFoJSW>6N^D4I(=E@AEBa7!mCc_bVT4f?G].!h6er/)2UIFG+*9Fon%o.K3t#b=N+!P->p@8i\u>iZc!^PLk4:u/B"VJP
%2lkW^'Ia_b:u<4WkDY@YN8oPD#:RI?&%oS*6b4.n$P?="lsHgdVQBT`)YU$P8$fMoTec4a=`lO^3E)Yu<6I"^7E@h3rnRchR''4S
%NXL[fUmr](%GggP+XI^]puogkiWXJ(8-!-YmC)X[]6_uR:)M$(U^en!\s-;mONbX@Zii^:"JuX_F$cCVR408#P6Wo[^-ZY$n.#u*
%B=F1g4XQFk@El-3b('JKA$YL<38.j)H]Dtc.H2mq]%s5,78;=+`M4\eRs]?UDM@:EYg6^c[D`J)W]:AgX%"fP*]gkh@/hG\^lUo8
%+R1e)[tudG?[/ba;YYR&]ODn1kla+>$J(G''ba01mn=l6-\=8_$8`[\2t71^S88`X5V)RW\Y^=BB%ZYdR;iX45q40aL`*KNT/NTp
%.2EEsJ0<d@7/#h<L^F.1XCp6/mKN]l,N`dfJG)B6RLQMRAuN3*k/"_)N)YJ@hP1hf0Sll%H8!pOTSq@cl@!chRK-(9IJ[SoQ'-g,
%437<.c?4,2p]LaS8*Cc8X+M+33liY#A:A9d],:mV;6JT:\qc,$4ehc![T/&B1!FIW]*MCMkX+)V;7#J#%IUeoS(>LtJTN208=W0V
%hGZ2k>nHWoV$bJ9dZkG1*ot@)'/=FQJ7K]:^uFG,/>+I+o;J/sTW3mSW^r4;7%-[[KK-cH+=_Rj,4L)^Qn)^%jZ0-59+rD/QKeGq
%/bMG6dO$R!8B]eaV*%=QZB:ID.FJhLD5j#586d:2/Xs+h,qXODQM_n;abR1KZr$7t)emD5H/kf:bLi`OC!q#sf4U22][(FLdaFa\
%>09d>j^'/@JV,0)6"it1r'i"]U]AY*AXX=_,PV[gGUn&RNkC$>?A].)XnA!EiWss84YHRTo+Usu2LS.0[g4;m6@KRseDc<rrLe2q
%"D-9n.VQ;t84!pP]$Vo$KMM1J0%8KH,`%EcW+f_i_Mm1#2<]":&gmrVhCrsbPQsu\N/L[pHsJuC&V2R:Q`uqPFgIe!r6Z]hOBfW=
%Dj!/`Plu4:N]Ic+U.%A2Y=<"J/@cTLJRA[C)Q?_!0Lea,po!=+7;M?hj"f16KjCO"g67HXF;:&Bm7P:(pN>ku,d,bB]e71"RsVQ(
%HBD9_:lM3T5@LQX7L5u"@4!`Ss1J,o1'CQD@t=o<?fb_8bX8Nms*J%"b[eI]^Ct:4"Pl!E':,#e?QIPS`DA\"G;ak%ejT`_R[dP@
%KbZl)M-l<gr)co\2":n\345/t\]&37$FDERmLeU?jj`h]LY<88dU&HK1n+t3,m%uHF0C]QFiN$upgC3<g-[Kq;2G1M'0R@CLNgL9
%X0:M/LV%Lg%n0&<bZ0?"4pg.5njP2uh=Xt=Mg&pG<g+D#,`)J)RBYg$Lm/tY^egXD=WT8e>ti,C&iq*C4ggcnNp$D\,*F,pF4J[O
%s6/Z=Z-e+Uioo[i-ed(t!I^(OB24<,FWE8UTS;B.^A^4j7SH$LXbH`+U%NYV>Dr.ib.@F&,J8N:^d:i$5jnm1`0;>.nF`k0YI#-0
%cAch)3iC/khZt*I0=VU]IiEnC!Rs@J(TRWL\W5M8a'K[oc,l1["L?9PWYTTj>_C&&rIU"&[nH[m'<*`!W<5\ZF1?ssAclBkp_B5>
%EWm\(k1X'EiZUK@$T]WEALoPX$S]Q:_atW7$Glthl\KH`2,Vo4TJM*e>TdH.`S)H2-['-r7KF+T]*#2ok`3rG#g(FhM^B<oP/I23
%a+QD&HGo(AoW32e1UP>'O-'2IY((8;B!#g$O>$lj_GG<2MJrQ#/(.5)o(B$G.RCNl^^1JcO?TN[_Sn9A"a^V<Wgkr0.A3E$*(c`B
%`0Api]/l\_&_*ds*71o[X"(.>"\YV+1"roe-u%'02_jSdGi-kleN/IPVogp9d/ph6XpF<ISf+H^C,ReOK0HohF/Cj1M%PfUchu2R
%%#:aHE=$_bN]6(SYQG#dc5!%uT#$0;1A.NQ)N0B7E^P*:"Y0$+H31i'2du^V%#l'tnm69Kj0b'40)G;KbnZgrLu(Bhn\"Ubb"JH2
%G^0Sq"i<^T&WrEUgFf\I]`/QE/$J.-abaWah?dDD<dD^:41bm!K1Fn.,_ElN&br=Bad@q5NWkDie,mQ"(]YkT2aN)W#,##hS1WO?
%g0bSG$1;G@<Q'@iA8s)h5#$@(eZ==7C;TNUU'#p<;@&43#jG>T-**OK+t4,$+:^:`%V?&.O<%H,#tDME1LHa#fSEZ#YfFL2A.s/r
%5cPstUm[KuRYZk&l>p.Z+V)O+7\^tO'$k=qog-S#`)oLW&@"S5l$1CX4?Hm*PJu*uT)rIQ9n7PU'ul*!_eRIP[;P6i/f"Y7*\'^-
%(l*?eBUqcB#YfLYp2aA@S8ao!W/DW9JQ4IlIH$9d!a>ISZYa,D3X4qH$:PsqOe%sqr>D0!W\rDMW`HI8Ts*hfTfbS]b!7)ZJ2F_e
%/;b/"/C=6_:_d)g\#(M3!OdIXR@PDY9n4@oBH5WWV5m"[Us)@4GnWN)>'S\(Q,T4H'*/Bj9[`&=jj>e-VG,Bd):j[Ojc-"B"e#^E
%.mgtQAr_g.UNIBhCa*m*CN]*==H=U5,d-0%8<uaX!m0XXeUZLNKbYJ&>64"3P6,K`CGCX%<\:T?9#5BtCY^c!8(HSg%=tc_!gZ:/
%)hc_I0&hsi$3VbD3<PLtFjc\)!2a17BO-@kdCML'WR(qqh]U%ifoE/.\D4Ks+f:@n(X,p"h8H<%TV3-T26_$uBq@YS=Sk@0QV64V
%SqJ.#*gQ;4Z.h(UG_W+`;6@WHLmEq9`JE0bXW[D8&3Lf)QFe[G^43[4n-Ng0VG17,Nln"Bc4_G)1GBEBfIGrq!/8N28WakMd#q+`
%ZKs"6H>K\r]gdYWZ_ft6U_Te!]/u27O!rGjP/R1&moZ`S)QD]h'>"@WGHtEP/JO;Vp.:XpZ7_l9P:i\fpT\82RF(g^0[tYN"S(gD
%^MA]92$bdq:5e\98YDD-L@qR&T@,)$?#j*(+&XKM@X]?Nrb-ZjY7\e,ANb?4$K>ihU&>AV$Lfgr.Z7pVXJUp4?kCY4Qt#PTKn]/G
%ZSde.MbFj_j=M^u`REVV+#H>[;!+9?l)>k[ak05$LoS=qS+"'>.s1tK%n=2c'nA^f$pc7r!<3)S&=\1W*^<Hm-mg7/1o%i#Z`@/"
%mW7^P;i.MKBeu^=OW(HH\tMHGoY64(0FkfnAl0r&)ZVK+L_$<hpa4_gNq=]e$M[f:.c:EAp-BhPBFL<'B%m@>&03_9Ybp!-]Pud;
%>V/m6I'A?S6OG'p#TEoAg,+)0aqWkW/27hZ+jj&Rh]duCl3^F;4KBu'PHaCSpU>>D-qA$5m6U?N%'fSi/0%@@mUesi\!D8E"gH9@
%`#6!gG`?:?Q+!Pdp/GJ7D=)W?F]_a)[nlHdF*)Sh!Gn.VBl>tgpRJ+u%-=n;&@HD/lO#UVOIT]><:C%kX``UgEj6C&5;'j8B+O31
%&iR-T<@q]DTW'0B/DmIc+(3Y7Uai^@-n^4,'?13C:Mt29K<YIodNQPC8X*7%.1;)RmWA4IJY^/h0?fGjfR^pk&rQ"aU33Bq]7<j.
%haUBG_YI<!Z>1;M11]T]"HB\6KIbNF6C$*rP1UELIhJeqlD#[9J_*1&rlYLCYi'ShU*M;8mZn])GibUE<WKWN&^bG5hPjB=bACa]
%TFF4K9P]kE-')c&k0CFZUfVUlH,Z(s_n-Snp7OXC_;[a;op.&0(*\Ye[/N5De.8I*[@uQg<qH!:Da1nj\Y6,)TS26,IpC_-W$U;Y
%3*-'5'OS&heM#icbp5>UANidRPICS;D^eVq1Kf\?'q=1QVl_\9htAE(8L%<Brmj:Oj2S/_l-;u9pa>S\g'N,qqq^Fi;LIF;(C5a&
%V?DNT0>VeOOgZhA9M%eu)d]^N"KeIVo"/q9j>RN:=2iVimN&`A78-S:-6lEk"lR)!CWTXhBG(&'BU2\X7'kleJYTPk?^6F#+mTr$
%<IednN3Y&BQgbQ$eEWF4*,137D_K2F/]_<0(0s8^.uPi?bs:le_.0f%n=`2OhN\@\JS7Z`$o;AZ7Z(I-I+$1+9#78"[K2q2cA4-[
%]"\Q(pVdYJh*WBqm!G@O$*#7\qtbQD;r`;_P>W3;b2DLl1-Q\jgkKTd;$QXL0Y2WL?'<TpZ(?!iBS9Wia:PbG1W8st6*a+[/EA$H
%Q9E&Njc8d3."opP;n'@[6Z1]lY9*4ehqN(*d_e*_KpM:=<7Q(bjh7,g7).RW,,SXL9>8?$9n)7JKjCh2O0k6am8$Lc+JZ/EH[K14
%Sl2.<CVO-'@=63qrGsXV>b5q(Iq2ZbGP&61BO"gL/u=@W!h"e7;C0tD0uf-X4ss_Y^3'L31XR\7@Mi!Xq$kk(P/@tr`%)ofTJ9oD
%.$tJ2V?lKZIBon"?R<i$a?im0f[YjXgCs/Yf@'fB.'1u@h\Vl7Vt'<>"MCQ)7o%Aj!Da6lo`RDK"OP#m(?<0jpVWlA?%.\^'(8Q)
%prU\c>a`N/;ilAUju*rL1+nim<C#TP:Vk*r/dM&S+Yj0HjB[5t4bNki@<nAo/PCNung-ZMh`:mAX5I1&IL%$8UOlG<](>La6Xi*e
%ig2FC2aYHW:KRmD\5Esq?.,p*aMf70r@816N<+L?=nb1`YCIl+-^j-(mo02A%(ps*.jeVBManGYXib:bZ=Eb'#=CDgTp;:6a/-4m
%DmmmdICHubW(pPXl8'f5e1VN#Y_0sQ8CJ.2ND9t=5A5"B2if36_6:XhDZ@--95XPa?726+KU#eZ8l)aUI9hNT1I3oSX6mq*A^ZG+
%%(k<0"Q/fcPl!mKJ)cFkhGj'Gq0,+SMc_8<<#A2)7+8F5rOp=SigNhe[G`jH8ZcI)@:n?,O,a"\BM!;u_:?A.'dQq6cX?+oY+9_R
%N2t2EmHW(DC.Ib%k/D4iJ+uX3pJu`0du^="9D&[%n3uk&m/>?D?1.R;I1d1:i,(:RiSW@c?F)Pd,aVSiqg.e>.?!Zk_r'UQhK3U`
%!?_0F^]'K@ohWWrrG7Yhl+!faPb&rL.nt=B9qir4@Bt>27M^fP2R\pu*%'_5F0N<56@7<'%dT!4ZEbod0:k(UVRc]q[sG#TT7b83
%-Q+RioCLGYIfJXT_(3h2CiKA$%"FWmCkjBHciCrt2Q!s)d#nW7TS)5mL<u\`_V!-`(BNlgb"t>0Lc$NNRT^H!.ItYS#D:o+V')JO
%;NNNSgE\+@'][#SN<_%$"[;J\1u:-X2RDuac.%__V!F0[D\&jC74O?7<d#UWAk6-=FO1Y.MpbU"+%\F%"P.iE8_"8E%)mdt0ZRmr
%R"BdKR:_K,5rdlt[a\>1jkpY@EG^;s#,FBlKZG3D0)KWX"Kj`ZkIHNWSrW]YA_\=ojbrZ$4rm;aQQd:E&=n3(a?I)"jc=j=f#0ec
%LeEa_8ms;<K(U#1]c[;WK#,m(B7^9r_mp2%cPK3o'-;t:YXLr8.O=#LC.#:VhaP+\88`AhHE=>6Km=:2X+^ha6a$iQn=%Xc]aT`*
%F7^R`B,'W!,*RXHT0L<#:&qE<W"=$Q\8N3_0U$[4c1Pfq:?5ntnhh9*,.If/^`geRC49UH68mVNaOsD%G^_l^1(Q$NH-#0Vk&t5_
%*W1B5hoHF4e8J+_XhtTX%3*FO#-8t/,0Rgr,;*:ddFb22?`ZhDN(=`iW1#d'1chMX1lX1e856kW93!7%iZ?L.;:S'HZ]Gba'8'H(
%P'o"pj;Mcddn4/V7i8_P4^#L8"Pi-[ecBm7s5!o<@(.pG5SuYTNc'Sms+78AfSJH>"A2@=/:]u/*3Fh_qn[`bJm]N-!%)E!XBJ]X
%gJ6iK,M8?*s$VN5W06?cmdUnsBcWkSk.SqmTi78;6&hP?,B=8<?RWe3E2njC_b(,SL&6:416dHbY>N_+:=-sj?TMid.07"&[SRKP
%(&-_?Pb]>D\JF)Kc!Xk"90n[cVQ,;5(-ndS!&k&tZ[K#'#]Qdk@*MJWmI\,16:A8>La#*"f"SRPG):AUkt*2g_SEnn\fcSY;0N<;
%E[TO4([,5qk:,Gk&t+O4Lo\*H#F%o#,Lc-)*`o!"9O_glE?YsUWsUbdQ!H5SnT9Cf=H.9KK)l[\IdQC74T6H=4Bs@l5AQAcPFep3
%-^]E,$j.jlbLA27nic6)/8]u;Q(5(fQqQl[OTLDV$!aUlP`d1_i*.2*&gpb.^d+l=I<s&Rp+Au$;1:[bCqD9VXh?9R%C<n)0OEm]
%1Y_f1lTVuM6j0TU>6Fqn6>J4#Lf!@KLcX`a,/J9'<g=8M#.uKJDJ_?q[j7&iaM&5u[gSD"_DX/BTL(\RXL<cb-b2HuQ3_NR`2IXW
%=WEL]G"(V)65u(7J5S0i(-tW"Lr0k8#D:;eU3jCFmbK1J`!]]$6o$rj\.-DM,S-akjPUp:GiBoilR^.Z<oKEn+[3/)1.c@l<^*W.
%YHRYMT9!A8RPZCAbL>!7P4(;%&+[^=hV"6Tjg9VZ\iIF9]hK,L5,;EnLs4.Eb/j:H2*H%`cP^!gVAZ\9i^E3OWNo,.F\tGd)j\X8
%!eq/[OOao`[3<1C3AVp:1H^n"\[lD6Md;u8^Y&L;IdNi"VY8Y\B6aGs^>B75%5TZ[%.BcS/5)C)'7`ooXZHO[)$9'DWf^^%PgUcA
%%5\E>kJU#[CPfD#>f+p52J>A?=Gm>KP!?h!P34BaM8S<sem_-@&$eHK4iu9["\[Y7&WNOkcT<a<SDQ:kKS>.JeUu)B'jP`dO-p4Q
%Efe01JdeH4#YIn:q#7+!#Uh2eY)a8_W1rIZ#\eVZ"?W4q47CpKGd3`u0.@l8mR;[eCa$R3Z#j+s\,Zh&Mm:K7A#XDu"I,Eb,o#c`
%6M]2(^d0.,3#2b(2Duk+6cLATCF*8R@_YUd)QHWPSjWdE_k'8dGnd?4]G:Qe_as(1JU^RJLW9r''0e-`r6%SY'-]%^74tu!83XEC
%`t2rQ"XeX_,2M5L#EfOi"YprJh>t?79mEWt,t6f7`l!K;^O/"38)W7m00HQdb/k<l,F$[HZ]Jnp-^PqUPF='6//'I>,*dhLrY&9&
%.GB(o^1Z61-B;HY]dIhA5t*X$"UfE32CI.n#CUg`q_CU.BbJH^!ee+hHL_eMB?`))#/sA$Gb<[S9g60bIpLXYf/r$j10m]PiOJ*"
%d_Xn]PWe+5jQIrcrlEGm-/Y>cE;WA4,\I'gL+PD#b,/ak<"d'>_66r^38c(P>_F4mhLRNi56].d"liL`V7V-i7[j.PA&<%'Lg(E6
%/#CQ1Eao8tHr=,bH]`rH9@[A,#VF(4^AKsh#l0^=ONl#eMGYHKccU$dLIsWNaA)NYd2<mjEVf6"j4,h@\f8@Pk(Mr$3ST=/rUQ4V
%fMtOf]=m9k+NY9gH^.f$O2'IMWECNRnWK`4hh[c0Hd[si%tei@k:4`gh;6XcCj3O=IJ=-b?!lu9434&8bDa@Yp`rgdl6AYO>"9<c
%EP;1;ee%!PnI!n(#J!3:dVK',4ULB^Ne+jV&O@H*?.ZAgOD)\QVXS%0K;XM.G(nB7#0^D_Iq6j)Wc.*+$)6&^GhV5EI#al2CdE1t
%5rG9/,#A5H1_3CXnc!&?]J5>c,HL@*ICJ7Qqsd5DT;Sph8M!BI`ZllEfbg->I&T^X;G#8qpAr*W&OpH$PYH8[o!a"GQ`\M&Q#qV+
%@W>bYSi3W@I]Yj4X^13LfB+FoQp5Yg?UE_cLA.E;H)3`dms%jBIhCF$g3Sie^'o9Wn4;H78,>D3deD_dad40aHl;LdHM+YE!k.$L
%?H-IIc8^;S8.S;X/(4I7OT$W60*.ue4</a"pEDNo&B#AghLhA2#2oi;4".]V#f1O(MM@.Cd_$$8<6\%$B;QD[RdnQYf9e7g\UO!S
%dTV2QJ->C-DAJX?V>+bWW55']8MLX\()&b.,lBj#4YI@V$<"&5H!h1U!'gKLjZ$.r/e7n6,)A?5=Wl*A89MD57u29;Ksb^0.V3Ag
%W'I:88Ri(TOrBr&#eU>+2RF0$ZkNMVH3%8O8:775,Ss*XINP98+hO*R:lqb?d``jc$TanVX@)4&)$gOr;$?1l\Z]Om7aAZ8`Bm?h
%ECIfj&J<#+lk@QhAAamm;b79>""b\.>HOXJUUb)8hN]N'70kC&:'qpb*c]O=-JBLQKK*[JKZO(fW6:8sO.r#B+p'U]Q]KVHKdLTU
%Sh0p^;^E]-<FN%\mc#><E^9*>2o=PtVWk]%K%;^>+cOn(pE[VYMWePLIu^\8d&u%?WUX_ZP!Ro/JUXXe8]Pr`8DmWjbsb@)L\GVg
%'!CQ0U2VA=1Q/?kO!7&f#W)!/X-J"""SW%6`J_a$#O7$l!A7f\&L&;,$$Ip%])/9I.>]rrhhVr"+E4D.TJ/9**N.'<m*s^4K_.u\
%U'a4$Z:6]%@TZGr=#I!M7,WHiaomO33\!FX-%HnN7dJ(tMsLZ#;(eJi&&s;8MBnk2\.c0G8^31!kajSN"Oq6cn^^2D$%6LS`DOnp
%\YQRtN>?1LEtnD/dEY,d$jW^c<(dYi#S8>*;`ogdTb",IL8XRD!^@?6Qj+U0?A3PbHJ)oO<$DqaMKV%J#d,5no/HpY3ueOj.tX_J
%[i))$+j-'Zi"2,BmOm5b-rPZZoN]`:elsUBDkVE?'8B>Y5Wg<&^lLFq(@7j6)U!aW#(=)Pms/7)laPJTT)RW<mi&$je"/Z<O"OAs
%#7r9:_@Qiid]>Rc$ss8j+%41D1bYnSb=`73_n9?P<;6iKP$Y!%J$kg3?UfM?>:3#71<XqfZ^c5@_;nNM9,2)G"J&$eqKS9(rW<%X
%(g^t\NSC79._J@H"36q+D)q,Ujl@R9J'41)g"M[RZB-X*lfHT-QBJ.1r2j8i2:ptlof)0rA`GS3+)(*8<W"&J-AbTh@Bt7u7`O_u
%2)^N;Z$S#<G'hg[*g>^/0[eLpVp0%X*f&i4Q<g[X#EsX@J"q/&^8Sfo/'e/PqAU_m"e26r1j=jY6P9#Pc7)d0&hb<k-"Bdu@Sq_@
%<R(4,2ajGS51M,-k%C?8;)F?/eV(0!et9TY-?B[4ciZ#UC%d,Alkg.'nS([/Ff$qTG$-Je,'m:gqhg>-73d`**#TNO(h0FYXrO@P
%IkfHQDf!&dWsgl7+;Z(r8G.L"KD/>X"AuEo!ji*!X<@'rm,VW/G7g8.\t6>N"6!>]['*:o4Oi*JoApct9I07l6C_jf>]5*;7\'"t
%:YF(EHTfCokXE]Y0AK7PJ<e"HjWqj3"Ji-P?.Jp0Rb&qS0,_13D+Bo8DjEFkAdD!P<0j2[lRQ/bO/c"24\(LWXS).'4j2HIg4R@/
%'r0:7$8eg;6^&H9MYh-KIiFO[E4tCGLQT7QInu4qJ5.SW_fT+M?@Q`V!h(%q!STnp)3g/>)>hi"1Y6NS2+j4G-@/,6)S+\7(ca:M
%>nj,\%J'D4IL#i-DLTXs8]uW+^(`5oNILKdj.F$d28<IU0moeDjbEV6+b)ZIEK+eqMHqmfOi,5n]3_%XpZq;IjdUJ/s4tq:il_;`
%%tFTHGO#e>pi!ZHo!@Z<s5EkD^A\%7l_@s!g#%2K]ANYaO2(NkqGDZocg'Qdo=3(1*L:4,'<^iR*6%)a&qAC44MTIT\+$/=98Bc5
%XILqj_ot8^><Zs=j(E=*]9*nW/#5OQOS-r@M>Rk[]A<DaV3)an*I/qkY9`:rjSTEWcAOYh6iT!,,i22ZmtlEu;ZKcT_J3G@[R'r4
%i5&,Qng,0hKM<2312c(E[ha@(!,Dg?pbO]ff1:,;0n#I/DL@CN>ps643Mrn(k>B;grU)>17fGW%q#:4Nmsb'Xo'cVQ+91iuc[WMh
%Sj,mn5A(#VO6u>XBOl?7NLY#M5DN'a7[9SH[=!E7LVs<rOu"n^'h/QDE'Ka>c`!gMaC5mG;SaJ5%U"bF%/p$,$beEI[0&@t=Lr[%
%*Rg@;`K*nG:DQ/qk/U<;p&i7YdDc)W(LQFdc\X7a3M)j1(I+\;?^ra;S(/=$-Gt.C7*/&f,fQCEG0V4u!0P,YLfG"FM)=RDJTk]A
%\!/?;gZmO,SgoXp-39s=ZudE56aqT:L]R*BTO"irPq$LH@+H!GA<UeE5@DC78l`u><8]u=S!e/<NTE*,Z7.BRPYInP+b;&D`5^Q[
%,kKf=Rp-X!mAdLaa:K8l`CV4aV5]dciIKAbo@,O^0s1(UB9a`/=p[RYgnK?dSSBod<PXZ;%23OS:8!`K@fYo#k)@N0Q#8lf(j`7[
%.&LBTZJJeMC_9OE`aq8k23]_G?L(3TZq]scC6g#o5]n*S]rHWHpOXQ];f%e3NGE`LV02aeYd[/D0\`XP@Q-8Hi,+sp$7<kZ[C:U9
%B&-m,JKm5=6Mn3N:[\G?6bX`cSENGVTI3(^0USEi0j?30`X[a7pLUIOZB1160SsLLl15[4F'^ISlm;a7\*FL07TP?BS,QfA*nlTR
%alLT@/4K1Bpe/-H3b^5=[he\FK!cDjh!$9CkpU_W[bH-X!S5<hBKd1#q5ZoEISH:$Kgo5njbs*r/0)RfY%3"sg`=r*Y"!37=srEi
%r\c<L[=Ye6\EeGJG<-)32.%WjbB%X3s5]<g?ZGguE;)$K5YAYCAdJuHWTX/0H?@CJQSgt<`^.'%=gq0%a_u65f\\tM'gh5fR1/>m
%](O@;:'!Ccc%IKpf0H"@^3q@Z0Ahs:>(i.R&Co,:hJl@Zk:#%oG+%1kR`<N0N?to1=3s%V,."k4P3$H*<qUf`r$YE-r7q%UNZCjj
%\SloeYYh4>h"TOkqVa4(5OR:\2M"HC]8!bAX,m.4J0PUJn-@D8@1a's;Y%hfBSP[8r@ci8LZ[uWWFuceK5:\AlGa%qpsEMFPcV_m
%SZ8"6o6e;of(Kq!EDN@1fQT<b(i)4+pZL9T:Ao??amN3rgU6T=[]M"(b@'\k%H^*mrPb=[.?/uP2al)rMce;tjS/QQYE$pL#3>Qk
%LE=0!%t&tB&,cCc4YY]ap;#Q=h#f7,Cl:XW)KR<qA*EmjXYc?;Sf)3M*H_,W2jI6UX8ENP?%2+OVFu(r4G^#</eP#K*CspTLh=<2
%KjJ%POXs#\gargG?36906hhkIg*)O>P:+J^Z/(#lV*6F0kDR7i3sJgVI"$_Bd[F[dRj1SqbMM1T<ob4ab2;8*&H1O'of'"7Ua?%&
%c7`/3Vs!:$a%M7d#GS"Y98FL85YqE<&>B*RW8E).)<t"tIXeL+p%-]%rKeZeI>Nbs0[Y<4"(e>")`GoMZ*SjPq6=U6>[KdGJ>dV'
%3l!rN0-L1j(;Bo^8c5,kOi""s>,7_Vi<RNmT(j+\imb:(IA)_G1NGkBc1FnPjZ_k6S-<5?6iKbg[.Th5.d',V,b^Oq?ne6`6&[Y1
%H$:0a/6#'lkW?9h=%!fH"EsM5_#0%>;c]uR<>/5N&Zh:XXf#'<T_5%*42E4+$=dMk0#=(05lukd7R5a"e?+O/2<F%U-5P"B+jEM#
%QNC`8_"a)4-cgB8LECX^6RL\QJ*h)`/8-VUecLU)AX'e;QH+o@ouqVgOneq!&qdqDi.KN_#J9OsV;Itqk\FD;oTcLbJQ6n-BeDSB
%>0"rV?cYY&0mjj+ob6pq2*Qqjl3LhuoAc`d&hs8H33(;9G5dq5WmBqrlP_TD(KLIO4I,IYo%9^!#eq-L)WJUXhb6+B"A1mX!iKBT
%1=Rs#H+O@q6YRQ*+#au_:I?)=V^U4kqGP$Ec/Y0Tf%QDYbu_dV9))^!hp7&HKpU!H0u3ZAc;g/I;b6kO(qS@Q?T#MKPpA#6_#r`>
%E"nP4i<qr]k+KKU#.2a8e0Z<Oc-S,R[Ld9tef_+["5V-KAg;)-:c>bRScOdr0&pfM6_K>@D_d$XfQZD&5`V>*iE2$<+M-#iL'W71
%ee+u6+FG(.X,4+$Po?4t!$G$3Q6BC`9^jgdE'<+%iWZnVqGFgMohZL7'](MJAK^6N2Ys7CLXlpM`I0FjXhALhmE9Vomkl9/b6QH;
%Yc*spb7kNSM>9lU&.GUmQV<kPMhm$:,KZ.IQEiu=NIjAK6#l*Ff4m6j4S*F>f,Q'1>UfeIS0(YfPhNLT-92YEX[*+6l_u2loJO"U
%_Q<#0MH,mh%N;:s)g=jM;$nC_\GQqU(r=VF(K"hYjPmZ`6$TA2KWRdi.O(Zoc9rfE(,5PMNs0NqkKnf:Xb%GdQ"'F2jn0>;#Gpa0
%i=)iK>WF@M50J6_$N^K;Y!ZeXMYOgp-G@XGflSKd5`!'XA0C3*Yr0H+e6Wm.\nc&G>B:.krNof?BESe:+DaOp-+H8R=Gr8,Tfc4!
%XQ)eVdRsmW8t9pTLL[arX1<P9fR4fClN.+9CrEJX3:P8I0*MI-(.?)oS=^0J&\B[',j:].nq*5>j^`>4T/`"$Fl!DIf#TnDDtF@e
%;H3i,AXrKgBj=&(Sq1O#7uTa.3=X"s360r^7?O3%"/l']7!B5SdB?@DWAr9Qj";ZcE"!UiOfd<o:"FpU"/PW@%bN)#=cOs8Z1!qO
%Z>L5:Mc-bl&cI587HEF,&.p812:Em;[&%$BAOXC@2^GLUd6U>uEfua+qRV$*^-(h2?n[uSV'CL(j5K=S2jj7lpO2^c@-,tF"/&9G
%'Tb1kXEO_XeV,b+(ebQ?OH5;m3i=Cd:j)'?GFVp3LBEr0L_>8<*4RK^:lmk?Wn)<GRo7[ggn8[n/I>9,ecGo08=rh)T<A"BKY"*R
%']Q\b_g!\+!^o#%[7A26G[_H:(($PQ$qMfRdE(Zoh%L2^!9,jkW>lCA;c(_J56,^`ZU#H<OHJQnLdJ-L43\$B3i@'rO[P1.DV_GB
%k[lL6["'-nGTL]H(]SqOL8B(mLnLJu&A\,EAO6<A()!qh#a$9%S8b[TCgaQ:5SVs6@o<jbYcCD"V-G7o<<sKX'1?gp!(5?Be/NLG
%l>0jNU7a880"AX&/s72UThYXa`BhL!gqX2!od#QYI%\L5[Sg;cIn)q>WkjE*jHK^'.tWus,:6":$$)=K]o8nSZ'La\o6l4f*D.[.
%cOmE$qUH2-nk-ZK7fC*MYLl-)0(b&IqF\L.HG$(];UFVB1RU*r^T,X(8%bk">_"lPV398$[<a3C>hq)_,u3oFZ]]'g;@_6g&qu*6
%!kjqV(=KalS]6[1b'!W2YhuS*mr@s2k:`'aIdC5/PpE3PGMiepeb/h&UO.H4rVgSSr>t%1K]Z,*V=[0)$_<D8rqA()k1'#j*n%5K
%kEY2Bd[Zq/7!Y%.^Ae60@/WncfM+P3*U"sJ@!D0-Zm\g5J[UB!X;'htLkMFhL9Fu-Rg$e`5\(/pO[P(_BA&N)02l9qL!E<6R.X9@
%#.4WWr0gVMpk5?EU3r/j_Ch$jb,14QPq4hY/2G7%&tNVoY$oQKnldll@bUDUFKscs(>?3-;5&5+YHK@T.URE>R:O\F>I#Z-ob;s;
%`b7&laMJ%3knd0`,9B&ECs.kN'>J?aC7T2T"KV+j@K4VcL6pfb$h(S"d6JiRL3p15+mT<'SpeMQq?'/nn$pt2me)V;dQ<KG?7Eh?
%+VokWNHJ5,"mb:X^XXl+f[Ce9"-XqN76_oXr(+%r?86.LD1u4R+c-([ZN#_(IL_HXMlb1!7:O=kIu0Lq;;,M?riT/oeA=K(*e(>`
%od#$TQWeI>pBB4dT([EA]Fen'g.UtVR<jmkF"1G:imXZK[Iek7M\@kW7.K%/rDha0!HXbNji8=]&0Zn4nl',#1I=tjIuD%4I&XHA
%I.],2?+jQgRsiJ9[D/m8j&>E*o?4?trc!\b;/*3/EerN"-^unkrlEGmEV[/T>Y,HYBScG1O\;\dX8W)rKSDmD4=\sD>[-ccEiE'G
%4dN-XFNhV)f!+k&C4LJ'r6(p;4mdY(#!]d1<t$]7BlcL&e_%muVhar&^!Gh<ro*/[Jp=I\@8AG<Tmg^!$7`P&XsM+SetpMbZ566a
%<63tNV-^JdV5,N2=PVN/VbJagqQ"g$Q<eF?2SWu>QZ[U]P1kud"8OZX'3`$[Yn,?c$F(,9MI^+V;(P$>nVRZp`OKAS7H?,`;QE?8
%/>k*D/F7,&R2,t=fY<rJ_S">p==kKLf8`9T+TH^Qm!Td*?Xo52.+><TJ+*,M7,08r($kDm](%jZq]o&9kCWW9`Vraf[E>%#&J"K)
%QGTe*SD'RgDOmBoQZ8u^G'dSH]?fsU6o<,S_qfIhIMd99>m%jgPs\C1Xh+'86c"l2q4bq@TI+MIWr/Y%a[4Q<Zi)I^l:#KP-.QLc
%`Eg10GFMIc4*H,O>J&C#Y0E;2NdepaQ0CVB&<B&HCY^]?kq]H0r%j?=Po0<@^.h-nbQG(QOH[UJQXZ3d"27%Xn@/&('bJWmqLk4!
%!N=at&R5-<m.e0/[Mn[5I`NrRhQsWQEHdkHf=6"f>fm/Nlc#^5WFbe&]g8!&*#+g@@@4VkTpe!tl7\<Jbb!<*/Ro_F8BKBo2G.(E
%mgD4WQm0rrG5k]tTQj:6YLj9i+sK10Lc_^2nUsF!Dk1)M.H#GT8iYj>hCg3+!s#cVp1GD,#H:/L!U+c',95%t_oC_afm\LO7!gjk
%<3DmAAU+\N];r,%QrnR+pDWgW51d'mhpS?-Z8SQ?*A-b`gt.I^9b"[QqSV4UV-\:]Ibe(=BeOaeoJuO//+b4IL;jC\`s%Ysp"2<o
%a5kW2QA^anXuAHiO5VhAeVg>"_.;.>rcZ-=nLRB5BiBkkVt<WZ&q.apT1VrUPGStH@?9-E#P#:_S^H;[7&uFU#K"^[)m_KrT-1JF
%R3_s&V0N[cO;/^RAh1Tt"dp"46bC!tH[doOJP/JA@:TR$LQI!$puiiF2haZH,@lJ(VB$:pVHJ+4*<=,N][IIQUdgA'dFKc*_XG#1
%0jFqE7]EPadP8Jck7D<#Gl4Wj8>;Fg3f.ZjQ"l.,%6X(N))c`XUC8e`bJ7^""uf+08pku9ZEf0u1R]taDj2Z'n>NQd_TI'3-40^j
%r@Qe6Oh_BY:]u=]eNdfg^dMDm&+DiX/4:f>]k2qYD[(N\*?2N4DP1;^Z:aB`hVV7HdY(4X=keFFTEKH]`*M&uk0-kMa8At*XD6W'
%b.*=mAJpC`CsdW@;kY)_@T2ILQ0BMt;A>a)Ff+A3ElN%jP>,Ltf/*m`1f:ZA>mfGX]onSfL>i.H)%^bJi;RPDNRKKF!U6s+1mFiB
%e_&b_;g`+/bPL-^](3"(m`b'IhRc%SnrTSI7QMS/XVlmHNYu;>-B8s8s.hR%+ugA8^\4s\Zs%6(B>pEJRT%6FW8F11Xkp,9?>C%l
%FN8L0;:f<?M&8*L^oA.=<nZ#_1eJ:=Hif.6:\.Hgl,ppJGgQj8c<OY*")M*-Y:dW3+e-Wni>2]\^rZstpNuE2:5RhHc3JU+s-f>4
%4F]"Z^Cf_[DL?mX;@VDgI=C-1g#CQFpZh/s'%Gt+HZemR^oON"mlIU=r7S`HDp"0u?CZE/NJDHNd(Qnp*-n$`AmN)pUTN8SRLjN)
%lJ.k-WAi\Il_,aTp>Xntb.M`^A\2%,hVIS<\Q9.[kMEV\]o7kjDah77@d\3th7Kgu(^YQX?GehqM/tZ9*96C#^Ndf8Hd"Rl+](G+
%\'B!7L-\+[GE09EhGld^MlY\^NaV#`a-sJTEDa6,m2;71#b>a9oK:;;^#LlX#PI==hc@5sW_]g\cF>ND)Ht>`3'r1@?UealUB9%R
%6]Q;G!jHj;Z5hM'F3tfL9$2,ZLDC5tJ2W['\\Oi$`;:kO)L=-T@^jo,0d/RZhMt?g>Lj+]GlC'2Q"jgoNj:!-kKu4/aU/Vn]>3+(
%FNGB7fHWA3lIVJ<SoBOGo)4+-Z"Pt);qTWZK]pD=`#ES*dMinAD]"<I6AF/kQ*r#k/tsIT/`]nXK-b:eFlHGT=mkjL_qG7SM-l3-
%Ddm@E(H^:gn.ej%21fhWDO.d$[XQ-`FmIQ:I\2bej?$Mp$k)OW(%;\5E+mm/!&@N;OF%P7?WCj69*)+h]#87p!9B?GYAmSIHJhER
%X#'^CI%b^NmROK%!+=osNB/,a/^Cu`JI%O!NG$+S,_4cV#Cgd-(V=$c*c#4AQ\T**,@1JaS%,jk!#f*Q$0kp%@3*I:Ng!RA`.<7[
%(2'Udh$3TfoJ\!`%kaV#B;L,L1U+q3ee33A(oIIdJiN:J'+CJf7BT8i19rV=UD!ubkWr6E^Ce:m%DCg0&(E)m&eP3*#m;$-qp.oM
%[k8O<`@NO$gE^])B]X=PF^;qqYGIZn4cN$cg]30e7%J9T=R1Y'M?GKG_D=F")nCpYiQOj+K?QUhK`.nVOt%Q@3hg7@N?/()4Z*Eh
%!-<(06U@`4H:J/U]:XhfM$RKP:'QINhuEoj_.?odP=?^C^r/D><'uosmTmIdfG!kj"1g)p'I9PWWS7uP!"2".RF*\cg6/jQBdi3G
%U#Ja,>T]u)GJY1(P:Jsn5WTH(P,D)<;/it]bSS]YK1".e6j<A?f2uRF&K:p`dZ=`f#BNX[d0DfPP\#Ge'V9g]IhQ(U+RSK3Qq06u
%9af+KSp]3>`rr/*b0aVsbG/01(Y/f24L)"'T%:g,NpLH"K+J\l45ts;6q9=@3stAB34BD&^^G38b:6jOZsu)LEA++3KJ4D5!%jgC
%BLg$O.3kf+4ns=$(/TN=S0#6QDg9tdnYj'-&NpI_"M[Il!LE&.U\!]??=)X6_Gq3eNs<K&kCm1,lr4"9^&k.I#ni=]8_HB,Nr9-u
%-8mCo^a@nU?r8R8iS%HClad_#[7'ulE.2kIn*Cuj"JE7QTu[`^Pb5i0b/-@Y"knk=e&sc3K^hEd-atm,%A*nVp(qhjM,AHdZWqO"
%JkVGZNM5lkFK3Ke)&j+VC-Hr]T(^A'*1ZgtHfr%4]FN:Lak4*_,b_R1)JVtIUpGtfDaJ)VOh`M0<+1NKRrRstlff9X?jlV1;^h'C
%51^eT@bD=tHJP$</lj`E.biJ8HW/U26SVKN!=V)umRCOX/_XSbK7?iId)jtUeG8Z)W/f%<PN7@Q6p;B7a^m5EJ_j'H#5S5CAJ%ft
%EEE_mnu$O\*Ve*k,3p8nYYXSFj^8>QjF^ZBJ&s7:5B'mTCa:7gf8j#a1H5slHXpb.ngcU!]G!a\e=ckjZqU74Q+R!JM+q>'p>iL.
%<=2k+-=51>0p@tt;gBA-;2$[;C$K,^CeP@Hk*#S2Qj`Foo_:r3Jn7(=(0p=VTApq?>Oo,l9)WP<"+U.*@?jmk&h^qcb1"!p>_i%C
%]p%J5\ENH7((dlP?YBPFF+E7d'NdY[dRZG3BX%iAY%OOolk#;!#a'i</-S<O_Ag/VmLZWH#'no+H%45QEsghk!%hiHdK*Y9\iD)*
%!-9N@g!2Ne8?#cK<?@P/X9$'@K`_mk9tVqlW95oG]ge#ml<s?*(3W]I]IW78Z2edm7/CpK^PkCJ^)L8">WC\>2!NhBbe4HB"V[!t
%##3-Klf<J#2"<u2W,S7>qi_I3\184,b4h[DZ`*u6')Rmc\Q28HEI(_XO@qb`p*]/:=Ik6+HWZ@%P/m"?J$Xi3,r"KG!ut4`:jNDg
%Ii!S.\*LtCf1U\QT/X+mESkR6f"n*lhb1h=\*p<kD`.Wi&E?TW?=6`>.*du"m[HqP*F'"Rn\(/E^!ca+Ek^3pNG$^/Ec62!qZh@2
%OS`qcM?b`iidmE":MJbF!P^:4TI&r'l5r.@4m\0[')!dI%j('YcFur6o.;O64Kq$)^(]SAfn@6Flc&8''KP(!`5.)^bLq(gEk\B,
%K*T#TZgUfQHqP+X%sBU=hmLQ)Q6m:VX:$n8q!37\r6ZI#5YP6YH(ehlO>ouM6#,['+Epa-A0NMhXcR[Kp0FJkYl&[2Unc!R8F3A<
%#4!b!b^)Oc$7)sK#hUYc3ocU'>TQ4=hd/3>0s[-9^=6<tH47%am$JA:lM-RTCYkEK[s"a[f2kT(9<AAG]m/7i.Y$7PiG\<cDn7jA
%Y.\Xb0C#rJg8jW!?^L.f<Xj%I"WLQ+dh(!e5SPt1M,H3,;%<%68:Z:NeTLhI&m2;iK[Ao,^/`e6:Pf=-Ln5FpN*TFKBi$06n8$S4
%/S;Spo@]VFoL/(F&]0p[,&fG_4I'sdC*,R(=UNm?>J8V>Den7EW@mCklFk0N<uKsjThqkCA,t,ZKG$_SJdZ'=C."tpidq@q:ij(b
%3?!%"82tCRg1Zr/:?*M]07q[&p8t;GU8`j3ZY4)FmI=Ko?#>aILUMA&=Y:iIf2gGR-Jla]<?\gQYAtI6'Odu>9g1Vm\#NcoA*(OX
%U2'"7KlMp]Ct?j&IHCcZ-,sX@1P9rINsl!frn$gmXlK9Ic+e](rL5_QplF>3oC'F=#cK9R$UeV%Yi/s%pVL2>nDSlsc+j.fs8;7C
%^\da%It.4^h+%e<5Q-q(s8)']FSDiJ?$IC5^]/Ebs(dm+J,/#!i]mJ8Y@as-+1B;2ZR)s)6O+Y.C?j\/(YE"%GQ6dmJ,IW3pUe1C
%Ip@an,)Z<:$SBp9.jIWn$j7t4W7fP=;!iM#!e_Q9.8^9V!6c]6N!H"bciRm8793)=cY*<$m*RD@8X8^@G=,eqKp9dl="%rR*K,*(
%B[Jp?BGRl:LaT-rd6WD<X>=kZV?Y:)<-rKl%#!"N.Qbo>2ADo8Lj@W+eI1_kX[P]3"K3Kr*C1+"paGCc6\9=h_[a)K?rQ)4J1:hd
%#Jm3'4=m\_JIC<nLS\n[ddPm'B]iOm%$34)gRXr@Cn:%mC^K$K1`-pe%=>V#f!1g.<We4(*^LW\ToH<X2Dc3%;ns.g^EPVC5T53/
%#Cb4[FKOOHC*9:%c8CkKJ1,_hK3ndG5ou8`lQ91%5e3\gZ+P%bN_?QYer2K4n-[Ao<l$SK"eo_6S#q7EX(BZDH5WT0!7`:p+ZWN]
%mbf5b8F!Z3%#,BT\Ut1bWGk#%+.R*)"968g'qu<km<F"!*.+pK[)G$W6+5955J85C:*04C:rihta7,j2TE$cD2oc;>+8Z05a50,L
%fUkq4Ys5#Ra8QKn+8[k%I;[@LpgXi@D[c>clsTlON0$SQ(kQ;X$B5!MNf[a7$<!u,QCW_Y_WYImr72St4,cJ;SC3/eTlKVfMpS/!
%fWS==\=F*A(h&/uAjkd-YSVlR&,@:/"]?L;Cf])Z\5CGZo<#h/GS()1/^DRl93iJXN_^V8Dni283l1(L\JD&%O^i_RAJ(J>E*CQ8
%'nh-D8'.m<JVXQPY#9Y`LC;TRTF4_]X+;uU(DLZkg='qZF`#`h_kD1;!437%5<']rNUi^E",/WY17b/3PX:3dMn8!'*>Al:'),gc
%HDjr@qN`l5#`;RO&7I:*-BTRX!M:V'L1n\(MV>QJW<X`S!>^Zr#U`eX3^onNM4$FBkuS7?=BAtFJ/mQ.BRq-r3jIhuj]OV%dk<8#
%"C9jIT_&`cmS!W^N:Ahc<CF;jg?DoV(i/0"mhSZ:.!IB>%<ZjRge]*\c@`-:Z$5\&9t0K7!qKB2(snE?_N6&'(I47RAcR^j?-g[1
%Y_e]8lm?TtdRC5=14pB6]f'UTV<N#s_bRqj/-rSd]X'Z%&VOHpPi<kNVo$G1)0FgE0c/93J8lh"eBihF/%,ssRV>pGhDHYgTSYEm
%bXRs3cjY08qdm9CY+'b@AofY'^9/i3]4UaG/WP5hcTVgUNAXoe4.?=,6/1K46O]hj\"eBQm<dnZrB9/5G)r.gp-!Fcj6r*dk^AM^
%WU5W%XF[uR;FmNC\_JE[p3aD@;TR;Y@35Mb1FVR'm,NC!Y$hRs'tIfSj`"WM4m9,2=")`lhjh!5^>Hglq>i)Ckbl7<k@_C;kB`8U
%QKI:J*ggRS-NqK]QDoP4*@7\?I@S3PZ.[0SOW(")fuH*a@ibG+@=V_Q*;=\#Nd:7^i0nH'GXpA^iuQt.N-@B?fY$74WokDKZ?Y6r
%5S8]UTl-iJTXl?PFo,4?GXo=S?D+H)3en$"N'o?(%UVb%q\95CAM,ot"_Y8'/r3L>c$WjpKd0-Z2i%X+OCRg:AX(*Y=$cRV&tXjd
%AP-oY!r,*M!)96bM`no.e>W3f9_cnR(HK?sihG^ZGesTF^'orS>sUrI*7PQI%opL-3\eM47cOd')7.^:2mH(Zc3bDE<H54.E@H^E
%^j+mub[pj_0pR(0+K<a$&dQKH6:XQfkl^RA4$]9>/ontegq[=Y&*B/iI"[8e:G0PsVDUU#]UqiGEk)L"q1;nBFaS7lLu%b3Mr^6X
%_ctco_Lk"."4G<J93m64(A/"LoJiCX,dO\">WY;RPW[FK=F93!DItHLBJWs%,$CFAiTk1!Ei.KJ!R@t&\rY[JOSS6'#@[^!l`I/4
%^NE\%_/Qb@oMn59oS3h(YKI*L`s0*6b.J^sKc<^9G<LXRh06@7@WT&`/5I8`/'jC$!m_7h&'@_1b-1\W!9I&'gGbBM0:hF%$5@[6
%^O6,T@-l\h0;)#X%b.*l#;s^eSS\3dU[a.f#/0R*9PpDZZNd"6=X,HIQc!2\0&PS)R06Q\Q72eK7(Q$LK?qMsG=LLD$jP%oQumZ?
%c<5e9bCT+[k0@'d'(bT.'g7O"pMb_2!T(Z`Qq/X8R*e7D6XX&Kj7U!<<iJcA@ZdfAlF,3cId+_B-(s1FKe?u3LE&G_:>;a+X)$'K
%,3rE"qF4RJ\o,]UH*QWU?cCs>(S+^E9!ZM(Vi0W(auu8+i>%<8G1LPJ9?-;P/b6ccf]CfJFoqscQCi'@2DXa7FgpQJ8)`F>Etb["
%U+m3(dM14hUd.9[>R1Rl@?HFdSc`3'Qs4_4_eQP%dDci+KL9@:THm\+$b\oo\^O2j&oXT#!ja9952[S;:Hdd#6*^+4$DT'u71R@j
%r'#$IU`g;dSCU5]@s"9YB.W7)T>BJH>_$*m$4Bua&amk#_k]t4k&+%X>R'XZ[rb.o"-6<'%Ma#6faWQt4Lms`5)?E!KK'knQ5buG
%baJ97$++)E!XOrJ+EK'B2\_5kVAE87U_;c`nh-S0nda0549oG8C"='I!@=M#6fA=fH>!,2&^(KU?kePQk&nQLSH\NL!l>-/=.^80
%`h/mcWdF<-IZY.^$R7Yq8?HLs;`G?//fZ8LL+Y_,j]qWng6nOT6Q)ID'Kpu?_fq3A?X"4@NT.8K&+umF-l$Cb%Nse')LTN,+Pe<F
%Hc*Mkk&ept^BZds!/X'l&rL=N[Z2>ULo+6aL/W>m+cjZR3dn%W_:jriEtgA6KQ:&FL)Xl\#jOGsGZWJ^`')2gfKgMrH`5fVV[pDL
%h,rIOm=oEn\!rcDVcs1WaE3`_MR)JZ+8_nB`KQWFDS%K`J_c@t=(%tn8K?*nA-[5chA%M5GWOLcI7A;2&0&#ogRd'Ng(//\b2:S_
%^PuGC8S-dUee7rVVaD)A.-Gl6,YX6a7ZJ;s,@"(+!no&CTH6NAe5fXtfGeeLiHOPqGAl`6eDBpUHcOh$!h\Y!UXanV@SHAk]jOOU
%3e9*p8_1bg&Ole7%&=6*!9t^U$)]K"K8qYN$DfH!2lFM@fBn\hq;LQ_`D;(p-9kRq73T%_U0U8Qol,IBW=u?rajJs1,8/6I#L*t>
%o.am`W:cH^</lq`-]8&5VPH7Kb+\n$Wb5:>PQr4Ce.p+@4cQF#b4g5#;1<a>NcL=;.?g7''1]TuET/AOFb2!Mg)&u0'SF!!1NCpt
%@OI.UW*n%%LG1'7nt74e\j@j*o$+-jb&r&a;1<cd./&iYP2U#"m]@ibcHX$+Z^_nuN/b4u,Y8G`AUDZ7MC8HOI%#XQL_[_h@9^XB
%[Q6n&+D*kY"mWij`Wd7H,b>!A?Gc"n-G:oZ_CuC$oE&eJ1%UVU.e7Ici//Y!2c5`ZD[ttdhB^DcJs%kR'PF\N^;#5;>n-lM[:0pb
%hul7jIYGLqi4b`gZ"9ZKR2Sj;`)`i=%8m`U4"\I>*T29ZmK1Ph)^!%!/[VAY@3<BUdeuOnUIn(<2V_pB:[R^Vj&D`!"Jgl\$njX4
%=YEe4G-,JtWQ?[$Q?8@0n?rubB+\aHgT42B.WQNYD+XB@_T!=TUD(-Y\IQ0W7jS=%MKN`AH[%!l&M1q*"&fI]nhI.W*DmV+Tq7P@
%CcN%&p'6`(ED(7u(T?X7NefZ@%D]t_UblkT&EEhQd7@g;#bDh4S/'R&pcr8C+1,FU,$+0DXVci+]IP$*E`/Ti<rFHUW.B#*Xs4ej
%*"7e2Sn-?+&laWs?/re[KGEQ(dgH?AC,@aI+h]'+%*,JSk_-L:Ld3_M+E6JS+X32?0e4B=XZ=2)K!S*5&WT0[$K49_DH==5R#TUW
%[g52HcU"43NC-i+Tgt4/NG(GF^.g<)<46lR2F>2)8nHkp2P_MU%9?#rHNne\cjpa\d1mXaYS@]mW]c/Q;?T6^,NKtfL'^lm_Zr9W
%[9,d]6ZZP[X1o&h8TahIG5FY(`GdnCZV+1!A*A<)ahWsa0s0T<Ed_Zq"4.`d0UPQk#+91D([7aZ#XXtp`mtN7aGM-o)"1#JAI@Rh
%Y+#XmJk=Tq];?-UK0cZ5-g*@<C$>>2CZ\.nY7am,MM"a3WoO2=OgulLo>s`>Tnl>h\e0Td0o!=#$#FAN+K$QT"UsNX\9:_+r3B/J
%#0[Vs\pQ=A^e(Q4WM#q"S@CIF0LO35J5emnhM9gM;**%]7jc8$cI.9:f3:(Lq_\XCNfIra4jB@+.d)KC91%YpIOQ>uBSu/&5t?nI
%GA'BKQO$$7#N]fZih8eIWG!p*Esb6R3Pm%*HA&2%35Bakn?*_@cC(=WXD-fJ)QuYQQK)@.A9"?mLHPh`k7@dhWGEoL/ZbL,LEMO4
%hA1]/\IT8RY7WLP+W5O6b^_psY1Ea87_N,J2WS]TRQ+]eg[XD;-E\j2E$,FWWoE&ndW5^Q_[E7UDYp_,%k2+7Z0<]Nfsh@!A/GG=
%-(,Ye-6mK29)Q"&G_sVme:\-00G1c!<A"]:Yr.5[$X6Z<&ui,GN%nT'L6#S<nk5RBqLIlm0?"mf6Aiq"Op;:;\1Ah3db$%[Oq=U,
%&ZP#f!(Bi:ODZ1+;&a+-!gh;)e3mhF'>%cp$\1QYb5@5QDF&:0P1XPg.#lWm@bUpQ]Gb#sGa3mNEFX!4bo&<ZLPQi/-H=\:lbL%G
%0[QSrMqY2$Jeb`Sn^8B[D.VLGgPhSln_oK_8W1mRJ7Q+_;H8:V0FtWh?,>@;=m%pb^E7gLBA\^ecJI=eYi%"?.%kRr9TJ>oTMb>T
%];/9AcqDDeXV?Vc(WBPb'WjpM3qu8LI@#&d:.kq`5@$B>=<&0*n@Dd)XU?\9*E\/6D8_eLHofK=$Gr./?jG)sYW3;HCFO"P,%O<u
%V?1au&K]$b$\UZ_kVKQ_IDUW"G^$CSL4V09\t:ha<=Y>Eoa.0b'2%<i8**QMRrG7?]^C^$G&p+M>CAE@77kk,+BBAHc=C;r(AD'D
%LttM\!V6"6!=dSFZcXSS*HN4M\e=Jeef"foF5D?3JlU;@_JA*jL[]%N@a32_FV.SjReRc(1AG"2=VTQ"ZR$N*.s^5&\f)gr4fR6s
%3C&,e`_1p7"[\"gbhNb\#C=?ia^^/dpNh>kPf(i_?2%\A:lPhA"g2ub=k;#R4U"AmlkX-KZ/e/X#+OrHFT]Gn\R??$LDf<N+G1,_
%JkhE1UojlH+Q69T.kcUXJjaSh/]q)`;8<p<VK<%W(EPiap4E73_!DIq@9"9lkB,%;Gp:q*+_,o1M/#[#*$cM4*5W7dmod!V0mH3n
%k(\Ns0*aJILd`FELM+K_PCak#SLS/W&6sD#g'?<-6KVMhIGMk/MBQ2o8V\[H!`<6T1=6ih?Jp[6L";';oa7VsA3;I]^k2Jq=fe#k
%D[);<%q'mU[4_%IP)ueWU`U*i.2il<-`mW!8o^MX!qt*14;N@;M\+9XP83iM5dJ1(\LG<K's+a2.l;'@l^gNG?\GcL<Xqo:U=`d\
%]Vg*T>.f%\i\/B[h1">1:(lm\!!Nr^TS2Y&;K+c>U.Ni/:*K!Q;Q<:_*S*BV#2gI+JhD5(.lcMu6P*Y1=Z7L+UP<1[^T(?GA3)8t
%^clUnJ/Y2$^6QkdabB[ASm)h\SPWE&nL+UB8^hbo+r()(4rEssoBe4*c=-k:\.@PBn6ig-b'qT@TcIis#nhD$!fr/YYcdpsWKYa:
%;bU6qXj'1/@af?BOXA)W,!Mi..9B`L\Tuq/',P_\DnV&BSkV?Go"B@;G0\jDarsT-aE'O>O!Rm+LHNB^e%eITDDt5kZ:QKC>"].Q
%Oi-<Pf(+Hm),hFBMI]U%f:#nnAt?h.`#>[-YULls7kNat%9u1;\kdA(69qI;"'A>0m.qE2b4A-*#^9\CB?e#qnR_qQ"B4FJ%NLQT
%"UCJ6Sc$d@#$$*prp=TE's<TbhW)Lb%)KNE72FWq2d6jY.DeN_/-o(AYg%O^et"qm:3UI^U/8d[_!M:Cht8[C419EcZaHB==APPc
%jZRGaR4)ksh]1]tfi6nA?W_o\d@:XWnr@[W6m!VL]?[i\o.74J5qGmlBD9h?M(aos\&;bc--?[2HSL[+c.T<'nJgeeL&n3[N@2>>
%O&'D1)tD2f2L:t*H9C&"ZLRlEgccHcL&L6r>@FGrm+47T+.V$)@s-i3\qiM:)kQ9-Fd3:c9s64\!['?epKciS,_=+4ih`2u'#oI/
%Ns0"&BX2En,/P=TOon8"PT@"75U&OMR7s<!NG+>."fEO+&"6KoDs^SL)"g=>%:22GhpH2\k9+[&%l!37j0T![.tmc%;a_`d\p?gN
%1Iiish&IO[K(Fhg/3J`pmG;.afUQBNcI+::>f`Y22$P.<SAEke0O!C!h3Mo$bT1E<[isg`W$tKXB]sf36P>D7DYf&%Ao,R"YVOIO
%G-eu4-,u0u[QsXJVdC4tLIdg,ipj,2Rmi&i-].?AG(U^.Rf/g<OP<tE2&nU#D+*(5HA">sgR*13Z17G0eg'`gQ&Y<HmIn(MMsLu$
%fo:F.cCUTupqadpr6Q.Y+;p;$;gDfuN5F1,H,5GKiod*EF.lntEuPiX//[%M-`!-G*i`G/E<0obd"+5dO9:pgjn,g3/UJmP.!(-U
%V)N$r>K1_b^^GeWGms.n=Y;[JD@te1.V:VmHS((t^W%h<EQ=!W$[9rR3tKio!E?O42J39ACc6$t?A2f\0Xi%1!miLOcXkp-,$VcT
%Dsb^`1$jKdUu]8#DO/tBI_.XLSajO6,$u\%+^<<9?r#!i!>7=do7fMJ(^JIDE"*oFU^V%pm%'@K:pVA$"cG06c#?L]N/(qK/+q9#
%lGoERU_'1A3]5rrZ"%;U#blAj&\JBD&A.Qcl&Hb5$NMhV4Z-dio^9$h@u?bP!MWW,o_#"(,u)%ns#rR?=7T0(HW3Z.m/MDt.lGo`
%=Qs%`&FsHKP)N*b9JTUn+VaOc!Fo:VbF)N#,8ua-e:fRLp2+8UL:U28p7Rl6![2lDoLZ1Ob'MX'[Ju=caY<gSX>sN8onN>:UR;`<
%lDtX:5_M!@g]399\g4[P(V5A5_#qT:ofs3td-H;g@q`;EiN;7M`@O>OC0n\'3^@6!Ug.6D`:V<d&:Bp;.fjL,G<6$*R%b(TiLpTD
%8Yft&'2[g,;!!^:\qO.^b37*Ypo\nCMO`?UT_?/(L*tZpDMA3[+KtuaHLjt#q'\422d@(r_RaVtM[H,DO2n/>+4Ue]<fXm:U)mta
%A8*RNl?Oe6JHSfUCgU!AO'">cV.SO[+s>pql>U#D6*Js$KX\)L=qC9M%fiQl`>qCpkWp+0;sPnIQ3%A;LY"eM.bKlc`DFLd#gsg9
%NHE7PX,f;\Z;RC"el+Ah/?:%J:1l`/FVcJMli^^]^g1IZ4k^4tTSWuUo^#6`Rm=!-]P0do+\\m#)*KC?h/UdiqF_mKe5Z>`+\j4r
%a/JQDVG^8R-92Xn3n/mL7Q"[a5QVp8#XYl.=*8)s.Q,W.dZj&!+e%'l^`ske6bAB]@SKCHVM>5$Cj7GJ`^YpS>!a_jD@]Euc1,TO
%j07:KCj0/)J^Uu>$)Dei:0TA$n]DW2J\f%M6o)+d!##[['U'pn_LX)-:OFKY("k@l.R7`XKOs=X"P3pAFOA!3O2*Sa3/]'q+@2#Q
%eeBRs<ABB33cr0TD?ST"OLW]9B:?X:e.S-b+!S]WU(M%oB!E+:qagt7[Z<\gLn2S_b:;.F5r;A0b;tPhLI[.OPTkY\cL)--cW31j
%p.,_b[K.eBWD=U^04:uE\6AK&ns"uePo!2"=#NJ0Wio6`"[5fCE5c;EST9KQ/3>>I6C!.$*9]X:X3c3Ne#b6YF]Bpn?nW"?DV,jg
%,)eNQ(<:C-.MZ((apF.ZNZ(T%!uqLGOI(?4Zr5I-.:!Kh!UaAs&k<L57lXgT?_HH;0KN,OO""TTAA%'#G,>sVA!tP3"eJ(;DosCC
%,E)dkQUkWj_eA7j6X6'cZe/!s*RA63BT(B[6'DR2Sg(WT:RVXo-bO(R!"*9[a=1,i=I\Xb%h<6c\slE@4miT%c`AF._$h%4PS(s<
%L,G;:i2j6;bS('e!7I;Xib0<Od`c*0_g3nhMlg-(**O`l(Y,AZn5LM!?B:^:(&4;D>b.U/1OnS5GVAkgc,!&H9P.J1+H:5bREiji
%Cl1<`0UqS8XKqm^=a-4ED,GN;:AV\r3it[Ng4X0Em2s/&R4LVoejD:=j9)>@SQ>8,'p*DB0[sK1FfHj!h>Ja%9uTfd-NMXiU^2%a
%JSeh#7YWN9D@Yeu`pc1mW@eV`d/uWYR+WcG='_Yt&L"d0<SH;RjKS^-c(*dG-7\4i2MN\o$EW(a)Vak<+d]Dpk0!iWZ)YD<gYH<H
%$=P]52AhVe\H00CXMA4p>"B6U&gf5<-Pop83]Z?"U.:[BG]Zj1UEJ7FDAQJ1)\GGY83ag8*R1_D<XFp!$$ee6+Q?gp-o;(GR0l6f
%(k3u&#V_+Q-mmb8*3)K>XtMrsXrsGClQ57.-.H=n<o?][:lO-U"0#mf)g-)_3%9U'CNUEhF/jW\#s/G<0J8PQ-fXjsj1=Q_+:>hk
%]/8eSeM&*U:"CE@bkpVfAQOWM:5Qt:/)d:DY6QqI/Ed*gBGE^j#TqQVFi^iR`eT(%;NjeKZ!+)<Z/Z%EAeY@[mk>-T32H4A9eeV5
%D)(:;XVq^K(g3pmQDt++Uk'R5B=$:-mXiD?fQdL;a,;JP6)O%i`i1[8*#F\SP6WAtOCM6d<W5":$&rE6<1eh;_p_r$:$Pmtn7%rn
%._@0WH0^#FeS`tAGp2MbD#TTK=rPhXg?(ZS(m7Y&gUd_:%Bo"k'11\g;+i$^.O4\/Dp,;`'G$ZABijI0XBLn]]@5,3-JPsi#LF*9
%+UbC4!7L(BkSB%'Y2*tJL8`e0R4h\"4AGOI)V)\35T/"p!CN0QgN8@!XF^\EZF+hUgW3V#Up"O7H]6A!U?u#^P-ZM_@"u&(-aed$
%GYH&^-n")qJ=[[=!Y<>g;_dZj6<bUAm<D+n5VA4M?qM]bnlA)YZ-&QpJ8h?%8oDEs/p=lkVk%"+n^rBu.WLR5-KJo+!q)oNn-3sq
%MW$TT/=7aqa)W"8LQ,oGkJmX_ACaWbAg:S=hkIdKRike58?RV-XYHZ(]VL)k,FW(rKN:rIW=11"DH3Rf1D,V:rsdr\4\>p#"fVq3
%cV;M.4Q'M#[T-t9\!eJT`aZ58VMW;i=L]1NJ'CMNASZI;#j&#Er@YU[!$\1GAMX;G&<ieqhd4E7G!X!L*B]UVqLItE9&,Nf]bN=h
%mBE.10@2:U,S1OYOFVU5Y2pGd@0PVY?)8!:bQ]A/$W&DjiWJ8u6b;&)pJP"b73@['[nuYfY)f;<@lG6drZSI72ej1+_;P/`%Fc>0
%_C^=i0Gq_3'L'I.%g"=e=!uO,VClI/789$JR`mG0_8oQQe&&f`28o505Un04qSt+b7.GW:6F"tQ[4JiMHS)$_O"t)^>nJ^;cU"E'
%I^0=?IUnY#)YDtq`VW?'ZZTGhO)Y85KE3kc+r$]OE>2Dr$W'hfPptRcO&G`E1P$"ZpoIZS+Jqq9&4J3TpHU15GKk^'+bt.8"a>We
%93PC%a:LR93mhYlIY3u+o/4m;`=.&u0ug.jkZRKrW,@V]h%kV#6(-oE]#n7MMI9HAi=9ckLCd#B$L7:,Va6(L&`;B*bM@@m:'4Q+
%"(_JUlmH66_p)4JpJ4\ZX4JKc\b=Yr$GI<)D^(7Y8BYoMR[!%jPE%ChW\WURMnLc`E"_[O6,p4P5@NGt"d*\<h#jMDUMk%BlI2pu
%rF^MI8t9%#>&pM+8.kE!K]\+$0P+L(%e/R/q=YW'jNt*j5i-:RPrReE\CA[jZat\\oIj$D-eFljVX)eb],RC0ca[eaS"q8p+7?ld
%#U6!IBGG`0+Yic)i#SO1$Hp-OXT;F>]"PQa&M^0+]f!Z-J`sf/+R\)Id*)D6HU'b([2*YQel+>tl5:)+J[F0?S)qta?JMu(HP&GD
%X=G*;KI`JdHbfGSqu9uqX^hqGBS`u85\Ol:1?N=?@BM`Q!L92<ZsE_u!@UIsi5&_PeqU$44AEi8'gb>c>)##[!#0KT&@EJtb*3Ps
%9R=Jt=5u[DYi4B%pP%YYW!%fl$nO^=W*@6omm%rtWoAUYRQ^eB]cV0cC0#+Hkp`YH0nlt7RJ8)q5dq`0(gp9*Zu.F,_3+I:h@ad@
%\:TI(RX/Y57hV:ihFq2U!2B=V+J-qM)=re:\V.*d!#$noE>/C$Bgb8kEOj6cR8E+"5Y^S!-&s.BC)/Dr%Ak$dqXbfuh4WBDp/?`$
%lD)i\].R*=!3,M#iA2*.O9rXo32#CpjU1-%25Nn\+L?;1&fG'BRcfKa'a[JZ9q2PeJciqa=]Ql+7-:d1I85nUh*<.;2KcC/(SH0]
%$_`ji+FS:!8M*1RgC;DP,EG_]Ab24#^u7JhM%_d=R,+JU](H,(I;+*q%>MO!pXtY]aQ0VK"t\[=Ag6TYD!(V@Aq<jd>o*otW;4PH
%C"cU$HY>9$9S3CGoq@[?Bb!tjkY,+rcUXrRVr9Nc&I=8;:a!b(7!s7L0MQk3!a8;*7mC=1P)dKA8e[Kl<LpsohHfI@(pufr)??1/
%:+6?YRl..3JokS$`]lV>L)Vel91Ptk[N^UAJZ?hi6.qMcV#eG[F[F#,DP-B=`ssai:*p2uMI"jN,E_p>PjE\\TGjSdc/l*063FIt
%-qRMdg`<fiId'QVQOFqG6mXR(\#Y=@frB\[lZ&)<J-OQ!Vp]U4<%53AYdOT#$39ai2M&"a!3,bp\0smR80!6"GSG>%Jqu[AArIJ0
%!MD>FogB@l?HY`Vnr\YFM1"*Q^*H"jV:qA*1I`%@3.TLc&'maZ-!4nT(a2M`Qba/om^kn2V3V5j2c007G=r,'&-]EI/chEcS8]@5
%s'1hEhZSo;Bf\KL&C;cX;dEIu=tG`X9#6g@^X]/ggYT_m\XI8X0!!OH_<\1'1HV&3>0YJbpsj+@4L&7[%lbgN-4guV7P)#YqHfhs
%?T=)OfaSBgE]L!)c0>NB`<XXO&_V';:N'Qq2EFY(7!Oi`0<+>lODPg?+X<T_)'&:8_qN)7m5hlGe;/MX'Q)j\!`2b3Vm_4dN7aX:
%8M9>Q!G!f87;Q^$aKZp*-s1IS/DQ9^+/%@bUH6V\-F%=;lr\AY+m4RL9r5Dd+;[A!b/+jgZW1)L;fJ[hb\7LZ%/%'XYpF@9F@-IT
%g_;m39_C[$NXo?f)Lfd)OS4=='.nO<C#o=PNE-e""q^_H$)72:S#oIdG[r))RKA_"CdND!!`-t+$6m+N&P>?MJnEgQeQOS`s-%@Q
%mmJ_@>M++pIMlMG;/:"aWL/e$:DZ3kX^'G2[\BVqeT2kBbRU(0^#YYU,(K=b,*Jb-SSisTPcfHR9Jq<fD@lN#<R85Z@5H]uWSkoP
%Z@_N;m#C:\%g#G\D"aZJ*+I&W:k[p;d9E,a+>8XuT8Y*dq2h^I4W,0q"1!@Mc!<V7/_j!)K-#=)'cQ&mmQ4"'R_b'IW8cU:6,$un
%,GUI/BC]1.-Nq9*eN(:,p-GA:1ULr86<K1Kfa"dWM),$hL(NAl22a^j]9'FC!8.GcL3ooUJ@G_cpHU/pPNKI!9(@LGVojl2dApq\
%[3'oa"*`U0G]=,#9CHIW=U!X)a`"T`Je(rHOD!suj\iTRZZ3S]"]B+[0g)ma61R9O@g5r\N?P^b<)&QuU$_A6jTGTp\sKXtn,n71
%PlHa6"r_Re2-3>[$[Igu_?XhbLMP3'(tYt'N6VFtX`\6\n$YA`G6OR,fiR9<\oXQoE:Me@<T"B.MLT0M(T<7pc^%s?[09VGis_;n
%mJ*t6mK(gZr$iH`W2b%VA4IbA%\t:1Xa?^O*!t%@QH"_j%iXrMMoOBF/^Z<q^c[Z#2/r[F0&>56Lf>9`S&'r8H@rT/2A;A/%9+!I
%SWbbpIE_9a:7DI.5td=_F3CG8bq*Te3#K?,WY3"_8H0#@l-lX;\lPle\^j`rjEjT2[En>A_;ltP,g"<^;)C8SNf3i06(i)5$Ur7n
%dV2WSfP_K,D=X.Gqp3Yu3&"DYBk2NQA1rK=15[%pV-$8W/kXuYP.)/Iq](njN_1*P$j_PI"c]<'gB/<#=!6le<'rbc*s?>HVhU"G
%!)iD!Iq3HBf&MtVC>nSfs!EI3:f,eb%JS)\e<-'-7\nDmUDh2OA$ZF#!TgWFroVtU5CJ1&\(;&*CJg]VF@kU65#TI7dN&]cYK;E&
%_.tsg5%(2aaeG)8q!W\1h7n@/me=K.8\XN5s5jiArpG!r&-)EC8B%'j?17b'hgbCfpX`RjS#;MLbr<E7rLa,bX'_\FeOTD95+Y!"
%lho5Rd(Ig\]>@>k@/eqVif@8nkL[<=(4K5$l)DnY^?eS^lfW-.kA=]+N$QlaOdA]sh)1KS4dkC(8YTZd6b`QmW]@hDH%[Q_Ie]2t
%]Fpf;_Xm@A4?oA-qeuMlDuTReJ,K;8hnMOumsk>s2uiI9h)F5>pP1t]o;?O,^\+M:J,]H%5Q9mXhg^"Ia8badIg#t?G(m^0g]-R]
%rpRVtGQ0mC_AIb~>
%AI9_PrivateDataEnd
